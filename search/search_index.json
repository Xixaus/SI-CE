{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SI-CE Integration Package","text":"<p>A Python package for automated control of Agilent ChemStation CE systems integrated with Sequential Injection (SI) hardware. Enables programmatic sample preparation, method execution, and data acquisition for analytical chemistry workflows.</p> <p>This package was developed for OpenLab ChemStation ver. C.01.07 SR2 [255] with Agilent Technologies 7100 Capillary Electrophoresis system combined with sequential injection components. Compatibility with other systems has not been tested.</p> <p>Project Status</p> <p>This project is actively developed.</p>"},{"location":"#what-is-si-ce","title":"What is SI-CE?","text":"<p>SI-CE combines two powerful analytical techniques:</p> <ul> <li>Capillary Electrophoresis (CE): High-resolution separation technique for analyzing charged molecules</li> <li>Sequential Injection (SI): Automated sample preparation and liquid handling system</li> </ul> <p>Connection of these techniques provides user with:</p> <ul> <li>Fully automated sample preparation and analysis</li> <li>Reduced manual intervention and human error</li> <li>Increased throughput and reproducibility</li> <li>Complex analytical workflows with minimal supervision</li> </ul>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#chemstation-api","title":"ChemStation API","text":"<ul> <li>Direct communication with OpenLab CDS ChemStation command processor</li> <li>Method and sequence management functions</li> <li>Instrument status monitoring and control</li> <li>Automated vial handling for CE7100 systems</li> </ul>"},{"location":"#sia-api","title":"SIA API","text":"<ul> <li>Serial communication modules for SI hardware</li> <li>Device controllers for syringe pumps (Cavro XCalibur) and valve selectors (VICI)</li> <li>Pre-configured workflows for common analytical procedures</li> </ul>"},{"location":"#code-preview","title":"Code preview","text":"<pre><code>from ChemstationAPI import ChemstationAPI\nfrom SIA_API.devices import SyringeController, ValveSelector\nfrom SIA_API.methods import PreparedSIMethods\n\n# Initialize system components\nce = ChemstationAPI()\nsyringe = SyringeController(port=\"COM3\", syringe_size=1000)\nvalve = ValveSelector(port=\"COM4\", num_positions=8)\nworkflow = PreparedSIMethods(ce, syringe, valve)\n\n# Automated sample preparation and analysis\nworkflow.system_initialization_and_cleaning()\nworkflow.batch_fill(vial=15, volume=1500, solvent_port=3)\nce.method.execution_method_with_parameters(\n    vial=15, method_name=\"Protein_Analysis\", sample_name=\"Sample_001\"\n)\n</code></pre>"},{"location":"#support-and-contributing","title":"Support and Contributing","text":"<ul> <li>Issues: Report bugs on GitHub Issues</li> <li>Discussions: Join our community discussions</li> <li>Contributing: See our contribution guidelines</li> </ul>"},{"location":"getting-started/","title":"Getting Started with SIA-CE","text":"<p>This guide covers installation and initial system configuration for automated capillary electrophoresis with sequential injection.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":""},{"location":"getting-started/#required-hardware","title":"Required Hardware","text":"<ul> <li>Agilent CE7100 or compatible CE system controlled by ChemStation</li> <li>SI Components: Syringe pump and valve selector with serial communication</li> <li>Serial Ports: Available COM ports for SI device communication</li> </ul>"},{"location":"getting-started/#required-software","title":"Required Software","text":"<ul> <li>ChemStation: OpenLab CDS ChemStation (tested on version C.01.07 SR2)</li> <li>Python: Version 3.7 or higher</li> </ul>"},{"location":"getting-started/#installation","title":"Installation","text":""},{"location":"getting-started/#download-and-install","title":"Download and Install","text":"<ol> <li>Download the package from the project repository (download link)</li> <li>Extract to desired location (e.g., <code>C:\\SIA-CE\\</code>)</li> <li>Install dependencies by double-clicking <code>install.bat</code></li> </ol> <p>The install.bat file automatically runs: <pre><code>python -m pip install -e .\n</code></pre></p> <p>This installs the package and all required dependencies: <code>pyserial</code>, <code>tqdm</code>, <code>pandas</code>, <code>pywin32</code>.</p>"},{"location":"getting-started/#verify-installation","title":"Verify Installation","text":"<pre><code>import ChemstationAPI\nimport SIA_API\nprint(\"Installation successful\")\n</code></pre>"},{"location":"getting-started/#recommended-development-tools","title":"Recommended Development Tools","text":""},{"location":"getting-started/#code-editor","title":"Code Editor","text":"<p>Visual Studio Code - Free, powerful editor with excellent Python support</p> <ul> <li>Built-in terminal and debugger</li> <li>Python extension for syntax highlighting and IntelliSense</li> <li>Integrated Git support for version control</li> <li>Extensions for Jupyter notebook support</li> </ul>"},{"location":"getting-started/#interactive-development","title":"Interactive Development","text":"<p>Jupyter Notebook - Interactive development environment, ideal for analytical workflows</p> <ul> <li>Cell-by-cell execution: Test individual operations without running full scripts</li> <li>Real-time monitoring: Track syringe volume, system status, and analysis progress</li> <li>Documentation: Combine code, markdown notes, and results in one document</li> <li>Reproducibility: Save complete workflows with outputs for later reference</li> </ul>"},{"location":"getting-started/#chemstation-setup","title":"ChemStation Setup","text":""},{"location":"getting-started/#load-communication-macro","title":"Load Communication Macro","text":"<ol> <li>Start ChemStation and wait for complete loading</li> <li>Get macro path - run this Python code to find the exact path:</li> </ol> <pre><code>import os\nimport ChemstationAPI\nmacro_path = os.path.join(os.path.dirname(ChemstationAPI.__file__), \n                          \"core\", \"ChemPyConnect.mac\")\nprint(f\"Load this macro: {macro_path}\")\n</code></pre> <ol> <li>Load macro in ChemStation - copy the path from above and execute: <pre><code>macro \"C:\\your\\path\\to\\ChemPyConnect.mac\"; Python_Run\n</code></pre></li> </ol> <p>Expected output: <code>Start Python communication</code></p>"},{"location":"getting-started/#hardware-setup","title":"Hardware Setup","text":""},{"location":"getting-started/#identify-com-ports","title":"Identify COM Ports","text":"<p>Before configuring devices, discover which COM ports are available:</p> <pre><code>import serial.tools.list_ports\n\nprint(\"Available COM ports:\")\nfor port in serial.tools.list_ports.comports():\n    print(f\"{port.device}: {port.description}\")\n</code></pre> <p>Typical device descriptions:</p> <ul> <li>Syringe pump: \"USB Serial Port\", \"FTDI USB Serial Device\"</li> <li>Valve selector: \"USB-SERIAL CH340\", \"Prolific USB-to-Serial\"</li> </ul>"},{"location":"getting-started/#configure-devices","title":"Configure Devices","text":"<pre><code>from SIA_API.devices import SyringeController, ValveSelector\n\n# Replace COM ports with your actual ports from discovery above\nsyringe = SyringeController(port=\"COM3\", syringe_size=1000)  # Your syringe port\nvalve = ValveSelector(port=\"COM4\", num_positions=8)          # Your valve port\n\n# Test basic functionality\nsyringe.initialize()\nvalve.position(1)\nprint(\"Hardware configured successfully\")\n</code></pre>"},{"location":"getting-started/#system-verification","title":"System Verification","text":""},{"location":"getting-started/#complete-system-test","title":"Complete System Test","text":"<p>Run this comprehensive validation to verify all components:</p> <pre><code>def validate_system():\n    \"\"\"Test all system components.\"\"\"\n\n    try:\n        # Test ChemStation connection\n        from ChemstationAPI import ChemstationAPI\n        ce = ChemstationAPI()\n        status = ce.system.status()\n        print(f\"\u2713 ChemStation connected: {status}\")\n\n        # Test SI devices  \n        from SIA_API.devices import SyringeController, ValveSelector\n        syringe = SyringeController(port=\"COM3\", syringe_size=1000)  # Use your port\n        valve = ValveSelector(port=\"COM4\", num_positions=8)          # Use your port\n\n        syringe.initialize()\n        print(\"\u2713 Syringe initialized\")\n\n        valve.position(1)\n        print(\"\u2713 Valve positioned\")\n\n        print(\"\u2713 System validation complete - ready to use!\")\n        return True\n\n    except Exception as e:\n        print(f\"\u2717 Validation failed: {e}\")\n        return False\n\n# Run validation\nvalidate_system()\n</code></pre>"},{"location":"getting-started/#quick-troubleshooting","title":"Quick Troubleshooting","text":"<p>ChemStation connection fails:</p> <ul> <li>Verify ChemStation is running and responsive</li> <li>Check macro loading: <code>macro \"path\\ChemPyConnect.mac\"; Python_Run</code></li> <li>Look for \"Start Python communication\" message</li> </ul> <p>SI device not found:</p> <ul> <li>Check COM ports in Device Manager (Windows)</li> <li>Verify device power and USB cable connections</li> <li>Try different COM port numbers</li> </ul> <p>Import errors:</p> <ul> <li>Re-run <code>install.bat</code> to reinstall dependencies</li> <li>Check Python version: <code>python --version</code> (requires 3.7+)</li> <li>Restart Python environment after installation</li> </ul>"},{"location":"api-reference/chemstation-api/","title":"ChemStation API","text":"<p>Main API controller for ChemStation integration.</p>"},{"location":"api-reference/chemstation-api/#ChemstationAPI.ChemstationAPI.ChemstationAPI","title":"ChemstationAPI.ChemstationAPI.ChemstationAPI","text":"<pre><code>ChemstationAPI(config: Optional[CommunicationConfig] = None)\n</code></pre> <p>               Bases: <code>ChemstationCommunicator</code></p> <p>Main API controller for ChemStation.</p> <p>Serves as a unified gateway for all ChemStation functionality, organizing different  aspects of CE instrument control into logical modules. This class does not perform  business logic directly, but forwards calls to appropriate specialized modules.</p> <p>The API provides access to five main functional areas: - CE Module: Carousel vial handling, capillary operations, pressure control - Method Module: CE method management, parameter editing, method execution - Sequence Module: Sequence table editing, batch analysis management - System Module: Instrument status monitoring, run control, diagnostics - Validation Module: Input validation, file existence checks, system state validation</p> Communication Protocol <p>Uses file-based communication where commands are written to a command file and responses are read from a response file. ChemStation monitors the command file through a macro and executes commands via the Command Processor (CP).</p> <p>Attributes:</p> Name Type Description <code>ce</code> <code>CEModule</code> <p>Capillary Electrophoresis instrument control and vial management.</p> <code>method</code> <code>MethodsModule</code> <p>CE method loading, saving, parameter editing and execution.</p> <code>sequence</code> <code>SequenceModule</code> <p>Sequence table management and batch analysis control.</p> <code>system</code> <code>SystemModule</code> <p>System status monitoring and diagnostic functions.</p> <code>validation</code> <code>ValidationModule</code> <p>Input validation and system state checking.</p> Example <p>Basic instrument control workflow:</p> <p>Initialize ChemStation API controller.</p> <p>Sets up communication with ChemStation and initializes all functional modules. By default, tests the connection on startup to ensure ChemStation is responding.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Optional[CommunicationConfig]</code> <p>Communication configuration settings. If None, uses default configuration    with standard file paths and communication parameters.</p> <code>None</code> <p>Raises:</p> Type Description <code>ConfigurationError</code> <p>If communication setup fails or paths are invalid.</p> <code>ConnectionError</code> <p>If ChemStation connection test fails (when test_on_init=True).            This typically indicates ChemStation is not running or the            communication macro is not loaded.</p> Note <p>Before using the API, ensure ChemStation is running and execute this command in ChemStation's command line to start the communication macro:</p> <p>macro \"path\\to\\ChemPyConnect.mac\"; Python_Run</p>"},{"location":"api-reference/chemstation-api/#ChemstationAPI.ChemstationAPI.ChemstationAPI--initialize-api-connection","title":"Initialize API connection","text":"<p>api = ChemstationAPI()</p>"},{"location":"api-reference/chemstation-api/#ChemstationAPI.ChemstationAPI.ChemstationAPI--load-vial-to-inlet-position-for-analysis","title":"Load vial to inlet position for analysis","text":"<p>api.ce.load_vial_to_position(15, \"inlet\")</p>"},{"location":"api-reference/chemstation-api/#ChemstationAPI.ChemstationAPI.ChemstationAPI--load-and-execute-a-ce-method","title":"Load and execute a CE method","text":"<p>api.method.load(\"CE_Analysis_Method\") api.method.run(\"Sample_001\")</p>"},{"location":"api-reference/chemstation-api/#ChemstationAPI.ChemstationAPI.ChemstationAPI--monitor-analysis-progress","title":"Monitor analysis progress","text":"<p>while api.system.method_on(): ...     remaining = api.system.get_remaining_analysis_time() ...     print(f\"Analysis remaining: {remaining:.1f} minutes\") ...     time.sleep(30)</p>"},{"location":"api-reference/chemstation-api/#ChemstationAPI.ChemstationAPI.ChemstationAPI--direct-chemstation-command-execution","title":"Direct ChemStation command execution","text":"<p>current_voltage = api.send('response$ = VAL$(ObjHdrVal(RCCE1Status[1], \"Voltage_actual\"))') print(f\"Current HV: {current_voltage} kV\")</p>"},{"location":"api-reference/chemstation-api/#ChemstationAPI.ChemstationAPI.ChemstationAPI-functions","title":"Functions","text":""},{"location":"api-reference/chemstation-api/#ChemstationAPI.ChemstationAPI.ChemstationAPI.send","title":"send","text":"<pre><code>send(command: str, timeout: float = 5.0) -&gt; Optional[str]\n</code></pre> <p>Send command directly to ChemStation Command Processor.</p> <p>Executes raw ChemStation commands through the Command Processor (CP). This method provides direct access to ChemStation's scripting capabilities for advanced operations not covered by the specialized modules.</p> <p>For commands that should return a value, prefix the command with \"response$ = \" to capture the result. Commands without this prefix execute but return None.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>str</code> <p>ChemStation CP command string to execute. Can include:     - Variable assignments: SetTabHdrText, SetTabVal, SetObjHdrText     - Data retrieval: _METHPATH$, _DATAPATH$, ACQSTATUS$     - Module commands: WriteModule, SendModule$      - Macro calls: macro path; macro_name parameters     - System commands: LoadMethod, SaveMethod, RunMethod</p> required <code>timeout</code> <code>float</code> <p>Maximum time to wait for command response in seconds.     Increase for long-running operations like method execution.</p> <code>5.0</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>String response from ChemStation if command starts with \"response$ = ...\",</p> <code>Optional[str]</code> <p>otherwise None for commands that don't return values.</p> <p>Raises:</p> Type Description <code>CommandError</code> <p>If ChemStation reports command execution failure.</p> <code>TimeoutError</code> <p>If no response received within timeout period.</p> <code>ChemstationError</code> <p>If ChemStation returns an error message.</p> <p>Examples:</p> <p>Get current method path:</p> <pre><code>&gt;&gt;&gt; path = api.send(\"response$ = _METHPATH$\")\n&gt;&gt;&gt; print(f\"Method directory: {path}\")\n</code></pre> <p>Get current high voltage:</p> <pre><code>&gt;&gt;&gt; voltage = api.send('response$ = VAL$(ObjHdrVal(RCCE1Status[1], \"Voltage_actual\"))')\n&gt;&gt;&gt; print(f\"Current voltage: {voltage} kV\")\n</code></pre> <p>Load a specific method:</p> <pre><code>&gt;&gt;&gt; api.send('LoadMethod _METHPATH$, \"MyMethod.M\"')\n</code></pre> <p>Execute a macro with parameters:</p> <pre><code>&gt;&gt;&gt; api.send('macro \"c:\\macros\\mymacro.mac\"; my_macro_name 15, \"Sample001\"')\n</code></pre> <p>Send module command to CE instrument:</p> <pre><code>&gt;&gt;&gt; api.send('WriteModule \"CE1\", \"FLSH 60.0,-2,-2\"')  # 60s flush\n</code></pre>"},{"location":"api-reference/chemstation-ce/","title":"CE Module","text":"<p>Capillary Electrophoresis instrument control module.</p>"},{"location":"api-reference/chemstation-ce/#ChemstationAPI.controllers.ce_module.CEModule","title":"ChemstationAPI.controllers.ce_module.CEModule","text":"<pre><code>CEModule(communicator: ChemstationCommunicator)\n</code></pre> <p>Agilent 7100 CE instrument control for vial handling and capillary operations.</p> <p>Provides high-level interface for controlling the CE instrument's sample handling system, capillary conditioning, and pressure operations. Manages the 50-position carousel and three lift positions through ChemStation communication.</p> <p>The system operates under strict safety constraints where carousel operations are only available during voltage application (analysis runtime) and completely blocked during pressure operations or when instrument doors are open.</p> Vial States <ul> <li>\"carousel\": In tray position, ready for loading</li> <li>\"inlet\": At inlet lift (sample/buffer introduction, positive electrode)</li> <li>\"outlet\": At outlet lift (waste/collection, ground electrode)  </li> <li>\"replenishment\": At replenishment lift (buffer system maintenance)</li> <li>\"out_system\": Not detected in system</li> </ul> <p>Attributes:</p> Name Type Description <code>comm</code> <p>ChemStation communicator for sending commands to CE1 module</p> <code>validation</code> <p>Input validation and system state checking module</p> <p>Initialize CE module with ChemStation communicator.</p> <p>Parameters:</p> Name Type Description Default <code>communicator</code> <code>ChemstationCommunicator</code> <p>ChemStation communication interface for sending          commands and receiving responses from CE1 module</p> required"},{"location":"api-reference/chemstation-ce/#ChemstationAPI.controllers.ce_module.CEModule-functions","title":"Functions","text":""},{"location":"api-reference/chemstation-ce/#ChemstationAPI.controllers.ce_module.CEModule.load_vial_to_position","title":"load_vial_to_position","text":"<pre><code>load_vial_to_position(vial: int, position: str = 'replenishment') -&gt; None\n</code></pre> <p>Load vial from carousel to specified lift position.</p> <p>Transfers a vial from its carousel slot to one of the three lift positions for CE operations. The system automatically rotates the carousel to bring the vial to the front and lifts it to the target position. Includes automatic vial presence verification and mechanical stabilization time.</p> <p>Parameters:</p> Name Type Description Default <code>vial</code> <code>int</code> <p>Carousel position number (1-48 for samples, 49 for parking)</p> required <code>position</code> <code>str</code> <p>Target lift position:      - \"inlet\": Sample injection, positive electrode contact      - \"outlet\": Waste collection, negative electrode (ground)      - \"replenishment\": Buffer system maintenance</p> <code>'replenishment'</code> <p>Raises:</p> Type Description <code>VialError</code> <p>If vial not present in carousel or loading operation fails</p> <code>ValueError</code> <p>If invalid position specified</p> <code>SystemError</code> <p>If carousel unavailable (doors open or pressure operations active)</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Load sample for analysis\n&gt;&gt;&gt; ce.load_vial_to_position(15, \"inlet\")\n&gt;&gt;&gt; # Load waste collection vial  \n&gt;&gt;&gt; ce.load_vial_to_position(20, \"outlet\")\n</code></pre> Note <p>Carousel operations only work during voltage application (analysis runtime). Completely blocked during pressure operations (injection, conditioning, flushing).</p>"},{"location":"api-reference/chemstation-ce/#ChemstationAPI.controllers.ce_module.CEModule.unload_vial_from_position","title":"unload_vial_from_position","text":"<pre><code>unload_vial_from_position(position: str = 'replenishment') -&gt; None\n</code></pre> <p>Return vial from lift position back to its original carousel slot.</p> <p>Lowers the vial from the specified lift position and returns it to its original carousel position. The system automatically identifies which vial number to return based on the current lift position contents.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>Lift position to unload from:      - \"inlet\": Return sample vial      - \"outlet\": Return waste vial      - \"replenishment\": Return buffer vial</p> <code>'replenishment'</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If invalid position specified</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Return vials after analysis completion\n&gt;&gt;&gt; ce.unload_vial_from_position(\"inlet\")\n&gt;&gt;&gt; ce.unload_vial_from_position(\"outlet\")\n</code></pre> Warning <p>NEVER unload inlet or outlet vials during voltage application! This can cause severe electrical damage to the instrument's electrode system. Replenishment vials can be safely unloaded during voltage application.</p>"},{"location":"api-reference/chemstation-ce/#ChemstationAPI.controllers.ce_module.CEModule.get_vial_state","title":"get_vial_state","text":"<pre><code>get_vial_state(vial: int) -&gt; str\n</code></pre> <p>Get current position and state of a vial within the CE system.</p> <p>Queries the instrument hardware to determine the real-time location of a specific vial. Essential for tracking sample positions and validating system state before operations.</p> <p>Parameters:</p> Name Type Description Default <code>vial</code> <code>int</code> <p>Vial position number to check (1-50)</p> required <p>Returns:</p> Type Description <code>str</code> <p>Current vial state:</p> <code>str</code> <ul> <li>\"carousel\": Available in tray position, ready for loading</li> </ul> <code>str</code> <ul> <li>\"inlet\": At inlet lift (sample/buffer introduction)</li> </ul> <code>str</code> <ul> <li>\"outlet\": At outlet lift (waste/collection)</li> </ul> <code>str</code> <ul> <li>\"replenishment\": At replenishment lift (buffer maintenance)</li> </ul> <code>str</code> <ul> <li>\"out_system\": Not detected anywhere in the system</li> </ul> <p>Raises:</p> Type Description <code>ValueError</code> <p>If vial number outside valid range (1-50)</p> <code>SystemError</code> <p>If unable to query vial state from instrument</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Check sample preparation status\n&gt;&gt;&gt; if ce.get_vial_state(15) == \"inlet\":\n...     print(\"Sample ready for injection\")\n&gt;&gt;&gt; # Monitor multiple vials\n&gt;&gt;&gt; for vial in [10, 11, 12]:\n...     print(f\"Vial {vial}: {ce.get_vial_state(vial)}\")\n</code></pre>"},{"location":"api-reference/chemstation-ce/#ChemstationAPI.controllers.ce_module.CEModule.flush_capillary","title":"flush_capillary","text":"<pre><code>flush_capillary(time_flush: float, wait: bool = True) -&gt; None\n</code></pre> <p>Perform high-pressure capillary conditioning flush.</p> <p>Executes capillary conditioning using maximum internal pressure (~950 mbar) to remove air bubbles, clean contaminants, and condition the capillary surface. Buffer is drawn from the inlet vial and expelled through the outlet.</p> <p>Parameters:</p> Name Type Description Default <code>time_flush</code> <code>float</code> <p>Flush duration in seconds.</p> required <code>wait</code> <code>bool</code> <p>If True, shows progress bar and waits for completion.   If False, starts flush operation and returns immediately.</p> <code>True</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If flush time is not positive</p> Requirements <ul> <li>Buffer vial must be loaded at inlet position</li> <li>Adequate buffer volume for specified flush duration</li> </ul> Note <p>Uses maximum system pressure (~950 mbar). Carousel completely blocked during operation due to active pressure application.</p>"},{"location":"api-reference/chemstation-ce/#ChemstationAPI.controllers.ce_module.CEModule.apply_pressure_to_capillary","title":"apply_pressure_to_capillary","text":"<pre><code>apply_pressure_to_capillary(pressure: float, time_pressure: float, wait: bool = True) -&gt; None\n</code></pre> <p>Apply precise pressure to capillary for controlled operations.</p> <p>Provides exact pressure control for sample injection, gentle conditioning, or specialized treatments. Unlike flush_capillary(), allows precise pressure specification within the safe operating range. Commonly used for hydrodynamic sample injection where pressure directly affects injected sample volume.</p> <p>Parameters:</p> Name Type Description Default <code>pressure</code> <code>float</code> <p>Pressure in mbar (range: -100 to +100)      - Positive: Pushes liquid from inlet toward outlet      - Negative: Creates vacuum, pulls liquid toward inlet</p> required <code>time_pressure</code> <code>float</code> <p>Duration of pressure application in seconds</p> required <code>wait</code> <code>bool</code> <p>If True, shows progress bar and waits for completion.   If False, starts pressure and returns immediately.</p> <code>True</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If pressure outside safe range (\u00b1100 mbar) or time not positive</p> Note <p>Injection pressure directly affects sample volume and peak shape. Carousel blocked during pressure application - position vials beforehand.</p>"},{"location":"api-reference/chemstation-exceptions/","title":"Exceptions","text":"<p>Custom exception classes for error handling.</p>"},{"location":"api-reference/chemstation-exceptions/#ChemstationAPI.exceptions","title":"ChemstationAPI.exceptions","text":"<p>ChemStation API Exception Classes - Specialized error handling for CE operations.</p> <p>This module defines a hierarchy of exception classes for precise error handling in ChemStation operations. Each exception type represents a specific category of failure, enabling targeted error handling and clear diagnostic messages.</p> Exception Hierarchy <p>ChemstationError (base) \u251c\u2500\u2500 CommunicationError - File-based communication failures \u251c\u2500\u2500 CommandError - ChemStation command execution failures \u251c\u2500\u2500 FileOperationError - File system operation failures \u251c\u2500\u2500 SequenceError - Sequence management and execution failures \u251c\u2500\u2500 MethodError - CE method operation failures \u251c\u2500\u2500 VialError - Vial handling and validation failures \u251c\u2500\u2500 ConfigurationError - System configuration failures \u251c\u2500\u2500 ValidationError - Input validation and prerequisite failures \u2514\u2500\u2500 TimeoutError - Operation timeout failures</p> <p>Error Categories: - Communication: Protocol-level failures between Python and ChemStation - Validation: Pre-operation checking failures (missing files, invalid parameters) - Instrument: Physical instrument operation failures (vial loading, method execution) - System: Configuration and setup failures - Timing: Timeout and synchronization failures</p> <p>.. moduleauthor:: Richard Mar\u0161ala</p>"},{"location":"api-reference/chemstation-exceptions/#ChemstationAPI.exceptions-classes","title":"Classes","text":""},{"location":"api-reference/chemstation-exceptions/#ChemstationAPI.exceptions.ChemstationError","title":"ChemstationError","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception class for all ChemStation-related errors.</p> <p>This is the root exception class that all other ChemStation exceptions inherit from. It can be used to catch any ChemStation-related error in broad exception handling scenarios.</p> Usage <p>try:     # ChemStation operations     api.ce.load_vial_to_position(15, \"inlet\")     api.method.run(\"Sample001\") except ChemstationError as e:     print(f\"ChemStation operation failed: {e}\")     # Handle any ChemStation-related error</p>"},{"location":"api-reference/chemstation-exceptions/#ChemstationAPI.exceptions.CommunicationError","title":"CommunicationError","text":"<p>               Bases: <code>ChemstationError</code></p> <p>Raised when file-based communication system fails.</p> <p>This exception indicates problems with the underlying communication protocol between Python and ChemStation, including file access issues, protocol synchronization failures, and communication setup problems.</p> Common Causes <ul> <li>ChemStation communication macro not running</li> <li>Communication files directory not accessible</li> <li>File permission issues</li> <li>Protocol synchronization errors</li> <li>ChemStation not responding to commands</li> </ul> <p>Examples:</p> <p>Communication setup failure:</p> <pre><code>&gt;&gt;&gt; try:\n...     api = ChemstationAPI()\n... except CommunicationError as e:\n...     print(\"Failed to establish ChemStation communication\")\n...     print(\"Ensure ChemStation is running and macro is loaded\")\n</code></pre> <p>Protocol synchronization error:</p> <pre><code>&gt;&gt;&gt; try:\n...     response = api.send(\"complex_command\", timeout=1.0)\n... except CommunicationError:\n...     print(\"Communication protocol error - try restarting connection\")\n</code></pre>"},{"location":"api-reference/chemstation-exceptions/#ChemstationAPI.exceptions.CommandError","title":"CommandError","text":"<p>               Bases: <code>ChemstationError</code></p> <p>Raised when ChemStation Command Processor reports command failure.</p> <p>This exception occurs when ChemStation successfully receives a command but cannot execute it due to syntax errors, invalid parameters, or instrument state conflicts.</p> Common Causes <ul> <li>Invalid ChemStation command syntax</li> <li>Wrong parameter values or types</li> <li>Command not available in current ChemStation mode</li> <li>Instrument state conflicts (e.g., method running)</li> <li>Module-specific command failures</li> </ul> <p>Examples:</p> <p>Invalid command syntax:</p> <pre><code>&gt;&gt;&gt; try:\n...     api.send(\"InvalidCommand parameter\")\n... except CommandError as e:\n...     print(f\"ChemStation rejected command: {e}\")\n</code></pre> <p>Instrument state conflict:</p> <pre><code>&gt;&gt;&gt; try:\n...     api.send('WriteModule \"CE1\", \"INVALID_COMMAND\"')\n... except CommandError:\n...     print(\"CE module rejected command - check instrument state\")\n</code></pre>"},{"location":"api-reference/chemstation-exceptions/#ChemstationAPI.exceptions.FileOperationError","title":"FileOperationError","text":"<p>               Bases: <code>ChemstationError</code></p> <p>Raised when file system operations fail during communication.</p> <p>This exception covers failures in reading from or writing to the command and response files used for ChemStation communication, as well as other file operations like method and sequence file access.</p> Common Causes <ul> <li>Insufficient file system permissions</li> <li>Disk space exhaustion</li> <li>File locked by another process</li> <li>Network drive connectivity issues</li> <li>File corruption or access conflicts</li> </ul> <p>Examples:</p> <p>File write failure:</p> <pre><code>&gt;&gt;&gt; try:\n...     api.method.save(\"NewMethod\")\n... except FileOperationError as e:\n...     print(f\"Cannot save method file: {e}\")\n...     print(\"Check disk space and file permissions\")\n</code></pre> <p>Communication file access:</p> <pre><code>&gt;&gt;&gt; try:\n...     api.send(\"response$ = _METHPATH$\")\n... except FileOperationError:\n...     print(\"Communication file access failed\")\n...     print(\"Check communication directory permissions\")\n</code></pre>"},{"location":"api-reference/chemstation-exceptions/#ChemstationAPI.exceptions.SequenceError","title":"SequenceError","text":"<p>               Bases: <code>ChemstationError</code></p> <p>Raised when sequence management or execution operations fail.</p> <p>This exception covers failures in sequence file operations, sequence table editing, Excel import operations, and sequence execution control.</p> Common Causes <ul> <li>Sequence file not found or corrupted</li> <li>Invalid sequence table parameters</li> <li>Excel file format or access issues</li> <li>Sequence execution state conflicts</li> <li>Row index out of range</li> <li>Missing method files referenced in sequence</li> </ul> <p>Examples:</p> <p>Sequence loading failure:</p> <pre><code>&gt;&gt;&gt; try:\n...     api.sequence.load_sequence(\"MissingSequence\")\n... except SequenceError as e:\n...     print(f\"Cannot load sequence: {e}\")\n</code></pre> <p>Excel import failure:</p> <pre><code>&gt;&gt;&gt; try:\n...     api.sequence.prepare_sequence_table(\"invalid.xlsx\")\n... except SequenceError as e:\n...     print(f\"Excel import failed: {e}\")\n...     print(\"Check Excel file format and accessibility\")\n</code></pre> <p>Sequence execution control:</p> <pre><code>&gt;&gt;&gt; try:\n...     api.sequence.start()\n... except SequenceError:\n...     print(\"Cannot start sequence - check instrument status\")\n</code></pre>"},{"location":"api-reference/chemstation-exceptions/#ChemstationAPI.exceptions.MethodError","title":"MethodError","text":"<p>               Bases: <code>ChemstationError</code></p> <p>Raised when CE method operations fail.</p> <p>This exception covers failures in method file operations, method execution, parameter modification, and method validation.</p> Common Causes <ul> <li>Method file not found or corrupted</li> <li>Method execution startup failure</li> <li>Invalid method parameters</li> <li>Instrument not ready for method execution</li> <li>Method file access or permission issues</li> <li>Parameter validation failures</li> </ul> <p>Examples:</p> <p>Method loading failure:</p> <pre><code>&gt;&gt;&gt; try:\n...     api.method.load(\"NonexistentMethod\")\n... except MethodError as e:\n...     print(f\"Method loading failed: {e}\")\n</code></pre> <p>Method execution failure:</p> <pre><code>&gt;&gt;&gt; try:\n...     api.method.run(\"Sample001\")\n... except MethodError as e:\n...     print(f\"Method execution failed: {e}\")\n...     print(\"Check instrument status and method parameters\")\n</code></pre> <p>Parameterized execution failure:</p> <pre><code>&gt;&gt;&gt; try:\n...     api.method.execution_method_with_parameters(99, \"Method\", \"Sample\")\n... except MethodError:\n...     print(\"Method execution with parameters failed\")\n...     print(\"Check vial presence and method validity\")\n</code></pre>"},{"location":"api-reference/chemstation-exceptions/#ChemstationAPI.exceptions.VialError","title":"VialError","text":"<p>               Bases: <code>ChemstationError</code></p> <p>Raised when vial handling or validation operations fail.</p> <p>This exception covers failures in vial presence checking, carousel operations, lift position management, and vial state validation.</p> Common Causes <ul> <li>Vial not present in specified carousel position</li> <li>Vial loading/unloading mechanical failure</li> <li>Carousel position out of range</li> <li>Lift position occupied when expected empty</li> <li>Vial sensor malfunction or calibration issues</li> <li>Multiple vials missing for batch operations</li> </ul> <p>Examples:</p> <p>Vial presence failure:</p> <pre><code>&gt;&gt;&gt; try:\n...     api.ce.load_vial_to_position(15, \"inlet\")\n... except VialError as e:\n...     print(f\"Vial operation failed: {e}\")\n...     print(\"Check vial is properly seated in carousel\")\n</code></pre> <p>Batch vial validation failure:</p> <pre><code>&gt;&gt;&gt; try:\n...     api.validation.list_vial_validation([1, 2, 3, 4, 5])\n... except VialError as e:\n...     print(f\"Missing vials detected: {e}\")\n...     print(\"Load missing vials before starting sequence\")\n</code></pre> <p>Position validation failure:</p> <pre><code>&gt;&gt;&gt; try:\n...     api.validation.vial_in_position(\"inlet\")\n... except VialError:\n...     print(\"No vial at inlet position\")\n...     print(\"Load sample vial before injection\")\n</code></pre>"},{"location":"api-reference/chemstation-exceptions/#ChemstationAPI.exceptions.ConfigurationError","title":"ConfigurationError","text":"<p>               Bases: <code>ChemstationError</code></p> <p>Raised when system configuration or setup fails.</p> <p>This exception covers failures in API configuration, communication setup, directory creation, and system initialization.</p> Common Causes <ul> <li>Invalid configuration parameters</li> <li>Communication directory creation failure</li> <li>Path configuration errors</li> <li>System permission issues</li> <li>Missing required files or directories</li> <li>Configuration file corruption</li> </ul> <p>Examples:</p> <p>API initialization failure:</p> <pre><code>&gt;&gt;&gt; try:\n...     api = ChemstationAPI(invalid_config)\n... except ConfigurationError as e:\n...     print(f\"Configuration error: {e}\")\n...     print(\"Check configuration parameters and paths\")\n</code></pre> <p>Directory access failure:</p> <pre><code>&gt;&gt;&gt; try:\n...     config = CommunicationConfig(comm_dir=\"/invalid/path\")\n...     api = ChemstationAPI(config)\n... except ConfigurationError:\n...     print(\"Cannot access communication directory\")\n...     print(\"Check path and permissions\")\n</code></pre>"},{"location":"api-reference/chemstation-exceptions/#ChemstationAPI.exceptions.ValidationError","title":"ValidationError","text":"<p>               Bases: <code>ChemstationError</code></p> <p>Raised when input validation or prerequisite checking fails.</p> <p>This exception covers failures in parameter validation, file existence checking, system state validation, and prerequisite verification.</p> Common Causes <ul> <li>Method or sequence file not found</li> <li>Invalid parameter values or ranges</li> <li>System state not ready for operation</li> <li>Missing prerequisites for operations</li> <li>File name or path validation failures</li> <li>Case-sensitive filename issues</li> </ul> <p>Examples:</p> <p>File existence validation:</p> <pre><code>&gt;&gt;&gt; try:\n...     api.validation.validate_method_name(\"NonexistentMethod\")\n... except ValidationError as e:\n...     print(f\"Method validation failed: {e}\")\n...     print(\"Check method name and directory\")\n</code></pre> <p>System state validation:</p> <pre><code>&gt;&gt;&gt; try:\n...     api.validation.validate_use_carousel()\n... except ValidationError as e:\n...     print(f\"Carousel not available: {e}\")\n...     print(\"Wait for instrument to reach ready state\")\n</code></pre> <p>Parameter validation:</p> <pre><code>&gt;&gt;&gt; try:\n...     api.ce.load_vial_to_position(15, \"invalid_position\")\n... except ValidationError:\n...     print(\"Invalid position specified\")\n...     print(\"Use 'inlet', 'outlet', or 'replenishment'\")\n</code></pre>"},{"location":"api-reference/chemstation-exceptions/#ChemstationAPI.exceptions.TimeoutError","title":"TimeoutError","text":"<p>               Bases: <code>ChemstationError</code></p> <p>Raised when operations exceed specified timeout periods.</p> <p>This exception covers timeouts in communication, method execution monitoring, system status polling, and other time-sensitive operations.</p> Common Causes <ul> <li>ChemStation not responding to commands</li> <li>Long-running operations exceeding timeout</li> <li>Communication protocol delays</li> <li>System busy with other operations</li> <li>Network or file system delays</li> <li>Instrument hardware response delays</li> </ul> <p>Examples:</p> <p>Communication timeout:</p> <pre><code>&gt;&gt;&gt; try:\n...     response = api.send(\"complex_command\", timeout=1.0)\n... except TimeoutError as e:\n...     print(f\"Command timeout: {e}\")\n...     print(\"Increase timeout or check ChemStation status\")\n</code></pre> <p>System ready timeout:</p> <pre><code>&gt;&gt;&gt; try:\n...     ready = api.system.wait_for_ready(timeout=30)\n... except TimeoutError:\n...     print(\"System did not reach ready state\")\n...     print(\"Check for instrument errors or long conditioning\")\n</code></pre> <p>Method execution timeout:</p> <pre><code>&gt;&gt;&gt; try:\n...     api.method.run(\"LongAnalysis\")\n...     # Wait with timeout monitoring\n... except TimeoutError:\n...     print(\"Method execution monitoring timeout\")\n...     print(\"Check method status manually\")\n</code></pre>"},{"location":"api-reference/chemstation-methods/","title":"Methods Module","text":"<p>CE method management and execution.</p>"},{"location":"api-reference/chemstation-methods/#ChemstationAPI.controllers.methods_module.MethodsModule","title":"ChemstationAPI.controllers.methods_module.MethodsModule","text":"<pre><code>MethodsModule(communicator: ChemstationCommunicator)\n</code></pre> <p>CE method management for analytical method control and execution.</p> <p>Provides comprehensive method management for ChemStation CE methods including file operations, parameter editing, and execution with custom parameters. Methods are stored as .M files containing instrument parameters, acquisition  settings, and data analysis rules.</p> Method Execution Modes <ol> <li>Direct execution: Run current method with existing parameters</li> <li>Custom execution: Run method with specified data filename  </li> <li>Parameterized execution: Run method with custom vial/sample information</li> </ol> File Management <ul> <li>Methods stored as .M files in ChemStation method directory</li> <li>Runtime parameter access through RC.NET registers</li> <li>Template execution with parameter modification</li> </ul> <p>Attributes:</p> Name Type Description <code>comm</code> <p>ChemStation communicator for command execution</p> <code>validation</code> <p>Method existence and parameter validation</p> <code>system</code> <p>System state monitoring and control</p> <p>Initialize Methods module with ChemStation communicator.</p> <p>Parameters:</p> Name Type Description Default <code>communicator</code> <code>ChemstationCommunicator</code> <p>ChemStation communication interface for method operations          and system commands</p> required"},{"location":"api-reference/chemstation-methods/#ChemstationAPI.controllers.methods_module.MethodsModule-functions","title":"Functions","text":""},{"location":"api-reference/chemstation-methods/#ChemstationAPI.controllers.methods_module.MethodsModule.load","title":"load","text":"<pre><code>load(method_name: str, method_path: str = '_METHODPATHS$') -&gt; None\n</code></pre> <p>Load CE method from file into ChemStation active memory.</p> <p>Loads the specified method file and makes it the current active method. All instrument parameters are updated including voltage, temperature,  vial assignments, and detection settings. Previous unsaved changes are lost.</p> <p>Parameters:</p> Name Type Description Default <code>method_name</code> <code>str</code> <p>Method filename without .M extension         Examples: \"CE_Protein_Analysis\", \"MEKC_SmallMolecules\"</p> required <code>method_path</code> <code>str</code> <p>Directory containing methods. Defaults to ChemStation         method directory (_METHPATH$)</p> <code>'_METHODPATHS$'</code> <p>Raises:</p> Type Description <code>MethodError</code> <p>If method file cannot be loaded or is corrupted</p> <code>ValidationError</code> <p>If method file doesn't exist in specified directory</p> <code>FileNotFoundError</code> <p>If method path is invalid</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Load standard analysis method\n&gt;&gt;&gt; methods.load(\"CE_Protein_Analysis\")\n&gt;&gt;&gt; # Load method from custom directory  \n&gt;&gt;&gt; methods.load(\"TestMethod\", \"C:\\Custom\\Methods\\\")\n</code></pre> Note <p>Method loading overwrites current instrument settings and includes automatic validation of method file existence before loading.</p>"},{"location":"api-reference/chemstation-methods/#ChemstationAPI.controllers.methods_module.MethodsModule.save","title":"save","text":"<pre><code>save(method_name: str = '_METHFILE$', method_path: str = '_METHODPATHS$', comment: str = '\" \"') -&gt; None\n</code></pre> <p>Save current method with specified name and optional comment.</p> <p>Saves the currently loaded method with all current parameter settings to a .M file. If no name specified, overwrites the current method file. Comment is stored in method file metadata for documentation purposes.</p> <p>Parameters:</p> Name Type Description Default <code>method_name</code> <code>str</code> <p>Filename for saved method (without .M extension)         Defaults to current method name (_METHFILE$)         Examples: \"Modified_CE_Method\", \"Optimized_Analysis_v3\"</p> <code>'_METHFILE$'</code> <code>method_path</code> <code>str</code> <p>Directory for saving method. Defaults to ChemStation         method directory (_METHPATH$)</p> <code>'_METHODPATHS$'</code> <code>comment</code> <code>str</code> <p>Optional comment describing method changes or purpose.     Use quotes for multi-word comments</p> <code>'\" \"'</code> <p>Raises:</p> Type Description <code>MethodError</code> <p>If method cannot be saved due to file permissions</p> <code>ValidationError</code> <p>If method name contains invalid characters</p> <code>PermissionError</code> <p>If insufficient write permissions to directory</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Save current method with new name\n&gt;&gt;&gt; methods.save(\"Optimized_CE_Method\", comment=\"Improved resolution\")\n&gt;&gt;&gt; # Overwrite current method\n&gt;&gt;&gt; methods.save()\n</code></pre> Note <p>Existing files with same name are overwritten without warning. Method name should follow Windows filename conventions.</p>"},{"location":"api-reference/chemstation-methods/#ChemstationAPI.controllers.methods_module.MethodsModule.run","title":"run","text":"<pre><code>run(data_name: str, data_dir: str = '_DATAPATH$') -&gt; None\n</code></pre> <p>Execute current method and save data with specified name.</p> <p>Runs the currently loaded method using existing method parameters including vial assignments, sample information, and all analytical conditions from the previous analysis setup. Only the output data filename is changed.</p> <p>Parameters:</p> Name Type Description Default <code>data_name</code> <code>str</code> <p>Name for the data file (without extension)       Examples: \"Sample001\", \"QC_Standard_20240315\", \"Blank_Run\"</p> required <code>data_dir</code> <code>str</code> <p>Directory for data storage. Defaults to ChemStation      data directory (_DATAPATH$)</p> <code>'_DATAPATH$'</code> <p>Raises:</p> Type Description <code>MethodError</code> <p>If method execution fails or cannot start</p> <code>ValidationError</code> <p>If data directory is invalid or required vials missing</p> <code>SystemError</code> <p>If instrument is not ready for analysis</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Run analysis with descriptive name\n&gt;&gt;&gt; methods.run(\"Protein_Sample_001\")\n&gt;&gt;&gt; # Run QC standard with custom directory\n&gt;&gt;&gt; methods.run(\"QC_Standard_Daily\", \"C:\\QC_Data\\\")\n</code></pre> Requirements <ul> <li>Method must be loaded before execution</li> <li>Required vials must be present and positioned</li> <li>Instrument must be in ready state</li> </ul> Note <p>All other parameters (vials, method settings, sample info) remain the same as previous analysis. Progress can be monitored via system.method_on().</p>"},{"location":"api-reference/chemstation-methods/#ChemstationAPI.controllers.methods_module.MethodsModule.execution_method_with_parameters","title":"execution_method_with_parameters","text":"<pre><code>execution_method_with_parameters(vial: int, method_name: str, sample_name: str = '', comment: str = '', subdirectory_name: str = '') -&gt; None\n</code></pre> <p>Execute CE method with custom vial and sample parameters.</p> <p>Executes a method with specified sample parameters by creating a temporary method register, modifying sample information, and running the analysis. Allows running the same method on different samples without manually editing method files.</p> <p>Process workflow: 1. Creates temporary register (TemporaryRegisterMethod) 2. Loads specified method and copies parameters 3. Modifies vial number and sample information 4. Executes analysis with custom parameters 5. Data saved with automatic filename generation</p> <p>Parameters:</p> Name Type Description Default <code>vial</code> <code>int</code> <p>Carousel position for sample (1-48). Must contain sample vial</p> required <code>method_name</code> <code>str</code> <p>Method to execute (without .M extension)         Examples: \"CE_Protein\", \"MEKC_Drugs\", \"CZE_Inorganics\"</p> required <code>sample_name</code> <code>str</code> <p>Descriptive sample name for data file and records         Examples: \"BSA_1mg_ml\", \"Drug_Standard_Mix\", \"Unknown_001\"</p> <code>''</code> <code>comment</code> <code>str</code> <p>Path to text file containing method comment/description.     File content will be embedded in the method documentation</p> <code>''</code> <code>subdirectory_name</code> <code>str</code> <p>Optional subdirectory for data organization.              If empty, uses current data subdirectory</p> <code>''</code> <p>Raises:</p> Type Description <code>MethodError</code> <p>If method execution fails or method not found</p> <code>VialError</code> <p>If specified vial is not present in carousel</p> <code>ValidationError</code> <p>If method name is invalid or doesn't exist</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Analyze protein sample with comment file\n&gt;&gt;&gt; methods.execution_method_with_parameters(\n...     vial=15,\n...     method_name=\"CE_Protein_Analysis\", \n...     sample_name=\"BSA_Standard_1mg_ml\",\n...     comment=\"C:\\Comments\\protein_method.txt\"\n... )\n&gt;&gt;&gt; \n&gt;&gt;&gt; # Run development sample in organized subdirectory\n&gt;&gt;&gt; methods.execution_method_with_parameters(\n...     vial=22,\n...     method_name=\"Development_CZE\",\n...     sample_name=\"Test_Sample_v3\",\n...     subdirectory_name=\"Method_Development\"\n... )\n</code></pre> Requirements <ul> <li>Method file must exist in method directory</li> <li>Vial must be physically present in carousel</li> <li>Instrument must be ready for analysis</li> </ul> Note <p>Data filename generated automatically with timestamp. Sample information stored in data file metadata. Temporary register cleaned up after execution. Comment file validation needs to be implemented.</p>"},{"location":"api-reference/chemstation-sequence/","title":"Sequence Module","text":"<p>Batch analysis and sequence management.</p>"},{"location":"api-reference/chemstation-sequence/#ChemstationAPI.controllers.sequence_module.SequenceModule","title":"ChemstationAPI.controllers.sequence_module.SequenceModule","text":"<pre><code>SequenceModule(communicator: ChemstationCommunicator)\n</code></pre> <p>Sequence management for automated batch analysis execution.</p> <p>Provides comprehensive sequence management including Excel-based sequence creation, row-by-row editing, file operations, and execution control. Sequences enable automated analysis of multiple samples with different methods and parameters.</p> Sequence Table Structure <ul> <li>VialNumber: Carousel position for sample (1-48)</li> <li>Method: CE method name for analysis (.M file)</li> <li>SampleName: Descriptive name for sample identification</li> <li>SampleInfo: Additional sample metadata and notes</li> <li>DataFileName: Custom data file naming (optional)</li> <li>InjVial: Alternative injection vial (for special applications)</li> </ul> Excel Integration <ul> <li>Import sequence parameters from Excel spreadsheets</li> <li>Flexible column mapping for different Excel formats</li> <li>Automatic method validation during import</li> <li>Support for custom data organization schemes</li> </ul> Execution Control <ul> <li>Start/pause/resume sequence execution</li> <li>Progress monitoring and time estimation</li> <li>Error handling with automatic continuation</li> <li>Manual intervention capability during runs</li> </ul> <p>Attributes:</p> Name Type Description <code>comm</code> <p>ChemStation communicator for sequence operations.</p> <code>method</code> <p>Methods module for method validation and operations.</p> <p>Initialize Sequence module with communicator and methods access.</p> <p>Parameters:</p> Name Type Description Default <code>communicator</code> <code>ChemstationCommunicator</code> <p>ChemStation communication interface for sequence operations.</p> required"},{"location":"api-reference/chemstation-sequence/#ChemstationAPI.controllers.sequence_module.SequenceModule-functions","title":"Functions","text":""},{"location":"api-reference/chemstation-sequence/#ChemstationAPI.controllers.sequence_module.SequenceModule.modify_sequence_row","title":"modify_sequence_row","text":"<pre><code>modify_sequence_row(row: int, vial_sample: str = '', method: str = '', sample_name: str = '', sample_info: str = '', data_file_name: str = '') -&gt; None\n</code></pre> <p>Modify parameters in specific sequence table row.</p> <p>Updates individual row in the sequence table with new parameters. Only specified parameters are modified; empty parameters remain unchanged. This allows selective editing of sequence entries without affecting other rows.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>Row number in sequence table (1-based indexing). Corresponds to analysis order in the sequence.</p> required <code>vial_sample</code> <code>str</code> <p>Carousel position for sample vial (1-48).         Empty string leaves current value unchanged.</p> <code>''</code> <code>method</code> <code>str</code> <p>CE method name (without .M extension) for this analysis.    Examples: \"CE_Protein\", \"MEKC_Drugs\", \"CZE_Inorganics\"</p> <code>''</code> <code>sample_name</code> <code>str</code> <p>Descriptive sample name for identification and data files.         Examples: \"BSA_Standard\", \"Unknown_001\", \"QC_Sample\"</p> <code>''</code> <code>sample_info</code> <code>str</code> <p>Additional sample metadata, experimental conditions, or notes.         Examples: \"pH 7.4 buffer\", \"Dilution 1:10\", \"Replicate 3\"</p> <code>''</code> <code>data_file_name</code> <code>str</code> <p>Custom data filename (optional, auto-generated if empty).</p> <code>''</code> <p>Raises:</p> Type Description <code>SequenceError</code> <p>If sequence modification fails or row doesn't exist.</p> <code>ValidationError</code> <p>If method name is invalid or doesn't exist.</p> <code>ValueError</code> <p>If row number is out of valid range.</p> <p>Examples:</p> <p>Modify sample vial and method:</p> <pre><code>&gt;&gt;&gt; seq.modify_sequence_row(\n...     row=1,\n...     vial_sample=\"15\",\n...     method=\"CE_Protein_Analysis\"\n... )\n</code></pre> <p>Update sample information only:</p> <pre><code>&gt;&gt;&gt; seq.modify_sequence_row(\n...     row=3,\n...     sample_name=\"Unknown_Sample_001\",\n...     sample_info=\"Customer sample, urgent analysis\"\n... )\n</code></pre> <p>Change method for specific analysis:</p> <pre><code>&gt;&gt;&gt; seq.modify_sequence_row(\n...     row=5,\n...     method=\"MEKC_SmallMolecules\"\n... )\n</code></pre> Note <ul> <li>Sequence must be loaded before modification</li> <li>Changes are made to memory, use save_sequence() to persist</li> <li>Method validation performed if method parameter provided</li> <li>Row numbering starts from 1 (not 0)</li> </ul>"},{"location":"api-reference/chemstation-sequence/#ChemstationAPI.controllers.sequence_module.SequenceModule.prepare_sequence_table","title":"prepare_sequence_table","text":"<pre><code>prepare_sequence_table(excel_file_path: str, sequence_name: str = None, sheet_name: int = 0, vial_column: str = None, method_column: str = None, filename_column: str = None, sample_name_column: str = None, sample_info_column: str = None, replicate_column: str = None) -&gt; None\n</code></pre> <p>Import and create sequence table from Excel spreadsheet.</p> <p>Loads sequence parameters from Excel file and creates/updates ChemStation sequence table. Provides flexible column mapping to accommodate different Excel formats and naming conventions. Excel application is briefly opened during processing to ensure proper data handling.</p> Column Mapping <p>Each parameter maps Excel columns to sequence table fields: - vial_column \u2192 VialNumber: Carousel positions - method_column \u2192 Method: CE method names - sample_name_column \u2192 SampleName: Sample identifiers - sample_info_column \u2192 SampleInfo: Additional metadata - filename_column \u2192 DataFileName: Custom data file names - replicate_column \u2192 InjVial: Replicate/injection parameters</p> <p>Parameters:</p> Name Type Description Default <code>excel_file_path</code> <code>str</code> <p>Full path to Excel file containing sequence data.             File should contain headers in first row.</p> required <code>sequence_name</code> <code>str</code> <p>Existing sequence to load before modification.           If None, modifies currently loaded sequence.</p> <code>None</code> <code>sheet_name</code> <code>int</code> <p>Excel worksheet index to read (0-based, default: first sheet).</p> <code>0</code> <code>vial_column</code> <code>str</code> <p>Excel column name containing vial positions.         Examples: \"Vial\", \"Position\", \"Vial_Number\"</p> <code>None</code> <code>method_column</code> <code>str</code> <p>Excel column name containing method names.           Examples: \"Method\", \"CE_Method\", \"Analysis_Method\"</p> <code>None</code> <code>sample_name_column</code> <code>str</code> <p>Excel column name containing sample names.                Examples: \"Sample\", \"Sample_Name\", \"ID\"</p> <code>None</code> <code>sample_info_column</code> <code>str</code> <p>Excel column name containing sample metadata.                Examples: \"Info\", \"Description\", \"Notes\"</p> <code>None</code> <code>filename_column</code> <code>str</code> <p>Excel column name containing custom filenames.             Examples: \"Filename\", \"Data_File\", \"Output_Name\"</p> <code>None</code> <code>replicate_column</code> <code>str</code> <p>Excel column name containing replicate information.              Examples: \"Replicate\", \"Injection\", \"Rep_Number\"</p> <code>None</code> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If Excel file doesn't exist at specified path.</p> <code>ValidationError</code> <p>If referenced methods don't exist in method directory.</p> <code>SequenceError</code> <p>If sequence loading or Excel processing fails.</p> <code>PermissionError</code> <p>If unable to access Excel file or create temp files.</p> <p>Examples:</p> <p>Basic sequence import:</p> <pre><code>&gt;&gt;&gt; seq.prepare_sequence_table(\n...     excel_file_path=\"C:\\Data\\sample_list.xlsx\",\n...     vial_column=\"Vial_Position\",\n...     method_column=\"Analysis_Method\",\n...     sample_name_column=\"Sample_ID\"\n... )\n</code></pre> <p>Import with existing sequence:</p> <pre><code>&gt;&gt;&gt; seq.prepare_sequence_table(\n...     excel_file_path=\"sequence_data.xlsx\",\n...     sequence_name=\"Protein_Analysis_Batch\",\n...     sheet_name=1,  # Second worksheet\n...     vial_column=\"Pos\",\n...     method_column=\"Method\",\n...     sample_name_column=\"Sample\",\n...     sample_info_column=\"Notes\"\n... )\n</code></pre> <p>Complex mapping with all parameters:</p> <pre><code>&gt;&gt;&gt; seq.prepare_sequence_table(\n...     excel_file_path=\"complex_sequence.xlsx\",\n...     vial_column=\"Carousel_Position\",\n...     method_column=\"CE_Method_Name\", \n...     sample_name_column=\"Sample_Identifier\",\n...     sample_info_column=\"Experimental_Conditions\",\n...     filename_column=\"Custom_Filename\",\n...     replicate_column=\"Injection_Number\"\n... )\n</code></pre> Note <ul> <li>Excel file must be accessible (not open in another application)</li> <li>Method names are validated against method directory</li> <li>Temporary Excel file created during processing</li> <li>Sequence is automatically saved after import</li> <li>Excel application briefly visible during processing</li> </ul>"},{"location":"api-reference/chemstation-sequence/#ChemstationAPI.controllers.sequence_module.SequenceModule.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start execution of the current sequence.</p> <p>Begins automated execution of the loaded sequence, processing samples in order according to the sequence table. The sequence will run continuously until completion, pause, or error.</p> <p>Raises:</p> Type Description <code>SequenceError</code> <p>If sequence cannot start or no sequence is loaded.</p> <code>SystemError</code> <p>If instrument is not ready for sequence execution.</p> Example <p>seq.start()</p> Note <ul> <li>Sequence must be loaded and validated before starting</li> <li>Instrument enters sequence mode with limited manual control</li> <li>Progress can be monitored via system status methods</li> <li>Use pause() to temporarily halt sequence execution</li> </ul>"},{"location":"api-reference/chemstation-sequence/#ChemstationAPI.controllers.sequence_module.SequenceModule.pause","title":"pause","text":"<pre><code>pause() -&gt; None\n</code></pre> <p>Pause the currently running sequence.</p> <p>Pauses sequence execution after the current method completes. The sequence will not abort the current analysis but will stop before starting the next sample in the sequence.</p> <p>Raises:</p> Type Description <code>SequenceError</code> <p>If no sequence is running or pause fails.</p> Example <p>seq.pause()</p> Note <ul> <li>Current analysis completes before pausing</li> <li>Sequence can be resumed with resume() method</li> <li>Manual operations possible while paused</li> <li>Pause takes effect between sequence entries</li> </ul>"},{"location":"api-reference/chemstation-sequence/#ChemstationAPI.controllers.sequence_module.SequenceModule.resume","title":"resume","text":"<pre><code>resume() -&gt; None\n</code></pre> <p>Resume a paused sequence from where it stopped.</p> <p>Continues sequence execution from the next pending sample in the sequence table. All remaining samples will be processed according to their specified parameters.</p> <p>Raises:</p> Type Description <code>SequenceError</code> <p>If no sequence is paused or resume fails.</p> Example <p>seq.resume()</p> Note <ul> <li>Resumes from next unprocessed sample</li> <li>All sequence parameters remain unchanged</li> <li>Instrument returns to automated sequence mode</li> <li>Manual changes made during pause are preserved</li> </ul>"},{"location":"api-reference/chemstation-sequence/#ChemstationAPI.controllers.sequence_module.SequenceModule.load_sequence","title":"load_sequence","text":"<pre><code>load_sequence(seq_name: str, seq_dir: str = '_SEQPATH$') -&gt; None\n</code></pre> <p>Load an existing sequence from file.</p> <p>Loads a saved sequence file (.S) into ChemStation memory, making it the current active sequence for editing or execution.</p> <p>Parameters:</p> Name Type Description Default <code>seq_name</code> <code>str</code> <p>Sequence filename (without .S extension).      Examples: \"Protein_Batch_Analysis\", \"Daily_QC_Sequence\"</p> required <code>seq_dir</code> <code>str</code> <p>Directory containing sequence files.     Defaults to ChemStation sequence directory (_SEQPATH$).</p> <code>'_SEQPATH$'</code> <p>Raises:</p> Type Description <code>SequenceError</code> <p>If sequence file cannot be loaded.</p> <code>ValidationError</code> <p>If sequence file doesn't exist.</p> <code>FileNotFoundError</code> <p>If sequence directory is invalid.</p> <p>Examples:</p> <p>Load standard sequence:</p> <pre><code>&gt;&gt;&gt; seq.load_sequence(\"Protein_Analysis_Batch\")\n</code></pre> <p>Load from custom directory:</p> <pre><code>&gt;&gt;&gt; seq.load_sequence(\"TestSeq\", \"C:\\Custom\\Sequences\\\")\n</code></pre> Note <ul> <li>Sequence loading overwrites current sequence in memory</li> <li>All unsaved changes to current sequence are lost</li> <li>Sequence parameters become active immediately</li> </ul>"},{"location":"api-reference/chemstation-sequence/#ChemstationAPI.controllers.sequence_module.SequenceModule.save_sequence","title":"save_sequence","text":"<pre><code>save_sequence(seq_name: str = '_SEQFILE$', seq_dir: str = '_SEQPATH$') -&gt; None\n</code></pre> <p>Save current sequence to file.</p> <p>Saves the sequence table and parameters to a .S file for later use. If no name specified, overwrites the current sequence file.</p> <p>Parameters:</p> Name Type Description Default <code>seq_name</code> <code>str</code> <p>Filename for saved sequence (without .S extension).      Defaults to current sequence name (_SEQFILE$).</p> <code>'_SEQFILE$'</code> <code>seq_dir</code> <code>str</code> <p>Directory for saving sequence.     Defaults to ChemStation sequence directory (_SEQPATH$).</p> <code>'_SEQPATH$'</code> <p>Raises:</p> Type Description <code>SequenceError</code> <p>If sequence cannot be saved.</p> <code>PermissionError</code> <p>If insufficient write permissions.</p> <p>Examples:</p> <p>Save with new name:</p> <pre><code>&gt;&gt;&gt; seq.save_sequence(\"Modified_Protein_Sequence\")\n</code></pre> <p>Overwrite current sequence:</p> <pre><code>&gt;&gt;&gt; seq.save_sequence()  # Updates current sequence file\n</code></pre> Note <ul> <li>Saved sequence includes all table data and parameters</li> <li>Existing files with same name are overwritten</li> <li>.S extension added automatically</li> </ul>"},{"location":"api-reference/chemstation-system/","title":"System Module","text":"<p>System monitoring and status management.</p>"},{"location":"api-reference/chemstation-system/#ChemstationAPI.controllers.system_module.SystemModule","title":"ChemstationAPI.controllers.system_module.SystemModule","text":"<pre><code>SystemModule(communicator: ChemstationCommunicator)\n</code></pre> <p>System monitoring and diagnostic control for ChemStation CE operations.</p> <p>Provides comprehensive system status monitoring, method execution tracking, and diagnostic capabilities for the CE instrument. Essential for automated workflows, user interfaces, and system diagnostics.</p> <p>Key monitoring capabilities include real-time acquisition status tracking, method execution state monitoring, analysis timing information, and instrument readiness validation.</p> Diagnostic Tools <ul> <li>Register browser for system debugging and parameter inspection</li> <li>Error condition monitoring and emergency abort capabilities</li> <li>System readiness validation with timeout handling</li> <li>Performance timing analysis for optimization</li> </ul> RC Status Integration <p>Direct access to RC.NET status registers provides detailed instrument status including run states, error conditions, and operational modes for comprehensive system monitoring.</p> <p>Attributes:</p> Name Type Description <code>comm</code> <p>ChemStation communicator for system command execution and status queries</p> <p>Initialize system monitoring module with ChemStation communicator.</p> <p>Parameters:</p> Name Type Description Default <code>communicator</code> <code>ChemstationCommunicator</code> <p>ChemStation communication interface for status queries          and system command execution</p> required"},{"location":"api-reference/chemstation-system/#ChemstationAPI.controllers.system_module.SystemModule-functions","title":"Functions","text":""},{"location":"api-reference/chemstation-system/#ChemstationAPI.controllers.system_module.SystemModule.method_on","title":"method_on","text":"<pre><code>method_on() -&gt; bool\n</code></pre> <p>Check if an analytical method is currently executing.</p> <p>Monitors ChemStation's _MethodOn system variable to determine if any analysis is actively running. Covers all method phases including preconditioning, injection, separation, detection, and postconditioning.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if a method is currently executing (any phase), False if idle</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Wait for method completion\n&gt;&gt;&gt; while system.method_on():\n...     print(\"Analysis in progress...\")\n...     time.sleep(30)\n&gt;&gt;&gt; \n&gt;&gt;&gt; # Check before starting new analysis\n&gt;&gt;&gt; if not system.method_on():\n...     api.method.run(\"NewSample\")\n</code></pre> Note <p>Essential for automation workflows to prevent overlapping analyses. Use with status() for detailed phase information.</p>"},{"location":"api-reference/chemstation-system/#ChemstationAPI.controllers.system_module.SystemModule.status","title":"status","text":"<pre><code>status() -&gt; str\n</code></pre> <p>Get current ChemStation acquisition status.</p> <p>Returns detailed acquisition status from ChemStation's ACQSTATUS$ system variable, providing specific information about the current operational state and analysis phase.</p> <p>Returns:</p> Type Description <code>str</code> <p>Current acquisition status:</p> <code>str</code> <ul> <li>\"STANDBY\": System idle, ready for new analysis</li> </ul> <code>str</code> <ul> <li>\"PRERUN\": Pre-analysis conditioning and preparation  </li> </ul> <code>str</code> <ul> <li>\"RUN\": Active separation and detection phase</li> </ul> <code>str</code> <ul> <li>\"POSTRUN\": Post-analysis conditioning and cleanup</li> </ul> <code>str</code> <ul> <li>\"ERROR\": Error condition requiring attention</li> </ul> <code>str</code> <ul> <li>\"ABORT\": Analysis aborted or interrupted</li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Monitor analysis phases\n&gt;&gt;&gt; status = system.status()\n&gt;&gt;&gt; if status == \"RUN\":\n...     print(\"Separation in progress\")\n&gt;&gt;&gt; elif status == \"STANDBY\":\n...     print(\"Ready for new sample\")\n&gt;&gt;&gt; \n&gt;&gt;&gt; # Wait for specific phase\n&gt;&gt;&gt; while system.status() != \"RUN\":\n...     time.sleep(5)\n</code></pre> Note <p>Status updates in real-time. STANDBY indicates readiness for new analysis. Includes automatic retry logic for communication reliability.</p>"},{"location":"api-reference/chemstation-system/#ChemstationAPI.controllers.system_module.SystemModule.RC_status","title":"RC_status","text":"<pre><code>RC_status(module: str = 'CE1') -&gt; str\n</code></pre> <p>Get current RC.NET module status for detailed instrument monitoring.</p> <p>Queries RC.NET status registers for detailed instrument status including run states, error conditions, and operational modes. Provides more granular status information than basic acquisition status.</p> <p>Parameters:</p> Name Type Description Default <code>module</code> <code>str</code> <p>RC.NET module identifier. Default \"CE1\" for CE instrument.    Other modules: \"DAD1\" (detector), \"PUMP1\", etc.</p> <code>'CE1'</code> <p>Returns:</p> Type Description <code>str</code> <p>Current RC module run state:</p> <code>str</code> <ul> <li>\"Idle\": Module ready and available for operations</li> </ul> <code>str</code> <ul> <li>\"Run\": Module actively executing operations</li> </ul> <code>str</code> <ul> <li>\"NotReady\": Module initializing or in error state</li> </ul> <code>str</code> <ul> <li>\"Error\": Module error condition requiring attention</li> </ul> <code>str</code> <ul> <li>\"Maintenance\": Module in maintenance mode</li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Monitor CE instrument status\n&gt;&gt;&gt; if system.RC_status(\"CE1\") == \"Idle\":\n...     print(\"CE instrument ready\")\n&gt;&gt;&gt; \n&gt;&gt;&gt; # Check multiple modules\n&gt;&gt;&gt; for module in [\"CE1\", \"DAD1\"]:\n...     print(f\"{module}: {system.RC_status(module)}\")\n</code></pre> Note <p>More detailed than acquisition status. Useful for troubleshooting and system diagnostics. Includes automatic retry logic.</p>"},{"location":"api-reference/chemstation-system/#ChemstationAPI.controllers.system_module.SystemModule.ready_to_start_analysis","title":"ready_to_start_analysis","text":"<pre><code>ready_to_start_analysis(modules=['CE1', 'DAD1'], timeout=None, verbose=True)\n</code></pre> <p>Wait for all specified modules to reach ready state for analysis.</p> <p>Monitors multiple RC.NET modules until all reach \"Idle\" state with no \"NotReady\" conditions. Essential for ensuring instrument readiness before starting automated analysis sequences.</p> <p>The function continuously polls module status and displays real-time progress when verbose mode is enabled. Modules must have both RunState=\"Idle\" and empty NotReadyState_Description to be considered ready.</p> <p>Parameters:</p> Name Type Description Default <code>modules</code> <p>List of module identifiers to check (default: [\"CE1\", \"DAD1\"])     Common modules: \"CE1\" (capillary electrophoresis), \"DAD1\" (detector)</p> <code>['CE1', 'DAD1']</code> <code>timeout</code> <p>Maximum waiting time in seconds. None = wait indefinitely     Typical values: 10s (quick check), 60s (standard), 300s (long methods)</p> <code>None</code> <code>verbose</code> <p>Display real-time status updates during waiting (default: True)</p> <code>True</code> <p>Returns:</p> Type Description <p>None (function returns when all modules ready)</p> <p>Raises:</p> Type Description <code>TimeoutError</code> <p>If modules not ready within specified timeout period</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Quick readiness check before analysis\n&gt;&gt;&gt; system.ready_to_start_analysis(timeout=10, verbose=False)\n&gt;&gt;&gt; \n&gt;&gt;&gt; # Wait for CE and detector with status updates\n&gt;&gt;&gt; system.ready_to_start_analysis([\"CE1\", \"DAD1\"], timeout=60)\n&gt;&gt;&gt; \n&gt;&gt;&gt; # Wait indefinitely with progress display\n&gt;&gt;&gt; system.ready_to_start_analysis(verbose=True)\n</code></pre> Note <p>Displays progress in top menu bar area when verbose=True. Modules must be both \"Idle\" and have no NotReady conditions to pass validation.</p>"},{"location":"api-reference/chemstation-system/#ChemstationAPI.controllers.system_module.SystemModule.add_register_reader","title":"add_register_reader","text":"<pre><code>add_register_reader(register_reader_macro: str = 'ChemstationAPI\\\\controllers\\\\macros\\\\register_reader.mac') -&gt; None\n</code></pre> <p>Add comprehensive register inspection tool to ChemStation Debug menu.</p> <p>Add a powerful register browser tool in ChemStation's top menu bar that enables interactive inspection and modification of ChemStation registers. Invaluable for debugging, system analysis, advanced parameter editing, and understanding ChemStation's internal data structures.</p> <p>The register browser provides a user-friendly interface for exploring complex register hierarchies including RC.NET objects, sequence tables, method parameters, and system variables.</p> Register Browser Features <ul> <li>Browse all ChemStation registers (RC.NET, sequence, method, system)</li> <li>Inspect object structures and data tables interactively</li> <li>View and modify header values and text fields</li> <li>Navigate complex register hierarchies with tree view</li> <li>Export register contents for analysis</li> </ul> <p>Parameters:</p> Name Type Description Default <code>register_reader_macro</code> <code>str</code> <p>Path to register reader macro file.                   Default uses included comprehensive register_reader.mac</p> <code>'ChemstationAPI\\\\controllers\\\\macros\\\\register_reader.mac'</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Add register browser with default comprehensive tool\n&gt;&gt;&gt; system.add_register_reader()\n&gt;&gt;&gt; \n&gt;&gt;&gt; # Use custom register reader\n&gt;&gt;&gt; system.add_register_reader(\"C:\\Custom\\debug_tools.mac\")\n</code></pre> Usage <p>After execution, look for \"Show Registers\" item in ChemStation's Debug menu (top menu bar). Tool provides full register browsing capabilities for advanced users and developers.</p> Note <p>Tool remains available until ChemStation restart. Exercise caution when modifying system registers as changes affect instrument operation.</p>"},{"location":"api-reference/chemstation-system/#ChemstationAPI.controllers.system_module.SystemModule.abort_run","title":"abort_run","text":"<pre><code>abort_run() -&gt; None\n</code></pre> <p>Immediately abort current analysis or sequence execution.</p> <p>Sends emergency abort command to ChemStation that immediately terminates the current analysis, sequence, or operation. Used for emergency stops, error recovery, or when immediate termination is required.</p> <p>The abort process immediately stops the current analysis phase, disables high voltage and pressure systems, and returns the instrument to a safe idle state. All method execution flags are cleared.</p> <p>Raises:</p> Type Description <code>SystemError</code> <p>If abort command fails to execute</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Emergency stop\n&gt;&gt;&gt; system.abort_run()\n&gt;&gt;&gt; \n&gt;&gt;&gt; # Conditional abort on error detection\n&gt;&gt;&gt; if error_detected:\n...     system.abort_run()\n...     print(\"Analysis aborted due to error\")\n</code></pre> Warning <p>Results in immediate termination without post-run conditioning. Data up to abort point may be saved. Instrument requires manual return to ready state after abort.</p>"},{"location":"api-reference/chemstation-system/#ChemstationAPI.controllers.system_module.SystemModule.wait_for_ready","title":"wait_for_ready","text":"<pre><code>wait_for_ready(timeout: int = 60) -&gt; bool\n</code></pre> <p>Wait for ChemStation to reach ready state for new analysis.</p> <p>Continuously polls system status until it reaches a state ready for new analysis (STANDBY or PRERUN) or until timeout expires. Essential for automated workflows that need to wait for instrument availability between analyses.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>int</code> <p>Maximum waiting time in seconds. Default 60 seconds.     Increase for methods with long post-run conditioning.     Typical values: 60s (standard), 300s (long methods), 600s (very long)</p> <code>60</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if system reaches ready state within timeout,</p> <code>bool</code> <p>False if timeout expires before ready state achieved</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Standard workflow with timeout\n&gt;&gt;&gt; if system.wait_for_ready():\n...     api.method.run(\"NextSample\")\n... else:\n...     print(\"Timeout - check instrument status\")\n&gt;&gt;&gt; \n&gt;&gt;&gt; # Extended wait for long conditioning methods\n&gt;&gt;&gt; if system.wait_for_ready(timeout=300):  # 5 minutes\n...     start_next_analysis()\n&gt;&gt;&gt; \n&gt;&gt;&gt; # Sequence automation\n&gt;&gt;&gt; for sample in sample_list:\n...     if system.wait_for_ready(timeout=120):\n...         process_sample(sample)\n</code></pre> Note <p>Polls status every second to minimize system load. Both STANDBY and PRERUN are considered ready states. Returns immediately if already ready.</p>"},{"location":"api-reference/chemstation-system/#ChemstationAPI.controllers.system_module.SystemModule.get_elapsed_analysis_time","title":"get_elapsed_analysis_time","text":"<pre><code>get_elapsed_analysis_time() -&gt; float\n</code></pre> <p>Get elapsed separation time since current analysis started.</p> <p>Returns the time elapsed since the actual separation phase began in the current analysis. Excludes pre-run conditioning, injection, and preparation phases - measures only electrophoretic separation runtime.</p> <p>Returns:</p> Type Description <code>float</code> <p>Elapsed separation time in minutes as float. Returns 0.0 if no</p> <code>float</code> <p>analysis is running or separation hasn't started yet.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Monitor analysis progress\n&gt;&gt;&gt; elapsed = system.get_elapsed_analysis_time()\n&gt;&gt;&gt; total = system.get_analysis_time()\n&gt;&gt;&gt; progress = (elapsed / total) * 100\n&gt;&gt;&gt; print(f\"Analysis {progress:.1f}% complete\")\n&gt;&gt;&gt; \n&gt;&gt;&gt; # Real-time monitoring with updates\n&gt;&gt;&gt; while system.method_on():\n...     elapsed = system.get_elapsed_analysis_time()\n...     print(f\"Running for {elapsed:.2f} minutes\")\n...     time.sleep(30)\n</code></pre> Note <p>Measures only separation phase, not total method time including conditioning. Updates in real-time with precision to 0.01 minutes.</p>"},{"location":"api-reference/chemstation-system/#ChemstationAPI.controllers.system_module.SystemModule.get_analysis_time","title":"get_analysis_time","text":"<pre><code>get_analysis_time() -&gt; float\n</code></pre> <p>Get total expected separation duration for current method.</p> <p>Returns the programmed separation duration from the currently loaded method's stoptime parameter. This represents the expected separation runtime and is used for progress calculations and time estimation.</p> <p>Returns:</p> Type Description <code>float</code> <p>Total separation duration in minutes as float</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Calculate remaining time\n&gt;&gt;&gt; total_time = system.get_analysis_time()\n&gt;&gt;&gt; elapsed_time = system.get_elapsed_analysis_time()\n&gt;&gt;&gt; remaining = total_time - elapsed_time\n&gt;&gt;&gt; print(f\"Analysis completes in {remaining:.2f} minutes\")\n&gt;&gt;&gt; \n&gt;&gt;&gt; # Check method duration before starting\n&gt;&gt;&gt; duration = system.get_analysis_time()\n&gt;&gt;&gt; if duration &gt; 60:  # More than 1 hour\n...     confirm = input(f\"Long analysis ({duration:.1f}min). Continue? \")\n</code></pre> Note <p>Based on method's programmed stoptime parameter. Does not include conditioning or injection time. Remains constant during execution.</p>"},{"location":"api-reference/chemstation-system/#ChemstationAPI.controllers.system_module.SystemModule.get_remaining_analysis_time","title":"get_remaining_analysis_time","text":"<pre><code>get_remaining_analysis_time() -&gt; float\n</code></pre> <p>Get remaining separation time until current analysis completes.</p> <p>Calculates time remaining until separation phase completes by subtracting elapsed time from total expected duration. Provides real-time countdown for analysis completion and progress monitoring.</p> <p>Returns:</p> Type Description <code>float</code> <p>Remaining separation time in minutes as float. Returns 0.0 if no</p> <code>float</code> <p>analysis running. May be negative if analysis exceeds expected duration.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Display countdown\n&gt;&gt;&gt; remaining = system.get_remaining_analysis_time()\n&gt;&gt;&gt; print(f\"Analysis completes in {remaining:.1f} minutes\")\n&gt;&gt;&gt; \n&gt;&gt;&gt; # Progress monitoring with updates\n&gt;&gt;&gt; while system.method_on():\n...     remaining = system.get_remaining_analysis_time()\n...     if remaining &gt; 0:\n...         print(f\"Time remaining: {remaining:.2f} minutes\")\n...     time.sleep(60)\n&gt;&gt;&gt; \n&gt;&gt;&gt; # Automated scheduling\n&gt;&gt;&gt; if system.get_remaining_analysis_time() &lt; 5:  # Less than 5 minutes\n...     prepare_next_sample()\n</code></pre> Note <p>Updates continuously during analysis. Useful for progress bars and time estimation in automated workflows.</p>"},{"location":"api-reference/chemstation-validation/","title":"Validation Module","text":"<p>Input validation and system state checking.</p>"},{"location":"api-reference/chemstation-validation/#ChemstationAPI.controllers.validation.ValidationModule","title":"ChemstationAPI.controllers.validation.ValidationModule","text":"<pre><code>ValidationModule(communicator: ChemstationCommunicator)\n</code></pre> <p>Comprehensive validation and system state checking for ChemStation operations.</p> <p>Provides validation methods for all aspects of ChemStation operation including file system validation, instrument state checking, vial management validation, and method execution verification. All validation methods follow consistent patterns and raise specific exceptions for different failure modes.</p> Validation Philosophy <ul> <li>Fail fast: Detect problems before they cause system errors</li> <li>Specific exceptions: Different failure modes have different exception types</li> <li>Case-insensitive: File and method name checking handles case variations</li> <li>Comprehensive checking: Validate all prerequisites before operations</li> </ul> File System Validation <ul> <li>Method file existence in ChemStation directories</li> <li>Sequence file existence and accessibility</li> <li>Case-insensitive filename matching</li> <li>Path validation and accessibility checking</li> </ul> Instrument State Validation <ul> <li>System readiness for operations</li> <li>Carousel availability and operational state</li> <li>Method execution state verification</li> <li>Error condition detection and reporting</li> </ul> Vial Management Validation <ul> <li>Individual vial presence checking</li> <li>Batch vial validation for sequences</li> <li>Position occupancy verification</li> <li>Carousel state comprehensive monitoring</li> </ul> <p>Attributes:</p> Name Type Description <code>comm</code> <p>ChemStation communicator for validation queries.</p> <p>Initialize validation module with ChemStation communicator.</p> <p>Parameters:</p> Name Type Description Default <code>communicator</code> <code>ChemstationCommunicator</code> <p>ChemStation communication interface for validation queries.</p> required"},{"location":"api-reference/chemstation-validation/#ChemstationAPI.controllers.validation.ValidationModule-functions","title":"Functions","text":""},{"location":"api-reference/chemstation-validation/#ChemstationAPI.controllers.validation.ValidationModule.validate_sequence_name","title":"validate_sequence_name","text":"<pre><code>validate_sequence_name(sequence: str, dir_path: str = '_SEQPATH$') -&gt; None\n</code></pre> <p>Validate that sequence file exists in specified directory.</p> <p>Performs case-insensitive validation of sequence file existence in the ChemStation sequence directory. This prevents errors when loading sequences with different case variations in filenames.</p> <p>Parameters:</p> Name Type Description Default <code>sequence</code> <code>str</code> <p>Sequence name (without .S extension).      Examples: \"protein_analysis\", \"DAILY_QC\", \"Method_Development\"</p> required <code>dir_path</code> <code>str</code> <p>Path to sequence directory. Defaults to ChemStation      sequence directory (_SEQPATH$). Can specify custom path.</p> <code>'_SEQPATH$'</code> <p>Raises:</p> Type Description <code>ValidationError</code> <p>If sequence file doesn't exist in specified directory.            Error message includes actual directory path for debugging.</p> <code>FileNotFoundError</code> <p>If sequence directory doesn't exist or isn't accessible.</p> <p>Examples:</p> <p>Validate before loading:</p> <pre><code>&gt;&gt;&gt; validation.validate_sequence_name(\"Protein_Analysis\")\n&gt;&gt;&gt; seq.load_sequence(\"Protein_Analysis\")  # Safe to load\n</code></pre> <p>Validate custom directory:</p> <pre><code>&gt;&gt;&gt; validation.validate_sequence_name(\"TestSeq\", \"C:\\Custom\\Sequences\\\")\n</code></pre> Note <ul> <li>Case-insensitive matching (protein_analysis matches Protein_Analysis.S)</li> <li>Automatically appends .S extension for checking</li> <li>Validates directory accessibility before file checking</li> <li>Essential for preventing sequence loading failures</li> </ul>"},{"location":"api-reference/chemstation-validation/#ChemstationAPI.controllers.validation.ValidationModule.validate_method","title":"validate_method","text":"<pre><code>validate_method(method: str, dir_path: str = '_METHODPATHS$', check_vials: bool = False) -&gt; None\n</code></pre> <p>Validate that CE method file exists in specified directory.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>Method name (without .M extension).</p> required <code>dir_path</code> <code>str</code> <p>Path to method directory. Defaults to _METHPATH$.</p> <code>'_METHODPATHS$'</code> <code>check_vials</code> <code>bool</code> <p>If True, also validates that method's vials are in carousel.</p> <code>False</code> <p>Raises:</p> Type Description <code>ValidationError</code> <p>If method file doesn't exist.</p> <code>VialError</code> <p>If check_vials=True and required vials are missing.</p>"},{"location":"api-reference/chemstation-validation/#ChemstationAPI.controllers.validation.ValidationModule.validate_vials_in_method","title":"validate_vials_in_method","text":"<pre><code>validate_vials_in_method(method: str = '_METHFILE$', dir_path: str = '_METHODPATHS$') -&gt; None\n</code></pre> <p>Validate that all vials required by the method are present in carousel.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>Method name (without .M extension) or \"_METHFILE$\" for currently loaded method.</p> <code>'_METHFILE$'</code> <code>dir_path</code> <code>str</code> <p>Path to method directory. Defaults to _METHODPATHS$.</p> <code>'_METHODPATHS$'</code> <p>Raises:</p> Type Description <code>VialError</code> <p>If required vials are missing from carousel.</p>"},{"location":"api-reference/chemstation-validation/#ChemstationAPI.controllers.validation.ValidationModule.validate_vial_in_system","title":"validate_vial_in_system","text":"<pre><code>validate_vial_in_system(vial: int) -&gt; None\n</code></pre> <p>Validate that specified vial is present somewhere in the CE system.</p> <p>Checks that a vial is physically present in the CE system, either in the carousel or loaded at one of the lift positions. This prevents operations on missing vials that would cause instrument errors.</p> <p>Parameters:</p> Name Type Description Default <code>vial</code> <code>int</code> <p>Vial position number to check (1-50).  Position 49 is typically reserved for replenishment parking.</p> required <p>Raises:</p> Type Description <code>VialError</code> <p>If vial is not detected anywhere in the system.       This indicates the vial is missing or not properly seated.</p> <code>SystemError</code> <p>If unable to query vial state from instrument.</p> <p>Examples:</p> <p>Validate before loading:</p> <pre><code>&gt;&gt;&gt; validation.validate_vial_in_system(15)\n&gt;&gt;&gt; ce.load_vial_to_position(15, \"inlet\")  # Safe to load\n</code></pre> <p>Validate sample list:</p> <pre><code>&gt;&gt;&gt; sample_vials = [10, 11, 12, 15, 20]\n&gt;&gt;&gt; for vial in sample_vials:\n...     validation.validate_vial_in_system(vial)\n</code></pre> Note <ul> <li>Checks all possible vial locations (carousel + lift positions)</li> <li>State \"4\" (out_system) indicates vial not detected</li> <li>Essential before any vial manipulation operations</li> <li>Prevents instrument errors from missing vials</li> </ul>"},{"location":"api-reference/chemstation-validation/#ChemstationAPI.controllers.validation.ValidationModule.validate_method_run","title":"validate_method_run","text":"<pre><code>validate_method_run() -&gt; None\n</code></pre> <p>Validate that method execution started successfully.</p> <p>Checks the ChemStation _MethodOn system variable to verify that method execution actually started after a run command. This catches method startup failures that would otherwise go undetected.</p> <p>Raises:</p> Type Description <code>MethodError</code> <p>If method is not running, indicating startup failure.         This could be due to instrument not ready, parameter errors,         or system conflicts.</p> <p>Examples:</p> <p>Validate after method start:</p> <pre><code>&gt;&gt;&gt; method.run(\"Sample001\")\n&gt;&gt;&gt; validation.validate_method_run()  # Confirm it started\n</code></pre> <p>Use in automated workflows:</p> <pre><code>&gt;&gt;&gt; try:\n...     method.execution_method_with_parameters(15, \"CE_Method\", \"Sample\")\n...     validation.validate_method_run()\n...     print(\"Method started successfully\")\n... except MethodError:\n...     print(\"Method failed to start - check instrument status\")\n</code></pre> Note <ul> <li>Should be called shortly after method start commands</li> <li>_MethodOn=1 indicates successful method execution</li> <li>Essential for detecting silent method startup failures</li> <li>Allows early detection of configuration problems</li> </ul>"},{"location":"api-reference/chemstation-validation/#ChemstationAPI.controllers.validation.ValidationModule.vial_in_position","title":"vial_in_position","text":"<pre><code>vial_in_position(position: str) -&gt; None\n</code></pre> <p>Validate that a vial is loaded at the specified lift position.</p> <p>Checks that a vial is actually present at the specified lift position before operations that require vial contact (injection, electrode contact). This prevents operations that would fail due to missing vials.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>Lift position to check. Valid positions:      - \"inlet\": Sample injection position      - \"outlet\": Waste/collection position      - \"replenishment\": Buffer replenishment position</p> required <p>Raises:</p> Type Description <code>VialError</code> <p>If no vial is loaded at the specified position.</p> <code>ValueError</code> <p>If invalid position is specified.</p> <p>Examples:</p> <p>Check before injection:</p> <pre><code>&gt;&gt;&gt; validation.vial_in_position(\"inlet\")\n&gt;&gt;&gt; ce.apply_pressure_to_capillary(50.0, 5.0)  # Safe injection\n</code></pre> <p>Verify setup before analysis:</p> <pre><code>&gt;&gt;&gt; validation.vial_in_position(\"inlet\")   # Sample vial\n&gt;&gt;&gt; validation.vial_in_position(\"outlet\")  # Waste vial\n&gt;&gt;&gt; method.run(\"Analysis\")  # Safe to run\n</code></pre> Note <ul> <li>Essential before operations requiring vial contact</li> <li>Lift must have vial loaded, not just carousel presence</li> <li>Different from vial_in_system which checks any location</li> <li>Prevents electrode contact failures and injection errors</li> </ul>"},{"location":"api-reference/chemstation-validation/#ChemstationAPI.controllers.validation.ValidationModule.validate_use_carousel","title":"validate_use_carousel","text":"<pre><code>validate_use_carousel(num_attempt=3) -&gt; None\n</code></pre> <p>Validate that carousel is available for vial operations.</p> <p>Checks the CE instrument RC status to ensure the carousel system is available for vial loading/unloading operations. This prevents carousel operations during incompatible instrument states.</p> <p>Parameters:</p> Name Type Description Default <code>num_attempt</code> <code>int</code> <p>Number of validation attempts before raising error.             Default is 2. Each attempt is separated by 2 second delay.</p> <code>3</code> <p>Raises:</p> Type Description <code>SystemError</code> <p>If carousel is not available for use after all attempts.         This occurs during method execution, error states,         or maintenance modes that lock carousel access.</p> <p>Examples:</p> <p>Check before vial operations with default attempts:</p> <pre><code>&gt;&gt;&gt; validation.validate_use_carousel()\n&gt;&gt;&gt; ce.load_vial_to_position(15, \"inlet\")  # Safe to load\n</code></pre> <p>Check with custom number of attempts:</p> <pre><code>&gt;&gt;&gt; validation.validate_use_carousel(num_attempt=5)\n&gt;&gt;&gt; ce.load_vial_to_position(15, \"inlet\")  # Safe to load\n</code></pre> <p>Validate before batch operations:</p> <pre><code>&gt;&gt;&gt; validation.validate_use_carousel()\n&gt;&gt;&gt; for vial in vial_list:\n...     ce.load_vial_to_position(vial, \"inlet\")\n</code></pre> Note <ul> <li>\"Idle\" state allows carousel operations</li> <li>\"Run\" state may allow limited carousel access</li> <li>Other states (Error, Maintenance) block carousel use</li> <li>Function waits 1 second between validation attempts</li> <li>Essential before any automated vial handling</li> </ul>"},{"location":"api-reference/chemstation-validation/#ChemstationAPI.controllers.validation.ValidationModule.get_vialtable","title":"get_vialtable","text":"<pre><code>get_vialtable() -&gt; Dict[int, bool]\n</code></pre> <p>Get comprehensive status of all carousel positions.</p> <p>Queries the CE instrument for the presence status of all 48 carousel positions and returns a dictionary mapping position numbers to presence status. This provides a complete overview of vial distribution.</p> <p>Returns:</p> Type Description <code>Dict[int, bool]</code> <p>Dictionary mapping position numbers (1-48) to boolean presence status.</p> <code>Dict[int, bool]</code> <p>True indicates vial is present (in carousel or at lift position),</p> <code>Dict[int, bool]</code> <p>False indicates position is empty.</p> <p>Raises:</p> Type Description <code>VialError</code> <p>If vial table cannot be read from instrument.</p> <code>SystemError</code> <p>If communication with carousel system fails.</p> <p>Examples:</p> <p>Get complete vial overview:</p> <pre><code>&gt;&gt;&gt; vial_table = validation.get_vialtable()\n&gt;&gt;&gt; occupied_positions = [pos for pos, present in vial_table.items() if present]\n&gt;&gt;&gt; print(f\"Vials present at positions: {occupied_positions}\")\n</code></pre> <p>Check specific positions:</p> <pre><code>&gt;&gt;&gt; vial_table = validation.get_vialtable()\n&gt;&gt;&gt; for pos in [10, 11, 12]:\n...     if vial_table[pos]:\n...         print(f\"Vial at position {pos} ready\")\n</code></pre> <p>Find empty positions:</p> <pre><code>&gt;&gt;&gt; vial_table = validation.get_vialtable()\n&gt;&gt;&gt; empty_positions = [pos for pos, present in vial_table.items() if not present]\n</code></pre> Note <ul> <li>Includes positions 1-48 (position 49 handled separately)</li> <li>True means vial detected (any location in system)</li> <li>Useful for sequence planning and vial management</li> <li>Updates reflect real-time carousel status</li> </ul>"},{"location":"api-reference/chemstation-validation/#ChemstationAPI.controllers.validation.ValidationModule.list_vial_validation","title":"list_vial_validation","text":"<pre><code>list_vial_validation(vials: list) -&gt; None\n</code></pre> <p>Validate that all vials in list are present in carousel system.</p> <p>Performs batch validation of multiple vials for sequence operations or batch analysis. This ensures all required vials are present before starting automated workflows that would fail on missing vials.</p> <p>Parameters:</p> Name Type Description Default <code>vials</code> <code>list</code> <p>List of vial position numbers to validate.   Examples: [1, 2, 3], [10, 15, 20, 25], range(1, 49)</p> required <p>Raises:</p> Type Description <code>VialError</code> <p>If any vials are missing from the carousel.       Error message lists all missing vial positions for       easy identification and correction.</p> <p>Examples:</p> <p>Validate sequence vials:</p> <pre><code>&gt;&gt;&gt; sequence_vials = [10, 11, 12, 15, 20]\n&gt;&gt;&gt; validation.list_vial_validation(sequence_vials)\n&gt;&gt;&gt; # Safe to start sequence with these vials\n</code></pre> <p>Validate range of positions:</p> <pre><code>&gt;&gt;&gt; validation.list_vial_validation(list(range(1, 25)))  # Check 1-24\n</code></pre> <p>Handle validation errors:</p> <pre><code>&gt;&gt;&gt; try:\n...     validation.list_vial_validation([1, 2, 3, 4, 5])\n... except VialError as e:\n...     print(f\"Missing vials: {e}\")\n...     # Load missing vials before continuing\n</code></pre> Note <ul> <li>Efficient batch checking using single carousel query</li> <li>Reports all missing vials simultaneously</li> <li>Essential before sequence execution</li> <li>Prevents partial sequence failures due to missing vials</li> </ul>"},{"location":"api-reference/chemstation-validation/#ChemstationAPI.controllers.validation.ValidationModule.extract_vials_from_xml","title":"extract_vials_from_xml","text":"<pre><code>extract_vials_from_xml(method_path)\n</code></pre> <p>Extract vial numbers from CE method XML configuration file.</p> <p>Parses ChemStation CE method XML files to extract all vial position numbers referenced in the method configuration. This includes vials used for inlet/outlet positions, preconditioning programs, injection programs, and any other method operations requiring vial access.</p> <p>Parameters:</p> Name Type Description Default <code>method_path</code> <code>str</code> <p>Path to the CE method directory (.M folder).             Function automatically looks for the standard             \"AgilentCEDriver1.RapidControl.MethodXML.xml\" file             within this directory.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>Sorted list of unique vial position numbers (integers). Only positive vial numbers are included (negative values like -1 are filtered out as they represent \"no vial\" conditions). Empty list if no valid vials found or file reading fails.</p> <p>Examples:</p> <p>Extract vials from method:</p> <pre><code>&gt;&gt;&gt; vials = extract_vials_from_xml(\"C:/Methods/CE_Protein.M\")\n&gt;&gt;&gt; print(f\"Method requires vials: {vials}\")\n[1, 5, 6, 7]\n</code></pre> <p>Use with method validation:</p> <pre><code>&gt;&gt;&gt; method_dir = os.path.join(methods_path, \"CE_Protein.M\")\n&gt;&gt;&gt; required_vials = extract_vials_from_xml(method_dir)\n&gt;&gt;&gt; validation.list_vial_validation(required_vials)\n</code></pre> Note <ul> <li>Automatically constructs path to AgilentCEDriver1.RapidControl.MethodXML.xml</li> <li>File is read with UTF-16 encoding (ChemStation XML standard)</li> <li>Searches for all  tags in the XML</li> <li>Automatically filters negative vial numbers (-1, etc.)</li> <li>Returns empty list on file read errors (with error message printed)</li> <li>Essential for method vial dependency validation before execution</li> </ul>"},{"location":"api-reference/sia-config/","title":"SIA Configuration","text":"<p>System configuration and parameter management.</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig","title":"SIA_API.methods.config.SIConfig  <code>dataclass</code>","text":"<pre><code>SIConfig(waste_port: int = 1, air_port: int = 2, di_port: int = 3, transfer_port: int = 4, meoh_port: int = 5, naoh_port: int = 6, buffer_port: int = 7, sample_port: int = 8, wash_vial: int = 48, dry_vial: int = 49, waste_vial: int = 50, cleaning_solution_vial: int = 47, default_bubble_volume: int = 15, default_transfer_line_volume: int = 600, default_holding_coil_volume: int = 1000, default_needle_flush: int = 50, default_cleaning_solution_volume: int = 350, default_air_flush: int = 30, default_homogenization_volume: int = 320, speed_air: int = 5000, speed_fast: int = 3500, speed_normal: int = 2000, speed_slow: int = 1500, speed_cleaning: int = 2500, speed_homogenization_aspirate: int = 2000, speed_homogenization_dispense: int = 2000, homogenization_liquid_cycles: int = 2, homogenization_air_cycles: int = 3, homogenization_clean_after: bool = False, wait_vial_load: float = 2.0, wait_vial_unload: float = 1.0, wait_after_aspirate: float = 1.0, wait_after_dispense: float = 0.5, wait_homogenization_settle: float = 5.0, wait_cleaning_reaction: float = 3.0, verbose: bool = True)\n</code></pre> <p>Complete configuration for SI (Sequential Injection) system.</p> <p>This dataclass contains all adjustable parameters organized into logical groups. All parameters have sensible defaults that work for most applications, but can be customized as needed.</p> <p>The configuration covers: - Port assignments for different reagents and functions - Standard vial positions for system components - Volume parameters for various operations - Speed settings for different types of flows - Timing parameters for system operations - Homogenization settings - Display and logging preferences</p> <p>Attributes are grouped logically and documented individually below.</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig-attributes","title":"Attributes","text":""},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.waste_port","title":"waste_port  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>waste_port: int = 1\n</code></pre> <p>Port connected to waste line (typically port 1)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.air_port","title":"air_port  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>air_port: int = 2\n</code></pre> <p>Port for air aspiration (typically port 2)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.di_port","title":"di_port  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>di_port: int = 3\n</code></pre> <p>Port connected to deionized water reservoir (typically port 3)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.transfer_port","title":"transfer_port  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>transfer_port: int = 4\n</code></pre> <p>Port connected to transfer line leading to sample needle (typically port 4)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.meoh_port","title":"meoh_port  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>meoh_port: int = 5\n</code></pre> <p>Port connected to methanol reservoir for cleaning (typically port 5)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.naoh_port","title":"naoh_port  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>naoh_port: int = 6\n</code></pre> <p>Port connected to sodium hydroxide solution for cleaning (typically port 6)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.buffer_port","title":"buffer_port  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>buffer_port: int = 7\n</code></pre> <p>Port connected to buffer solution reservoir (typically port 7)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.sample_port","title":"sample_port  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sample_port: int = 8\n</code></pre> <p>Port connected to sample input line (typically port 8)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.wash_vial","title":"wash_vial  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>wash_vial: int = 48\n</code></pre> <p>Carousel position for needle wash vial (contains wash solution)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.dry_vial","title":"dry_vial  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dry_vial: int = 49\n</code></pre> <p>Carousel position for dry/empty vial (for air aspiration if needed)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.waste_vial","title":"waste_vial  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>waste_vial: int = 50\n</code></pre> <p>Carousel position for waste collection vial</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.cleaning_solution_vial","title":"cleaning_solution_vial  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cleaning_solution_vial: int = 47\n</code></pre> <p>Carousel position for cleaning solution vial (e.g., NaOH solution)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.default_bubble_volume","title":"default_bubble_volume  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_bubble_volume: int = 15\n</code></pre> <p>Default volume for separating air bubbles between different solutions (\u00b5L)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.default_transfer_line_volume","title":"default_transfer_line_volume  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_transfer_line_volume: int = 600\n</code></pre> <p>Volume of the transfer line from valve to sample needle (\u00b5L)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.default_holding_coil_volume","title":"default_holding_coil_volume  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_holding_coil_volume: int = 1000\n</code></pre> <p>Volume of the holding coil in the flow injection system (\u00b5L)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.default_needle_flush","title":"default_needle_flush  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_needle_flush: int = 50\n</code></pre> <p>Default volume for flushing the sample needle to prevent contamination (\u00b5L)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.default_cleaning_solution_volume","title":"default_cleaning_solution_volume  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_cleaning_solution_volume: int = 350\n</code></pre> <p>Default volume of cleaning solution (e.g., NaOH) for system cleaning (\u00b5L)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.default_air_flush","title":"default_air_flush  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_air_flush: int = 30\n</code></pre> <p>Default volume of air for flushing operations (\u00b5L)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.default_homogenization_volume","title":"default_homogenization_volume  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_homogenization_volume: int = 320\n</code></pre> <p>Default volume to aspirate/dispense during sample homogenization (\u00b5L)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.speed_air","title":"speed_air  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>speed_air: int = 5000\n</code></pre> <p>High speed for air aspiration and fast transfers (\u00b5L/min)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.speed_fast","title":"speed_fast  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>speed_fast: int = 3500\n</code></pre> <p>Fast flow rate for routine liquid transfers (\u00b5L/min)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.speed_normal","title":"speed_normal  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>speed_normal: int = 2000\n</code></pre> <p>Normal flow rate for standard operations (\u00b5L/min)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.speed_slow","title":"speed_slow  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>speed_slow: int = 1500\n</code></pre> <p>Slow flow rate for precise operations or viscous liquids (\u00b5L/min)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.speed_cleaning","title":"speed_cleaning  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>speed_cleaning: int = 2500\n</code></pre> <p>Flow rate for cleaning operations (\u00b5L/min)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.speed_homogenization_aspirate","title":"speed_homogenization_aspirate  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>speed_homogenization_aspirate: int = 2000\n</code></pre> <p>Flow rate for aspirating during sample homogenization (\u00b5L/min)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.speed_homogenization_dispense","title":"speed_homogenization_dispense  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>speed_homogenization_dispense: int = 2000\n</code></pre> <p>Flow rate for dispensing during sample homogenization (\u00b5L/min)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.homogenization_liquid_cycles","title":"homogenization_liquid_cycles  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>homogenization_liquid_cycles: int = 2\n</code></pre> <p>Number of aspiration/dispense cycles for liquid-based homogenization</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.homogenization_air_cycles","title":"homogenization_air_cycles  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>homogenization_air_cycles: int = 3\n</code></pre> <p>Number of aspiration/dispense cycles for air bubble-based homogenization</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.homogenization_clean_after","title":"homogenization_clean_after  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>homogenization_clean_after: bool = False\n</code></pre> <p>Whether to automatically clean the transfer line after homogenization</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.wait_vial_load","title":"wait_vial_load  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>wait_vial_load: float = 2.0\n</code></pre> <p>Wait time after loading a vial to replenishment position (seconds)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.wait_vial_unload","title":"wait_vial_unload  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>wait_vial_unload: float = 1.0\n</code></pre> <p>Wait time after unloading a vial from replenishment position (seconds)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.wait_after_aspirate","title":"wait_after_aspirate  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>wait_after_aspirate: float = 1.0\n</code></pre> <p>Wait time after liquid aspiration for system stabilization (seconds)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.wait_after_dispense","title":"wait_after_dispense  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>wait_after_dispense: float = 0.5\n</code></pre> <p>Wait time after liquid dispensing for system stabilization (seconds)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.wait_homogenization_settle","title":"wait_homogenization_settle  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>wait_homogenization_settle: float = 5.0\n</code></pre> <p>Wait time for sample settling during homogenization operations (seconds)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.wait_cleaning_reaction","title":"wait_cleaning_reaction  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>wait_cleaning_reaction: float = 3.0\n</code></pre> <p>Wait time for cleaning solution to react before flushing (seconds)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.SIConfig.verbose","title":"verbose  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>verbose: bool = True\n</code></pre> <p>Global verbose setting - controls whether status messages are displayed</p>"},{"location":"api-reference/sia-config/#configuration-functions","title":"Configuration Functions","text":""},{"location":"api-reference/sia-config/#SIA_API.methods.config","title":"SIA_API.methods.config","text":"<p>Configuration management for SI (Sequential Injection) system.</p> <p>This module provides centralized configuration for all adjustable parameters used in SI workflows. The SIConfig dataclass contains all system parameters organized into logical groups for easy maintenance and customization.</p> Example <p>from config import SIConfig, DEFAULT_CONFIG</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config--use-default-configuration","title":"Use default configuration","text":"<p>config = DEFAULT_CONFIG</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config--create-custom-configuration","title":"Create custom configuration","text":"<p>custom_config = SIAConfig( ...     speed_normal=1800, ...     verbose=False, ...     homogenization_liquid_cycles=3 ... )</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config--modify-existing-configuration","title":"Modify existing configuration","text":"<p>config.speed_fast = 4000 config.default_bubble_volume = 20</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config-functions","title":"Functions","text":""},{"location":"api-reference/sia-config/#SIA_API.methods.config.validate_config","title":"validate_config","text":"<pre><code>validate_config(config) -&gt; list\n</code></pre> <p>Validate a SIConfig instance and return any issues found.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <p>The SIConfig instance to validate</p> required <p>Returns:</p> Type Description <code>list</code> <p>List of validation error messages (empty if no issues)</p> Example <p>config = SIConfig(speed_normal=-100)  # Invalid negative speed errors = validate_config(config) if errors: ...     print(\"Configuration issues:\", errors)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.create_config_from_dict","title":"create_config_from_dict","text":"<pre><code>create_config_from_dict(config_dict: dict) -&gt; SIConfig\n</code></pre> <p>Create a SIConfig instance from a dictionary.</p> <p>Useful for loading configuration from JSON files or other sources. Unknown keys in the dictionary are ignored.</p> <p>Parameters:</p> Name Type Description Default <code>config_dict</code> <code>dict</code> <p>Dictionary with configuration parameters</p> required <p>Returns:</p> Type Description <code>SIConfig</code> <p>New SIConfig instance with specified parameters</p> Example <p>config_data = { ...     'speed_normal': 1800, ...     'verbose': False, ...     'default_bubble_volume': 20 ... } config = create_config_from_dict(config_data)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.config_to_dict","title":"config_to_dict","text":"<pre><code>config_to_dict(config: SIConfig) -&gt; dict\n</code></pre> <p>Convert a SIConfig instance to a dictionary.</p> <p>Useful for saving configuration to JSON files or other formats.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SIConfig</code> <p>The SIConfig instance to convert</p> required <p>Returns:</p> Type Description <code>dict</code> <p>Dictionary representation of the configuration</p> Example <p>config = SIConfig(speed_normal=1800) config_dict = config_to_dict(config) import json json.dump(config_dict, open('config.json', 'w'), indent=2)</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.create_high_throughput_config","title":"create_high_throughput_config","text":"<pre><code>create_high_throughput_config() -&gt; SIConfig\n</code></pre> <p>Create a configuration optimized for high-throughput operations.</p> <p>This preset uses faster flow rates and shorter wait times to maximize sample processing speed, at the cost of some precision.</p> <p>Returns:</p> Type Description <code>SIConfig</code> <p>SIConfig instance optimized for speed</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.create_precision_config","title":"create_precision_config","text":"<pre><code>create_precision_config() -&gt; SIConfig\n</code></pre> <p>Create a configuration optimized for high-precision operations.</p> <p>This preset uses slower flow rates and longer wait times to maximize precision and reproducibility, at the cost of throughput.</p> <p>Returns:</p> Type Description <code>SIConfig</code> <p>SIConfig instance optimized for precision</p>"},{"location":"api-reference/sia-config/#SIA_API.methods.config.create_cleaning_intensive_config","title":"create_cleaning_intensive_config","text":"<pre><code>create_cleaning_intensive_config() -&gt; SIConfig\n</code></pre> <p>Create a configuration with enhanced cleaning procedures.</p> <p>This preset includes more thorough cleaning steps and larger cleaning volumes, suitable for applications requiring minimal cross-contamination.</p> <p>Returns:</p> Type Description <code>SIConfig</code> <p>SIConfig instance with enhanced cleaning</p>"},{"location":"api-reference/sia-valve/","title":"Valve Selector","text":"<p>Multi-position valve control for fluid routing.</p>"},{"location":"api-reference/sia-valve/#SIA_API.devices.valve_selector.ValveSelector","title":"SIA_API.devices.valve_selector.ValveSelector","text":"<pre><code>ValveSelector(port: str, num_positions: int = 8, prefix: str = '/Z', address: str = '', baudrate: int = 9600)\n</code></pre> <p>               Bases: <code>CommandSender</code></p> <p>Control multi-position valve selectors for automated fluid routing.</p> <p>Supports VICI and compatible valve selectors with 2-12 positions. Provides reliable positioning with automatic retry and validation.</p> <p>Attributes:</p> Name Type Description <code>num_positions</code> <code>int</code> <p>Number of valve positions available</p> <p>Examples:</p> <p>Basic valve control:</p> <pre><code>&gt;&gt;&gt; valve = ValveSelector(port=\"COM4\", num_positions=8)\n&gt;&gt;&gt; valve.position(1)  # Move to position 1\n&gt;&gt;&gt; valve.position(5)  # Move to position 5\n</code></pre> <p>Custom configuration:</p> <pre><code>&gt;&gt;&gt; valve = ValveSelector(\n...     port=\"COM4\", \n...     num_positions=6,\n...     prefix=\"/Z\",\n...     baudrate=19200\n... )\n</code></pre> <p>Initialize valve selector controller.</p> <p>Parameters:</p> Name Type Description Default <code>port</code> <code>str</code> <p>COM port for valve selector (e.g., \"COM4\")</p> required <code>num_positions</code> <code>int</code> <p>Number of valve positions</p> <code>8</code> <code>prefix</code> <code>str</code> <p>Command prefix for valve protocol (default: \"/Z\")</p> <code>'/Z'</code> <code>address</code> <code>str</code> <p>Device address (usually empty for valve selectors)</p> <code>''</code> <code>baudrate</code> <code>int</code> <p>Serial communication speed (default: 9600)</p> <code>9600</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If num_positions is outside valid range</p> <code>SerialException</code> <p>If COM port cannot be opened</p> Note <p>Most VICI valve selectors use \"/Z\" prefix and empty address. Some models may require different communication parameters.</p>"},{"location":"api-reference/sia-valve/#SIA_API.devices.valve_selector.ValveSelector-functions","title":"Functions","text":""},{"location":"api-reference/sia-valve/#SIA_API.devices.valve_selector.ValveSelector.position","title":"position","text":"<pre><code>position(position: int, num_attempts: int = 3) -&gt; None\n</code></pre> <p>Move valve to specified position.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>int</code> <p>Target position (1 to num_positions)</p> required <code>num_attempts</code> <code>int</code> <p>Number of command attempts for reliability</p> <code>3</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If position is outside valid range</p> Note <p>Multiple attempts help ensure reliable valve positioning, as some valves may not respond to the first command.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; valve.position(1)          # Move to position 1\n&gt;&gt;&gt; valve.position(8, num_attempts=5)  # Extra attempts for reliability\n</code></pre>"},{"location":"api-reference/sia-workflows/","title":"SIA Workflows","text":"<p>High-level workflow methods for automated procedures.</p>"},{"location":"api-reference/sia-workflows/#SIA_API.methods.prepared_methods.PreparedSIMethods","title":"SIA_API.methods.prepared_methods.PreparedSIMethods","text":"<pre><code>PreparedSIMethods(chemstation_controller, syringe_device: SyringeController, valve_device: ValveSelector, config: Optional[SIConfig] = None)\n</code></pre> <p>High-level SI (Sequential Injection) workflows with real-time status feedback.</p> <p>This class provides complete automation workflows for SI systems, handling complex sequences of operations including sample preparation, reagent mixing, cleaning procedures, and sample homogenization. All methods include comprehensive error checking and optional verbose feedback.</p> <p>The class integrates three main components: 1. ChemStation controller for autosampler operations 2. SyringeController for precise fluid handling 3. ValveSelector for reagent/port switching</p> <p>All operations can be customized through the SIConfig instance, allowing fine-tuning of volumes, speeds, timing, and other parameters.</p> <p>Attributes:</p> Name Type Description <code>chemstation</code> <p>ChemStation API controller instance</p> <code>config</code> <p>SIConfig instance with system parameters</p> <code>syringe</code> <p>SyringeController instance for fluid operations</p> <code>valve</code> <p>ValveSelector instance for port switching</p> <code>syringe_size</code> <p>Maximum volume capacity of the syringe (\u00b5L)</p> <code>_interactive_terminal</code> <p>Boolean indicating if running in interactive terminal</p> <p>Initialize SI workflow system with hardware controllers and configuration.</p> <p>Parameters:</p> Name Type Description Default <code>chemstation_controller</code> <p>ChemStation API controller instance for autosampler</p> required <code>syringe_device</code> <code>SyringeController</code> <p>Initialized SyringeController instance</p> required <code>valve_device</code> <code>ValveSelector</code> <p>Initialized ValveSelector instance  </p> required <code>config</code> <code>Optional[SIConfig]</code> <p>SIConfig instance (uses DEFAULT_CONFIG if None)</p> <code>None</code> <p>Raises:</p> Type Description <code>ValidationError</code> <p>If required vials are not present in the system</p> Example <p>workflow = PreparedSIMethods( ...     chemstation_controller=my_controller, ...     syringe_device=my_syringe, ...     valve_device=my_valve, ...     config=custom_config ... )</p>"},{"location":"api-reference/sia-workflows/#SIA_API.methods.prepared_methods.PreparedSIMethods-functions","title":"Functions","text":""},{"location":"api-reference/sia-workflows/#SIA_API.methods.prepared_methods.PreparedSIMethods.load_to_replenishment","title":"load_to_replenishment","text":"<pre><code>load_to_replenishment(vial_number: int, verbose: Optional[bool] = None) -&gt; None\n</code></pre> <p>Load specified vial to replenishment position in CE carousel.</p> <p>The replenishment position is where the sample needle can access the vial contents for aspiration or dispensing operations.</p> <p>Parameters:</p> Name Type Description Default <code>vial_number</code> <code>int</code> <p>Vial position number (1-50 for typical autosamplers)</p> required <code>verbose</code> <code>Optional[bool]</code> <p>Show status messages (uses config.verbose if None)</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If vial_number is outside valid range</p> <code>SystemError</code> <p>If autosampler operation fails</p> Example <p>workflow.load_to_replenishment(vial_number=25) Loading vial 25 to replenishment position...</p>"},{"location":"api-reference/sia-workflows/#SIA_API.methods.prepared_methods.PreparedSIMethods.unload_from_replenishment","title":"unload_from_replenishment","text":"<pre><code>unload_from_replenishment(verbose: Optional[bool] = None) -&gt; None\n</code></pre> <p>Unload vial from replenishment position back to carousel.</p> <p>Returns the currently loaded vial back to its original position in the autosampler carousel.</p> <p>Parameters:</p> Name Type Description Default <code>verbose</code> <code>Optional[bool]</code> <p>Show status messages (uses config.verbose if None)</p> <code>None</code> <p>Raises:</p> Type Description <code>SystemError</code> <p>If autosampler operation fails</p> Example <p>workflow.unload_from_replenishment() Unloading vial from replenishment position...</p>"},{"location":"api-reference/sia-workflows/#SIA_API.methods.prepared_methods.PreparedSIMethods.clean_needle","title":"clean_needle","text":"<pre><code>clean_needle(volume_flush: float, wash_vial: Optional[int] = None, verbose: Optional[bool] = None) -&gt; None\n</code></pre> <p>Clean the dispensing needle to prevent cross-contamination.</p> <p>This procedure uses a wash vial containing cleaning solution to flush the needle exterior and interior, preventing sample carryover between different vials or operations.</p> <p>Parameters:</p> Name Type Description Default <code>volume_flush</code> <code>float</code> <p>Total volume for needle cleaning (\u00b5L)</p> required <code>wash_vial</code> <code>Optional[int]</code> <p>Vial number containing wash solution (uses config default if None)</p> <code>None</code> <code>verbose</code> <code>Optional[bool]</code> <p>Show status messages (uses config.verbose if None)</p> <code>None</code> Note <p>The cleaning is split into two parts: half dispensed into the wash vial (for exterior cleaning) and half dispensed to waste (for interior cleaning).</p> Example <p>workflow.clean_needle(volume_flush=100, wash_vial=48) Cleaning needle with 100 \u00b5L in vial 48...</p>"},{"location":"api-reference/sia-workflows/#SIA_API.methods.prepared_methods.PreparedSIMethods.system_initialization_and_cleaning","title":"system_initialization_and_cleaning","text":"<pre><code>system_initialization_and_cleaning(waste_vial: Optional[int] = None, bubble: int = 20, verbose: Optional[bool] = None) -&gt; None\n</code></pre> <p>Perform complete system initialization and cleaning procedure.</p> <p>This comprehensive procedure prepares the SI system for operation by: 1. Initializing the syringe pump 2. Flushing all lines with appropriate solvents 3. Creating separating bubbles 4. Priming transfer lines</p> <p>This should be run at the beginning of each analytical session.</p> <p>Parameters:</p> Name Type Description Default <code>waste_vial</code> <code>Optional[int]</code> <p>Waste vial number (uses config default if None)</p> <code>None</code> <code>bubble</code> <code>int</code> <p>Separating bubble volume in \u00b5L</p> <code>20</code> <code>verbose</code> <code>Optional[bool]</code> <p>Show status messages (uses config.verbose if None)</p> <code>None</code> <p>Raises:</p> Type Description <code>SystemError</code> <p>If any initialization step fails</p> Example <p>workflow.system_initialization_and_cleaning() [SI] Loading vial 50 to replenishment position... [SI] Initializing syringe pump... [SI] Flushing syringe loop... [SI] Creating 20 \u00b5L air bubble in holding coil... [SI] Flushing system with methanol (250 \u00b5L)... [SI] Flushing with DI water... [SI] Flushing transfer line... [SI] System initialization completed successfully!</p>"},{"location":"api-reference/sia-workflows/#SIA_API.methods.prepared_methods.PreparedSIMethods.prepare_continuous_flow","title":"prepare_continuous_flow","text":"<pre><code>prepare_continuous_flow(solvent_port: int, waste_vial: Optional[int] = None, bubble_volume: int = 10, solvent_holding_coil_volume: int = 10, transfer_coil_flush: int = 500, holding_coil_flush: Optional[int] = None, speed: Optional[int] = None, verbose: Optional[bool] = None) -&gt; None\n</code></pre> <p>Prepare system for continuous flow filling operations.</p> <p>Continuous flow mode maintains a continuous column of solvent from the reservoir through the holding coil to the transfer line. This mode is ideal for multiple fills with the same solvent, providing consistent flow rates and minimal air bubbles.</p> <p>Parameters:</p> Name Type Description Default <code>solvent_port</code> <code>int</code> <p>Port number connected to solvent reservoir</p> required <code>waste_vial</code> <code>Optional[int]</code> <p>Waste vial number (uses config default if None)</p> <code>None</code> <code>bubble_volume</code> <code>int</code> <p>Air bubble volume in \u00b5L for separation</p> <code>10</code> <code>solvent_holding_coil_volume</code> <code>int</code> <p>Solvent volume at end of holding coil</p> <code>10</code> <code>transfer_coil_flush</code> <code>int</code> <p>Volume for transfer coil flushing  </p> <code>500</code> <code>holding_coil_flush</code> <code>Optional[int]</code> <p>Volume for holding coil flushing (uses config default if None)</p> <code>None</code> <code>speed</code> <code>Optional[int]</code> <p>Flow rate in \u00b5L/min (uses config.speed_slow if None)</p> <code>None</code> <code>verbose</code> <code>Optional[bool]</code> <p>Show status messages (uses config.verbose if None)</p> <code>None</code> Note <p>After this preparation, use continuous_fill() for sample dispensing. The system maintains solvent continuity between fills, making it efficient for processing multiple samples with the same solvent.</p> Example <p>workflow.prepare_continuous_flow( ...     solvent_port=3,  # DI water ...     transfer_coil_flush=600 ... ) [SI] Loading vial 50 to replenishment position... [SI] Flushing holding coil with 500 \u00b5L solvent... [SI] Creating 10 \u00b5L air bubble in holding coil... [SI] System ready for continuous flow operations</p>"},{"location":"api-reference/sia-workflows/#SIA_API.methods.prepared_methods.PreparedSIMethods.prepare_batch_flow","title":"prepare_batch_flow","text":"<pre><code>prepare_batch_flow(solvent_port: int, waste_vial: Optional[int] = None, bubble_volume: int = 10, transfer_coil_volume: Optional[int] = None, coil_flush: int = 150, speed: Optional[int] = None, verbose: Optional[bool] = None) -&gt; None\n</code></pre> <p>Prepare system for batch flow (discontinuous) filling operations.</p> <p>Batch flow mode uses air-driven dispensing where the transfer line is filled with air rather than solvent. This mode is suitable for single fills or when changing solvents between operations, as it provides complete separation between different solutions.</p> <p>Parameters:</p> Name Type Description Default <code>solvent_port</code> <code>int</code> <p>Port number connected to solvent reservoir</p> required <code>waste_vial</code> <code>Optional[int]</code> <p>Waste vial number (uses config default if None)</p> <code>None</code> <code>bubble_volume</code> <code>int</code> <p>Air bubble volume in \u00b5L</p> <code>10</code> <code>transfer_coil_volume</code> <code>Optional[int]</code> <p>Transfer line volume in \u00b5L (uses config default if None)</p> <code>None</code> <code>coil_flush</code> <code>int</code> <p>Volume for coil flushing in \u00b5L</p> <code>150</code> <code>speed</code> <code>Optional[int]</code> <p>Flow rate in \u00b5L/min (uses config.speed_slow if None)</p> <code>None</code> <code>verbose</code> <code>Optional[bool]</code> <p>Show status messages (uses config.verbose if None)</p> <code>None</code> Note <p>After this preparation, use batch_fill() methods for sample dispensing. Each fill operation is independent, with air separation preventing cross-contamination between different solvents or samples.</p> Example <p>workflow.prepare_batch_flow( ...     solvent_port=3,  # DI water port ...     transfer_coil_volume=600 ... ) PREPARING BATCH FLOW (Solvent Port: 3) [SI] Loading vial 50 to replenishment position... [SI] Flushing transfer loop with 150 \u00b5L... [SI] Creating 10 \u00b5L air bubble in holding coil... [SI] Filling transfer line with 600 \u00b5L air... [SI] System ready for batch flow operations</p>"},{"location":"api-reference/sia-workflows/#SIA_API.methods.prepared_methods.PreparedSIMethods.continuous_fill","title":"continuous_fill","text":"<pre><code>continuous_fill(vial: int, volume: int, solvent_port: int, flush_needle: Optional[int] = None, wash_vial: Optional[int] = None, speed: Optional[int] = None, verbose: Optional[bool] = None) -&gt; None\n</code></pre> <p>Execute continuous flow filling operation.</p> <p>Performs sample filling using continuous solvent flow from the reservoir through the holding coil to the target vial. This method is efficient for multiple fills with the same solvent and provides consistent flow characteristics.</p> <p>Parameters:</p> Name Type Description Default <code>vial</code> <code>int</code> <p>Target vial number (1-50)</p> required <code>volume</code> <code>int</code> <p>Dispensing volume in \u00b5L</p> required <code>solvent_port</code> <code>int</code> <p>Port number connected to solvent reservoir</p> required <code>flush_needle</code> <code>Optional[int]</code> <p>Optional needle flush volume in \u00b5L (for cleaning)</p> <code>None</code> <code>wash_vial</code> <code>Optional[int]</code> <p>Vial for needle washing (uses config default if None)</p> <code>None</code> <code>speed</code> <code>Optional[int]</code> <p>Flow rate in \u00b5L/min (uses config.speed_normal if None)</p> <code>None</code> <code>verbose</code> <code>Optional[bool]</code> <p>Show status messages (uses config.verbose if None)</p> <code>None</code> Note <p>The system must first be prepared using prepare_continuous_flow(). Large volumes are automatically split into multiple syringe cycles.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If volume is negative or vial number is invalid</p> Example <p>workflow.continuous_fill( ...     vial=15,  ...     volume=750,  ...     solvent_port=3, ...     flush_needle=50 ... ) [SI] Continuous fill: Vial 15, Volume 750 \u00b5L, Port 3 [SI] Loading vial 15 to replenishment position... [SI] Cycle 1/2: Aspirating 500 \u00b5L from port 3... [SI] Cycle 1/2: Dispensing 500 \u00b5L to vial 15... [SI] Cycle 2/2: Aspirating 300 \u00b5L from port 3... [SI] Cycle 2/2: Dispensing 250 \u00b5L, keeping 50 \u00b5L for flush... [SI] Cleaning needle with 50 \u00b5L in vial 48... [SI] Continuous fill of vial 15 completed (750 \u00b5L)</p>"},{"location":"api-reference/sia-workflows/#SIA_API.methods.prepared_methods.PreparedSIMethods.batch_fill","title":"batch_fill","text":"<pre><code>batch_fill(vial: int, volume: int, solvent_port: int, transfer_line_volume: Optional[int] = None, bubble_volume: int = 10, flush_needle: Optional[int] = None, speed: Optional[int] = None, unload: bool = True, wait: Optional[int] = None, verbose: Optional[bool] = None) -&gt; None\n</code></pre> <p>Execute batch flow (discontinuous) filling operation.</p> <p>Performs sample filling using batch (discontinuous) flow where solvent is first loaded into the holding coil with an air bubble, then pushed to the target vial using air pressure. This provides complete isolation between different solutions.</p> <p>Parameters:</p> Name Type Description Default <code>vial</code> <code>int</code> <p>Target vial number (1-50)</p> required <code>volume</code> <code>int</code> <p>Dispensing volume in \u00b5L</p> required <code>solvent_port</code> <code>int</code> <p>Port number connected to solvent reservoir</p> required <code>transfer_line_volume</code> <code>Optional[int]</code> <p>Volume of transfer line (uses config default if None)</p> <code>None</code> <code>bubble_volume</code> <code>int</code> <p>Air bubble volume for separation</p> <code>10</code> <code>flush_needle</code> <code>Optional[int]</code> <p>Optional needle flush volume in \u00b5L</p> <code>None</code> <code>speed</code> <code>Optional[int]</code> <p>Flow rate in \u00b5L/min (uses config.speed_normal if None)</p> <code>None</code> <code>unload</code> <code>bool</code> <p>Whether to unload vial after filling</p> <code>True</code> <code>wait</code> <code>Optional[int]</code> <p>Optional wait time after dispensing (seconds)</p> <code>None</code> <code>verbose</code> <code>Optional[bool]</code> <p>Show status messages (uses config.verbose if None)</p> <code>None</code> Note <p>The system must first be prepared using prepare_batch_flow(). Large volumes are automatically split into multiple cycles.</p> Example <p>workflow.batch_fill( ...     vial=20, ...     volume=400, ...     solvent_port=5,  # Methanol ...     bubble_volume=15, ...     wait=2 ... ) [SI] Batch fill: Vial 20, Volume 400 \u00b5L, Port 5 [SI] Loading vial 20 to replenishment position... [SI] Aspirating 15 \u00b5L air bubble... [SI] Cycle 1/1: Aspirating 400 \u00b5L from port 5... [SI] Cycle 1/1: Transferring to line... [SI] Dispensing air bubble... [SI] Pushing with 600 \u00b5L air at high speed... [SI] Dispensing to vial 20... [SI] Waiting 2 seconds... [SI] Batch fill of vial 20 completed (400 \u00b5L)</p>"},{"location":"api-reference/sia-workflows/#SIA_API.methods.prepared_methods.PreparedSIMethods.batch_fill_multiple_solvents","title":"batch_fill_multiple_solvents","text":"<pre><code>batch_fill_multiple_solvents(vial: int, solvent_ports: List[int], volumes: List[int], air_push_volume: int = 15, transfer_line_volume: Optional[int] = None, speed: Optional[int] = None, solvent_speeds: Optional[List[int]] = None, air_speed: Optional[int] = None, flush_needle: Optional[int] = None, wash_vial: Optional[int] = None, unload: bool = True, wait: Optional[int] = None, verbose: Optional[bool] = None) -&gt; None\n</code></pre> <p>Execute batch filling with multiple solvents from different ports.</p> <p>This advanced method allows sequential dispensing of different solvents into a single vial, with air bubble separation between each solvent. Useful for creating solvent mixtures or adding reagents in sequence.</p> <p>Parameters:</p> Name Type Description Default <code>vial</code> <code>int</code> <p>Target vial number (1-50)</p> required <code>solvent_ports</code> <code>List[int]</code> <p>List of port numbers for different solvents</p> required <code>volumes</code> <code>List[int]</code> <p>List of volumes corresponding to each port (\u00b5L)</p> required <code>air_push_volume</code> <code>int</code> <p>Air bubble volume between solvents (\u00b5L)</p> <code>15</code> <code>transfer_line_volume</code> <code>Optional[int]</code> <p>Volume for final air push (uses config default if None)</p> <code>None</code> <code>speed</code> <code>Optional[int]</code> <p>Default flow rate for liquid handling (\u00b5L/min)</p> <code>None</code> <code>solvent_speeds</code> <code>Optional[List[int]]</code> <p>Optional list of speeds for each solvent (\u00b5L/min)</p> <code>None</code> <code>air_speed</code> <code>Optional[int]</code> <p>Flow rate for air aspiration (uses config.speed_air if None)</p> <code>None</code> <code>flush_needle</code> <code>Optional[int]</code> <p>Optional needle flush volume (\u00b5L)</p> <code>None</code> <code>wash_vial</code> <code>Optional[int]</code> <p>Vial for needle washing (uses config default if None)</p> <code>None</code> <code>unload</code> <code>bool</code> <p>Whether to unload vial after filling</p> <code>True</code> <code>wait</code> <code>Optional[int]</code> <p>Optional wait time after dispensing (seconds)</p> <code>None</code> <code>verbose</code> <code>Optional[bool]</code> <p>Show status messages (uses config.verbose if None)</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If port and volume lists don't match, or volumes are invalid</p> Example <p>workflow.batch_fill_multiple_solvents( ...     vial=25, ...     solvent_ports=[3, 5, 6],  # DI water, methanol, buffer ...     volumes=[300, 150, 50],   # Different volumes for each ...     solvent_speeds=[2000, 1500, 1000]  # Custom speeds ... ) [SI] Multi-solvent batch fill: Vial 25, Total volume 500 \u00b5L from 3 ports [SI] Loading vial 25 to replenishment position... [SI] Solvent 1/3: Aspirating 15 \u00b5L air bubble... [SI] Solvent 1/3: Aspirating 300 \u00b5L from port 3 at 2000 \u00b5L/min... [SI] Solvent 2/3: Aspirating 150 \u00b5L from port 5 at 1500 \u00b5L/min... [SI] Solvent 3/3: Aspirating 50 \u00b5L from port 6 at 1000 \u00b5L/min... [SI] Final air push: 600 \u00b5L at 5000 \u00b5L/min... [SI] Multi-solvent batch fill completed: 500 \u00b5L total in vial 25</p>"},{"location":"api-reference/sia-workflows/#SIA_API.methods.prepared_methods.PreparedSIMethods.prepare_for_liquid_homogenization","title":"prepare_for_liquid_homogenization","text":"<pre><code>prepare_for_liquid_homogenization(waste_vial: Optional[int] = None, transfer_line_volume: Optional[int] = None, meoh_flush_volume: Optional[int] = 20, air_bubble: Optional[int] = None, verbose: Optional[bool] = None) -&gt; None\n</code></pre> <p>Prepare system for liquid-based homogenization operations.</p> <p>This procedure flushes the transfer line and creates a protective air bubble in the holding coil. Used before liquid homogenization to ensure a clean system and prevent contamination of the holding coil.</p> <p>Parameters:</p> Name Type Description Default <code>waste_vial</code> <code>Optional[int]</code> <p>Waste vial number (uses config default if None)</p> <code>None</code> <code>transfer_line_volume</code> <code>Optional[int]</code> <p>Volume to flush from transfer line (\u00b5L)</p> <code>None</code> <code>meoh_flush_volume</code> <code>Optional[int]</code> <p>Optional methanol flush volume (\u00b5L), None to skip</p> <code>20</code> <code>air_bubble</code> <code>Optional[int]</code> <p>Air bubble volume in holding coil (\u00b5L)</p> <code>None</code> <code>verbose</code> <code>Optional[bool]</code> <p>Show status messages (uses config.verbose if None)</p> <code>None</code> Example <p>workflow.prepare_for_liquid_homogenization(verbose=True) [SI] Preparing for liquid homogenization... [SI] Loading vial 50 to replenishment position... [SI] Flushing transfer line (600 \u00b5L)... [SI] Adding methanol flush (20 \u00b5L)... [SI] Creating air bubble (30 \u00b5L) in holding coil... [SI] System ready for liquid homogenization</p>"},{"location":"api-reference/sia-workflows/#SIA_API.methods.prepared_methods.PreparedSIMethods.homogenize_by_liquid_mixing","title":"homogenize_by_liquid_mixing","text":"<pre><code>homogenize_by_liquid_mixing(vial: int, volume_aspirate: Optional[int] = None, num_cycles: Optional[int] = None, aspirate_speed: Optional[int] = None, dispense_speed: Optional[int] = None, wait_after_aspirate: Optional[float] = None, wait_after_dispense: Optional[float] = None, air_flush: Optional[int] = 10, clean_after: Optional[bool] = None, cleaning_solution_volume: Optional[int] = None, verbose: Optional[bool] = None) -&gt; None\n</code></pre> <p>Homogenize sample by liquid aspiration and dispensing.</p> <p>This gentle homogenization method mixes samples by repeatedly aspirating and dispensing liquid. It's suitable for sensitive samples that might be damaged by vigorous air bubble mixing, and provides precise control over mixing intensity.</p> <p>Parameters:</p> Name Type Description Default <code>vial</code> <code>int</code> <p>Target vial number (1-50)</p> required <code>volume_aspirate</code> <code>Optional[int]</code> <p>Volume to aspirate per cycle (\u00b5L)</p> <code>None</code> <code>num_cycles</code> <code>Optional[int]</code> <p>Number of mixing cycles</p> <code>None</code> <code>aspirate_speed</code> <code>Optional[int]</code> <p>Speed for aspiration (\u00b5L/min)</p> <code>None</code> <code>dispense_speed</code> <code>Optional[int]</code> <p>Speed for dispensing (\u00b5L/min)</p> <code>None</code> <code>wait_after_aspirate</code> <code>Optional[float]</code> <p>Wait time after aspiration (seconds)</p> <code>None</code> <code>wait_after_dispense</code> <code>Optional[float]</code> <p>Wait time after dispensing (seconds)</p> <code>None</code> <code>air_flush</code> <code>Optional[int]</code> <p>Air volume to flush at end (\u00b5L), None to skip</p> <code>10</code> <code>clean_after</code> <code>Optional[bool]</code> <p>Whether to clean transfer line after</p> <code>None</code> <code>cleaning_solution_volume</code> <code>Optional[int]</code> <p>Volume for cleaning (\u00b5L)</p> <code>None</code> <code>verbose</code> <code>Optional[bool]</code> <p>Show status messages (uses config.verbose if None)</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If aspirate volume exceeds syringe capacity</p> Example <p>workflow.homogenize_by_liquid_mixing( ...     vial=15, ...     volume_aspirate=400, ...     num_cycles=3, ...     aspirate_speed=1500, ...     dispense_speed=2000, ...     verbose=True ... ) [SI] Loading vial 15 for liquid homogenization... [SI] Cycle 1/3: Aspirating 400 \u00b5L at 1500 \u00b5L/min... [SI] Cycle 1/3: Dispensing at 2000 \u00b5L/min... [SI] Cycle 2/3: Aspirating 400 \u00b5L at 1500 \u00b5L/min... [SI] Cycle 2/3: Dispensing at 2000 \u00b5L/min... [SI] Cycle 3/3: Aspirating 400 \u00b5L at 1500 \u00b5L/min... [SI] Cycle 3/3: Dispensing at 2000 \u00b5L/min... [SI] Flushing needle with 10 \u00b5L air... [SI] Liquid homogenization of vial 15 completed</p>"},{"location":"api-reference/sia-workflows/#SIA_API.methods.prepared_methods.PreparedSIMethods.homogenize_by_air_mixing","title":"homogenize_by_air_mixing","text":"<pre><code>homogenize_by_air_mixing(vial: int, volume_aspirate: Optional[int] = None, num_cycles: Optional[int] = None, aspirate_speed: Optional[int] = None, dispense_speed: Optional[int] = None, air_bubble_volume: Optional[int] = None, wait_between_cycles: float = 3.0, wait_after: float = 0, verbose: Optional[bool] = None) -&gt; None\n</code></pre> <p>Homogenize sample using air bubble mixing.</p> <p>This vigorous homogenization method creates air bubbles in the liquid for aggressive mixing. The air bubbles create turbulence and shearing forces that are effective for viscous samples or when thorough mixing is required.</p> <p>Parameters:</p> Name Type Description Default <code>vial</code> <code>int</code> <p>Target vial number (1-50)</p> required <code>volume_aspirate</code> <code>Optional[int]</code> <p>Liquid volume to aspirate per cycle (\u00b5L)</p> <code>None</code> <code>num_cycles</code> <code>Optional[int]</code> <p>Number of mixing cycles</p> <code>None</code> <code>aspirate_speed</code> <code>Optional[int]</code> <p>Speed for liquid aspiration (\u00b5L/min)</p> <code>None</code> <code>dispense_speed</code> <code>Optional[int]</code> <p>Speed for dispensing (\u00b5L/min)</p> <code>None</code> <code>air_bubble_volume</code> <code>Optional[int]</code> <p>Air volume per cycle (\u00b5L)</p> <code>None</code> <code>wait_between_cycles</code> <code>float</code> <p>Wait time between cycles for bubble mixing (seconds)</p> <code>3.0</code> <code>wait_after</code> <code>float</code> <p>Final wait time after homogenization (seconds)</p> <code>0</code> <code>verbose</code> <code>Optional[bool]</code> <p>Show status messages (uses config.verbose if None)</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If total volume exceeds syringe capacity</p> Example <p>workflow.homogenize_by_air_mixing( ...     vial=22, ...     volume_aspirate=300, ...     air_bubble_volume=50, ...     num_cycles=2, ...     wait_between_cycles=8.0, ...     verbose=True ... ) [SI] Loading vial 22 for air bubble homogenization... [SI] Cycle 1/2: Aspirating 50 \u00b5L air... [SI] Cycle 1/2: Aspirating 300 \u00b5L liquid at 1500 \u00b5L/min... [SI] Cycle 1/2: Waiting 8.0 seconds for bubble mixing... [SI] Cycle 1/2: Dispensing mixture at 1500 \u00b5L/min... [SI] Cycle 2/2: Aspirating 50 \u00b5L air... [SI] Cycle 2/2: Aspirating 300 \u00b5L liquid at 1500 \u00b5L/min... [SI] Cycle 2/2: Waiting 8.0 seconds for bubble mixing... [SI] Cycle 2/2: Dispensing mixture at 1500 \u00b5L/min... [SI] Air bubble homogenization of vial 22 completed</p>"},{"location":"api-reference/sia-workflows/#SIA_API.methods.prepared_methods.PreparedSIMethods.clean_transfer_line_after_homogenization","title":"clean_transfer_line_after_homogenization","text":"<pre><code>clean_transfer_line_after_homogenization(waste_vial: Optional[int] = None, flush_volume: Optional[int] = 70, air_bubble: Optional[int] = 50, cleaning_solution_volume: Optional[int] = None, cleaning_solution_vial: Optional[int] = None, verbose: Optional[bool] = None) -&gt; None\n</code></pre> <p>Clean transfer line after homogenization operations.</p> <p>This comprehensive cleaning procedure removes sample residues from the transfer line using optional chemical cleaning followed by thorough rinsing and air bubble creation for system protection.</p> <p>Parameters:</p> Name Type Description Default <code>waste_vial</code> <code>Optional[int]</code> <p>Waste vial number (uses config default if None)</p> <code>None</code> <code>flush_volume</code> <code>Optional[int]</code> <p>Volume to flush from syringe (\u00b5L)</p> <code>70</code> <code>air_bubble</code> <code>Optional[int]</code> <p>Air bubble volume for holding coil protection (\u00b5L)</p> <code>50</code> <code>cleaning_solution_volume</code> <code>Optional[int]</code> <p>Volume of cleaning solution (\u00b5L), None to skip</p> <code>None</code> <code>cleaning_solution_vial</code> <code>Optional[int]</code> <p>Vial with cleaning solution (uses config default if None)</p> <code>None</code> <code>verbose</code> <code>Optional[bool]</code> <p>Show status messages (uses config.verbose if None)</p> <code>None</code> Example <p>workflow.clean_transfer_line_after_homogenization( ...     cleaning_solution_volume=350, ...     verbose=True ... ) [SI] Aspirating air bubble before cleaning... [SI] Loading cleaning solution vial 47... [SI] Cleaning with 350 \u00b5L solution... [SI] Waiting 3.0 seconds for cleaning reaction... [SI] Flushing 70 \u00b5L to waste... [SI] Creating 50 \u00b5L air bubble in holding coil... [SI] Transfer line cleaning completed</p>"},{"location":"api-reference/sia-workflows/#SIA_API.methods.prepared_methods.PreparedSIMethods.flush_transfer_line_to_waste","title":"flush_transfer_line_to_waste","text":"<pre><code>flush_transfer_line_to_waste(transfer_line_volume: Optional[int] = None, air_push: int = 30, verbose: Optional[bool] = None) -&gt; None\n</code></pre> <p>Quick flush of transfer line contents to waste.</p> <p>Simple utility method to empty the transfer line without chemical cleaning. Useful for quick changeovers between incompatible solvents or when removing samples before system shutdown.</p> <p>Parameters:</p> Name Type Description Default <code>transfer_line_volume</code> <code>Optional[int]</code> <p>Volume to flush (\u00b5L, uses config default if None)</p> <code>None</code> <code>air_push</code> <code>int</code> <p>Initial air volume for pushing (\u00b5L)</p> <code>30</code> <code>verbose</code> <code>Optional[bool]</code> <p>Show status messages (uses config.verbose if None)</p> <code>None</code> Example <p>workflow.flush_transfer_line_to_waste(verbose=True) [SI] Flushing transfer line to waste (600 \u00b5L)... [SI] Transfer line flushed to waste</p>"},{"location":"api-reference/sia-workflows/#SIA_API.methods.prepared_methods.PreparedSIMethods.get_system_status","title":"get_system_status","text":"<pre><code>get_system_status() -&gt; Dict[str, Any]\n</code></pre> <p>Get current system status and configuration.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing system configuration and status information</p> Example <p>status = workflow.get_system_status() print(f\"Syringe size: {status['syringe_size']} \u00b5L\") print(f\"Current speed setting: {status['config']['speed_normal']} \u00b5L/min\") print(f\"Interactive terminal: {status['interactive_terminal']}\")</p>"},{"location":"api-reference/sia-workflows/#SIA_API.methods.prepared_methods.PreparedSIMethods.update_config","title":"update_config","text":"<pre><code>update_config(**kwargs) -&gt; None\n</code></pre> <p>Update configuration parameters.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Configuration parameters to update</p> <code>{}</code> Example <p>workflow.update_config( ...     speed_normal=1800, ...     verbose=False, ...     homogenization_liquid_cycles=3 ... )</p>"},{"location":"appendix/faq/","title":"Frequently Asked Questions","text":"<p>Common questions and solutions for SI-CE integration workflows.</p>"},{"location":"appendix/faq/#getting-started","title":"\ud83d\ude80 Getting Started","text":""},{"location":"appendix/faq/#what-is-si-ce","title":"What is SI-CE?","text":"<p>Quick Answer: SI-CE is a Python package that integrates Sequential Injection (SI) with Capillary Electrophoresis (CE) through Agilent ChemStation for complete laboratory automation.</p> <p>Detailed Explanation:  This comprehensive system enables:</p> <ul> <li>Automated sample preparation - Streamlined sample handling and preparation workflows</li> <li>CE instrument control - Direct communication with ChemStation for method execution</li> <li>Batch analysis workflows - Process multiple samples with minimal manual intervention  </li> <li>Complete analytical automation - End-to-end automation from sample prep to data analysis</li> </ul> <p>Related Topics: Getting Started, System Architecture</p>"},{"location":"appendix/faq/#what-hardware-is-compatible","title":"What hardware is compatible?","text":"<p>Quick Answer: The system supports Agilent CE systems with OpenLab ChemStation C.01.07 SR2 and VICI/Valco valve selectors.</p> <p>Detailed Explanation:</p> <p>Supported ChemStation Systems:</p> <ul> <li>Developed and tested on OpenLab ChemStation ver. C.01.07 SR2 [255] with CE 7100</li> <li>Interface functionality tested on other ChemStation versions, but full compatibility is not guaranteed</li> <li>Not compatible with OpenLab CDS 2.x due to absence of command processor and lack of macro support</li> </ul> <p>SIA Components:</p> <ul> <li>VICI/Valco valve selectors and switching systems</li> <li>Compatible third-party devices with similar command protocols</li> <li>Additional components can be integrated in future releases</li> </ul>"},{"location":"appendix/faq/#do-i-need-programming-experience","title":"Do I need programming experience?","text":"<p>Quick Answer: Basic Python knowledge is helpful but not required - the package includes high-level methods and copy-paste examples.</p> <p>Detailed Explanation:</p> <p>The package is designed for accessibility with:</p> <ul> <li>High-level workflow methods - Simple functions for complex operations</li> <li>Pre-built analytical procedures - Ready-to-use templates for common analyses</li> <li>Copy-paste examples - Working code snippets you can adapt immediately</li> <li>Comprehensive documentation - Detailed guides and tutorials</li> </ul> <p>AI-Assisted Development: You can leverage generative AI tools (ChatGPT, Claude, etc.) by providing them with the repository link. These tools can help you create custom methods tailored to your specific needs. However, always thoroughly test any AI-generated code before implementation in production workflows.</p> <p>Code Example: <pre><code># Simple one-line operations\nworkflow.continuous_fill(vial=15, volume=1500, solvent_port=5)\nworkflow.homogenize_sample(vial=15, speed=1000, time=30)\n</code></pre></p> <p>Related Topics: First Analysis Tutorial, Basic Operations</p>"},{"location":"appendix/faq/#communication-and-control","title":"\ud83d\udd0c Communication and Control","text":""},{"location":"appendix/faq/#how-can-i-monitor-chemstation-communication","title":"How can I monitor ChemStation communication?","text":"<p>Quick Answer: Enable verbose logging or monitor communication files directly to see all commands and responses.</p> <p>Detailed Explanation: The system uses file-based communication that can be monitored in real-time for debugging and optimization.</p> <p>Code Example: <pre><code># Enable detailed logging\nconfig = CommunicationConfig(verbose=True)\napi = ChemstationAPI(config)\n\n# Monitor communication files directly (PowerShell)\n# Get-Content \"communication_files\\command\" -Wait\n</code></pre></p> <p>Related Topics: File Protocol, Troubleshooting</p>"},{"location":"appendix/faq/#why-does-communication-occasionally-drop","title":"Why does communication occasionally drop?","text":"<p>Quick Answer: Communication drops typically occur when error dialogs appear in ChemStation or when timeout conditions aren't met.</p> <p>Detailed Explanation: Communication drops have been observed in specific cases:</p> <ol> <li> <p>Error dialog appears in ChemStation:</p> <p>May occur when starting a method while another is still running Timeout not met for command execution (see <code>validation.get_vialtable()</code> which uses higher timeout for longer macro execution) After closing the error dialog, operation can continue Always use validation before commands to ensure proper timing</p> </li> <li> <p>Communication deadlock:</p> <p>Some commands called rapidly in succession may occasionally not receive responses Common with <code>system.status()</code> when checking status repeatedly Implementation includes retry logic (3 attempts before error) If this occurs, simply restart the script</p> </li> </ol> <p>Code Example: <pre><code># Robust status checking with retry logic\ndef get_status_with_retry(api, max_retries=3):\n    for attempt in range(max_retries):\n        try:\n            return api.system.status()\n        except TimeoutError:\n            if attempt == max_retries - 1:\n                raise\n            time.sleep(1)\n</code></pre></p> <p>Related Topic: Communication Protocol</p>"},{"location":"appendix/faq/#can-i-send-custom-commands-to-chemstation","title":"Can I send custom commands to ChemStation?","text":"<p>Quick Answer: Yes, use the <code>send()</code> method to execute any valid ChemStation command directly.</p> <p>Detailed Explanation: The API provides direct access to ChemStation's command processor for advanced operations not covered by high-level methods.</p> <p>Code Example: <pre><code># Read current oven temperature\nresponse = api.send('response$ = VAL$(ObjHdrVal(RCCE1Status[1], \"Temperature_actual\"))')\nprint(f\"Current oven temperature: {response}\u00b0C\")\n\n# Get method path\nmethod_path = api.send(\"response$ = _METHPATH$\")\nprint(f\"Active method: {method_path}\")\n\n# Execute custom macro\napi.send('macro \"C:\\\\custom_macro.mac\"; custom_procedure 15, \"parameter\"')\n</code></pre></p> <p>Related Topics: ChemStation Macros, API Reference</p>"},{"location":"appendix/faq/#capillary-electrophoresis-operations","title":"\u2697\ufe0f Capillary Electrophoresis Operations","text":""},{"location":"appendix/faq/#unable-to-load-vials-into-the-carousel","title":"Unable to load vials into the carousel","text":"<p>Quick Answer: Vial loading fails when the CE system is in an incompatible state or when pressure is applied during run.</p> <p>Detailed Explanation:</p> <p>System State Issues:</p> <p>The carousel may be locked in certain states: - IDLE state: Normal operation - carousel accessible   - RUN state: Analysis in progress - carousel may be locked - Apply pressure in run: If pressure is applied at any time (including additional pressure during analysis), the carousel is locked - Other states: Carousel typically locked for safety</p> <p>Missing Vial Validation: The system cannot locate the specified vial in the carousel.</p> <p>Code Example: <pre><code># Wait for appropriate system state before vial operations\nwhile not api.is_carousel_available():\n    time.sleep(5)  # Wait for system to reach appropriate state\n\n# Validate all required vials are present before starting\nrequired_positions = [1, 2, 3, 5, 8]\nmissing_vials = carousel.validate_vials(required_positions)\nif missing_vials:\n    raise ValueError(f\"Missing vials at positions: {missing_vials}\")\n</code></pre></p> <p>Related Topics: Basic Operations, Validation Module</p>"},{"location":"appendix/faq/#can-i-modify-method-parameters-programmatically","title":"Can I modify method parameters programmatically?","text":"<p>Quick Answer: Yes, method parameters can be modified using ChemStation registry commands, though this feature is experimental.</p> <p>Detailed Explanation: Method parameters are stored in RC{module}Method[1] registers and can be modified directly. During RC.Net log analysis (see ChemStation Macros tutorial), commands for parameter modification were discovered. When these commands are executed, parameters are successfully updated. However, this approach has not been thoroughly tested.</p> <p>Code Example: <pre><code># Example: Modify separation voltage (experimental - test thoroughly)\napi.send('SetObjHdrVal RCCE1Method[1], \"Voltage\", 10')\n\n# Upload method, modify, download\napi.send('UploadRCMethod CE1')\napi.send('SetObjHdrVal RCCE1Method[1], \"Temperature\", 25')\napi.send('DownloadRCMethod CE1')\n</code></pre></p> <p>Additional Resources:</p> <ul> <li>See tutorial/chemstation_scripting section on Registry RCNET</li> <li>Reference implementation: HPLC Method Optimization GUI</li> </ul> <p>Related Topics: ChemStation Macros, Methods Module</p>"},{"location":"appendix/faq/#sequential-injection-components","title":"\ud83d\udc89 Sequential Injection Components","text":""},{"location":"appendix/faq/#can-i-integrate-additional-components","title":"Can I integrate additional components?","text":"<p>Quick Answer: Yes, additional components (stirrers, pumps, etc.) can be integrated using the common communication interface in SIA_API/Core.</p> <p>Detailed Explanation:</p> <ul> <li>The SIA_API/Core provides a common communication interface for sending and receiving commands via COM port</li> <li>Most SI components like pumps, valves, or microcontrollers (Arduino, ESP32) communicate through this interface</li> <li>To add new components, you need to identify their control commands and test them thoroughly before deployment</li> </ul> <p>Background: Current control modules were developed from the source code of CocoSoft 7.2, which could control additional components. Unfortunately, this software is no longer accessible.</p> <p>Code Example: <pre><code># Example: Adding a custom stirrer component\nclass StirrerController:\n    def __init__(self, port, baudrate=9600):\n        self.device = SerialDevice(port, baudrate)\n\n    def set_speed(self, rpm):\n        self.device.send_command(f\"SPEED {rpm}\")\n\n    def start(self):\n        self.device.send_command(\"START\")\n</code></pre></p> <p>Related Topics: Port Configuration, Device Integration</p>"},{"location":"appendix/faq/#getting-syringe-volume-tracking-errors","title":"Getting syringe volume tracking errors","text":"<p>Quick Answer: Check current syringe volume, reset tracking if needed, or perform complete reinitialization.</p> <p>Detailed Explanation:</p> <p>The API automatically tracks syringe volume but errors can occur due to: - Mismatch between actual and tracked volume - Incomplete operations - Communication interruptions</p> <p>Code Example: <pre><code># Check current syringe volume counter\nsyringe.print_volume_in_syringe()\n\n# Reset volume tracking - empty syringe completely\nsyringe.dispense()  # Empty and reset internal counter\n\n# Get actual volume and update counter\nsyringe.get_actual_volume()  # Return drawn volume and overwrite counter\n\n# Complete reinitialization\nsyringe.initialize()  # Full reset to home position\n</code></pre></p> <p>Related Topics: Basic SIA Operations, Troubleshooting</p>"},{"location":"appendix/faq/#troubleshooting-guide","title":"\ud83d\udee0\ufe0f Troubleshooting Guide","text":""},{"location":"appendix/faq/#systematic-diagnosis-approach","title":"Systematic Diagnosis Approach","text":"<p>Quick Answer: Follow the diagnostic sequence: verify connections \u2192 validate software \u2192 analyze errors \u2192 test components.</p> <p>Detailed Explanation:</p> <p>1. Verify Physical Connections</p> <ul> <li>Confirm power status on all devices</li> <li>Check cable connections and COM port assignments</li> <li>Test basic communication with each component</li> </ul> <p>2. Validate Software Prerequisites</p> <ul> <li>ChemStation running and responsive</li> <li>Required macros loaded and active</li> <li>All specified vials present in carousel</li> <li>Target methods exist and are accessible</li> </ul> <p>3. Analyze Error Messages</p> <ul> <li>Note specific exception types and error codes</li> <li>Look for recurring error patterns</li> <li>Enable verbose mode for detailed diagnostics</li> </ul> <p>Code Example: <pre><code># Component-level testing\ndef test_all_components():\n    results = {}\n\n    # Test syringe\n    try:\n        syringe.initialize()\n        results['syringe'] = \"\u2713 OK\"\n    except Exception as e:\n        results['syringe'] = f\"\u2717 Error: {e}\"\n\n    # Test valve\n    try:\n        valve.position(1)\n        results['valve'] = \"\u2713 OK\"\n    except Exception as e:\n        results['valve'] = f\"\u2717 Error: {e}\"\n\n    # Test ChemStation\n    try:\n        response = api.send(\"response$ = _METHPATH$\")\n        results['chemstation'] = f\"\u2713 OK: {response}\"\n    except Exception as e:\n        results['chemstation'] = f\"\u2717 Error: {e}\"\n\n    return results\n</code></pre></p> <p>Related Topics: Troubleshooting Guide, Error Handling</p>"},{"location":"appendix/faq/#common-issues-quick-reference","title":"Common Issues Quick Reference","text":"<p>Quick Answer: 90% of issues stem from: macro not loaded, incorrect COM ports, missing vials/methods, or insufficient timeouts.</p> <p>Most Frequent Problems:</p> <ol> <li>ChemStation macro not running \u2192 Reload macro in ChemStation command line</li> <li>Incorrect COM port configuration \u2192 Use device manager to verify port assignments  </li> <li>Missing vials or methods \u2192 Implement validation checks at workflow start</li> <li>Timeout settings too short \u2192 Increase timeout values for complex operations</li> <li>Volume tracking errors \u2192 Reset syringe and reinitialize volume counter</li> </ol> <p>Code Example: <pre><code># Complete system reset procedure\ndef full_system_reset():\n    print(\"Performing full system reset...\")\n\n    # 1. Abort any running operations\n    try:\n        api.system.abort_run()\n    except:\n        pass\n\n    # 2. Unload all vials\n    for position in [\"inlet\", \"outlet\", \"replenishment\"]:\n        try:\n            api.ce.unload_vial_from_position(position)\n        except:\n            pass\n\n    # 3. Reinitialize\n    time.sleep(5)\n    api = ChemstationAPI()\n    syringe.initialize()\n\n    return api\n</code></pre></p> <p>Related Topics: Getting Started, System Recovery</p>"},{"location":"appendix/faq/#getting-support","title":"\ud83d\udcda Getting Support","text":""},{"location":"appendix/faq/#available-resources","title":"Available Resources","text":"<ul> <li>GitHub Issues: Report bugs, request features, and track development</li> <li>Documentation: Comprehensive guides covering all package functionality</li> <li>Tutorial Examples: Working code examples for common workflows</li> </ul>"},{"location":"appendix/faq/#reporting-issues-effectively","title":"Reporting Issues Effectively","text":"<p>When requesting support, please include:</p> <ul> <li>Environment Details: Python version, package version, operating system</li> <li>Hardware Configuration: CE model, SIA components, COM port assignments  </li> <li>Error Information: Complete error messages and stack traces</li> <li>Minimal Example: Simplified code that reproduces the issue</li> <li>Context: What you were trying to accomplish and what happened instead</li> </ul> <p>Quick Resolution Tips</p> <p>Always check these fundamentals first: 1. ChemStation macro properly loaded and running 2. COM port conflicts or incorrect assignments 3. Missing physical components (vials, methods) 4. Insufficient timeout values for complex operations</p>"},{"location":"chemstation-api/ce/","title":"CE Module - Capillary Electrophoresis Control","text":"<p>Control of Agilent 7100 CE instrument for vial handling and capillary operations.</p>"},{"location":"chemstation-api/ce/#overview","title":"Overview","text":"<p>The CE module provides direct control of:</p> <ul> <li>Carousel system: 50 positions (1-48 samples, 49-50 parking)</li> <li>Lift positions: inlet (positive electrode), outlet (ground), replenishment  </li> <li>Capillary operations: conditioning, flushing, pressure control</li> </ul> <p>Hardware: Agilent 7100 CE system with automated carousel</p> <p>Module ID: CE1</p>"},{"location":"chemstation-api/ce/#vial-management","title":"Vial Management","text":""},{"location":"chemstation-api/ce/#load_vial_to_position","title":"load_vial_to_position()","text":"<p>Load vial from carousel to specified lift position.</p> <pre><code>api.ce.load_vial_to_position(vial, position=\"replenishment\")\n</code></pre> <p>Parameters:</p> <ul> <li><code>vial</code> (int): Carousel position number (1-48 for samples, 49 for parking)</li> <li><code>position</code> (str): Target lift position</li> <li><code>\"inlet\"</code>: Sample injection, positive electrode contact</li> <li><code>\"outlet\"</code>: Waste collection, negative electrode (ground)  </li> <li><code>\"replenishment\"</code>: Buffer system maintenance</li> </ul> <p>Examples: <pre><code># Load sample for analysis\napi.ce.load_vial_to_position(15, \"inlet\")\n\n# Load waste collection vial\napi.ce.load_vial_to_position(20, \"outlet\") \n\n# Load buffer vial (default position)\napi.ce.load_vial_to_position(1)\n</code></pre></p> <p>Important:</p> <ul> <li>Carousel operations only work during voltage application (analysis runtime)</li> <li>Completely blocked during pressure operations</li> <li>Vial must be present in carousel</li> </ul>"},{"location":"chemstation-api/ce/#unload_vial_from_position","title":"unload_vial_from_position()","text":"<p>Return vial from lift position back to its carousel slot.</p> <pre><code>api.ce.unload_vial_from_position(position=\"replenishment\")\n</code></pre> <p>Parameters:</p> <ul> <li><code>position</code> (str): Lift position to unload from</li> <li><code>\"inlet\"</code>: Return sample vial</li> <li><code>\"outlet\"</code>: Return waste vial</li> <li><code>\"replenishment\"</code>: Return buffer vial</li> </ul> <p>Examples: <pre><code># Return vials after analysis\napi.ce.unload_vial_from_position(\"inlet\")\napi.ce.unload_vial_from_position(\"outlet\")\n\n# Return buffer vial (default)\napi.ce.unload_vial_from_position()\n</code></pre></p> <p>Warning:  NEVER unload inlet or outlet vials during voltage application! Can cause severe electrical damage to electrode system. Replenishment vials can be safely unloaded during voltage application.</p>"},{"location":"chemstation-api/ce/#get_vial_state","title":"get_vial_state()","text":"<p>Get current position and state of a vial within the CE system.</p> <pre><code>state = api.ce.get_vial_state(vial)\n</code></pre> <p>Parameters:</p> <ul> <li><code>vial</code> (int): Vial position number to check (1-50)</li> </ul> <p>Returns:</p> <ul> <li><code>\"carousel\"</code>: Available in tray position, ready for loading</li> <li><code>\"inlet\"</code>: At inlet lift (sample/buffer introduction)</li> <li><code>\"outlet\"</code>: At outlet lift (waste/collection)</li> <li><code>\"replenishment\"</code>: At replenishment lift (buffer maintenance)</li> <li><code>\"out_system\"</code>: Not detected anywhere in the system</li> </ul> <p>Examples: <pre><code># Check sample preparation status\nif api.ce.get_vial_state(15) == \"inlet\":\n    print(\"Sample ready for injection\")\n\n# Monitor multiple vials\nfor vial in [10, 11, 12]:\n    print(f\"Vial {vial}: {api.ce.get_vial_state(vial)}\")\n\n# Find empty positions\nfor pos in range(1, 49):\n    if api.ce.get_vial_state(pos) == \"out_system\":\n        print(f\"Position {pos} is empty\")\n</code></pre></p>"},{"location":"chemstation-api/ce/#capillary-operations","title":"Capillary Operations","text":""},{"location":"chemstation-api/ce/#flush_capillary","title":"flush_capillary()","text":"<p>Perform high-pressure capillary conditioning flush.</p> <pre><code>api.ce.flush_capillary(time_flush, wait=True)\n</code></pre> <p>Parameters:</p> <ul> <li><code>time_flush</code> (float): Flush duration in seconds</li> <li><code>wait</code> (bool): If True, shows progress bar and waits for completion. If False, starts flush and returns immediately.</li> </ul> <p>Examples: <pre><code># Standard conditioning flush\napi.ce.flush_capillary(60.0)\n\n# Extended conditioning with progress\napi.ce.flush_capillary(180.0, wait=True)\n\n# Start flush without waiting\napi.ce.flush_capillary(30.0, wait=False)\n# Continue with other operations...\n</code></pre></p> <p>Notes:</p> <ul> <li>Uses maximum system pressure (~950 mbar)</li> <li>Buffer drawn from inlet vial, expelled through outlet</li> <li>Carousel completely blocked during operation</li> <li>Requires adequate buffer volume</li> </ul>"},{"location":"chemstation-api/ce/#apply_pressure_to_capillary","title":"apply_pressure_to_capillary()","text":"<p>Apply precise pressure to capillary for controlled operations.</p> <pre><code>api.ce.apply_pressure_to_capillary(pressure, time_pressure, wait=True)\n</code></pre> <p>Parameters:</p> <ul> <li><code>pressure</code> (float): Pressure in mbar (range: -100 to +100)</li> <li>Positive: Pushes liquid from inlet toward outlet</li> <li>Negative: Creates vacuum, pulls liquid toward inlet</li> <li><code>time_pressure</code> (float): Duration of pressure application in seconds</li> <li><code>wait</code> (bool): If True, shows progress bar and waits for completion</li> </ul> <p>Examples: <pre><code># Hydrodynamic injection\napi.ce.apply_pressure_to_capillary(50.0, 5.0)\n\n# Vacuum rinse\napi.ce.apply_pressure_to_capillary(-30.0, 10.0)\n\n# Gentle conditioning\napi.ce.apply_pressure_to_capillary(20.0, 30.0, wait=True)\n\n# Start pressure without waiting\napi.ce.apply_pressure_to_capillary(75.0, 3.0, wait=False)\n</code></pre></p> <p>Notes:</p> <ul> <li>Injection pressure directly affects sample volume and peak shape</li> <li>Carousel blocked during pressure application</li> <li>Position vials beforehand</li> </ul>"},{"location":"chemstation-api/ce/#system-state-dependencies","title":"System State Dependencies","text":"<p>Carousel Access:</p> <ul> <li>Available: During voltage application (analysis runtime)</li> <li>Blocked: During pressure operations, door open, error states</li> </ul> <p>Safety Constraints:</p> <ul> <li>Never manipulate inlet/outlet vials during voltage</li> <li>Always check vial presence before loading operations  </li> <li>Verify carousel availability before batch operations</li> </ul> <p>Pressure Operations:</p> <ul> <li>Block all carousel movement</li> <li>Require inlet vial for source liquid</li> <li>Monitor buffer levels for extended operations</li> </ul>"},{"location":"chemstation-api/file-protocol/","title":"File-Based Communication Protocol","text":"<p>Understanding how Python communicates with ChemStation is essential for troubleshooting and advanced usage. This guide explains the robust file-based protocol that enables reliable command execution between Python and ChemStation.</p>"},{"location":"chemstation-api/file-protocol/#protocol-overview","title":"Protocol Overview","text":"<p>The ChemStation API uses a file-based communication protocol to ensure reliable, bidirectional communication between Python and ChemStation. This approach provides superior reliability compared to direct socket connections, especially in Windows environments where COM interfaces can be unstable.</p>"},{"location":"chemstation-api/file-protocol/#design-inspiration","title":"Design Inspiration","text":"<p>This communication protocol is adapted and enhanced from the excellent work by the Cronin Group at the University of Glasgow. The original implementation can be found at: https://github.com/croningp/analyticallabware/tree/master/AnalyticalLabware/devices/Agilent</p> <p>Our implementation extends this foundation with additional error handling, timeout management, and CE-specific optimizations for improved reliability and functionality.</p>"},{"location":"chemstation-api/file-protocol/#how-it-works","title":"How It Works","text":"<p>The protocol operates through two files that act as communication channels between Python and ChemStation:</p>"},{"location":"chemstation-api/file-protocol/#communication-flow","title":"Communication Flow","text":"<ol> <li>Command Writing: Python formats the command with a unique number and writes it to the command file</li> <li>Macro Monitoring: The ChemStation macro continuously monitors the command file every 200 milliseconds</li> <li>Command Execution: When a new command is detected, the macro reads it and sends it to ChemStation's Command Processor</li> <li>Response Writing: Results are written to the response file with the matching command number</li> <li>Response Reading: Python reads the response file and matches the response to the original command</li> </ol>"},{"location":"chemstation-api/file-protocol/#architecture-benefits","title":"Architecture Benefits","text":"<ul> <li>Reliability: File-based communication eliminates connection timeouts and port conflicts</li> <li>Bidirectional: Full command and response capabilities with proper synchronization</li> <li>Error Handling: Comprehensive error detection and automatic retry mechanisms</li> <li>Cross-Platform: Works consistently across different Windows versions and ChemStation releases</li> </ul>"},{"location":"chemstation-api/file-protocol/#command-format-and-examples","title":"Command Format and Examples","text":""},{"location":"chemstation-api/file-protocol/#basic-commands-no-return-value","title":"Basic Commands (No Return Value)","text":"<p>For commands that perform actions without returning data:</p> <pre><code># Python code\napi.send(\"LoadMethod _METHPATH$, MyMethod.M\")\n\n# Command file content\n123 LoadMethod _METHPATH$, MyMethod.M\n\n# Response file content (indicates successful execution)\n123 None\n</code></pre>"},{"location":"chemstation-api/file-protocol/#commands-with-return-values","title":"Commands with Return Values","text":"<p>To capture return values, prefix the command with <code>response$ =</code>:</p> <pre><code># Python code\nmethod_path = api.send(\"response$ = _METHPATH$\")\nprint(f\"Current method path: {method_path}\")\n\n# Command file content\n124 response$ = _METHPATH$\n\n# Response file content\n124 C:\\Chem32\\1\\Methods\\CE\\Default\\\n</code></pre>"},{"location":"chemstation-api/file-protocol/#file-structure","title":"File Structure","text":"<p>The communication system uses a simple file structure within your project directory:</p> <pre><code>SIA-CE/\n\u2514\u2500\u2500 ChemstationAPI/\n    \u2514\u2500\u2500 core/\n        \u251c\u2500\u2500 ChemPyConnect.mac              # ChemStation communication macro\n        \u2514\u2500\u2500 communication_files/           # Communication directory\n            \u251c\u2500\u2500 command                   # Commands from Python \u2192 ChemStation\n            \u2514\u2500\u2500 response                  # Responses from ChemStation \u2192 Python\n</code></pre>"},{"location":"chemstation-api/file-protocol/#file-content-format","title":"File Content Format","text":"<p>Command File: <pre><code>125 response$ = _METHPATH$\n</code></pre></p> <p>Response File: <pre><code>125 C:\\Chem32\\1\\Methods\\CE\\Migration\\\n</code></pre></p>"},{"location":"chemstation-api/file-protocol/#command-numbering","title":"Command Numbering","text":"<p>The protocol uses sequential command numbers (1-256) to ensure proper command-response matching and prevent confusion when multiple commands are sent rapidly. Numbers automatically wrap around to 1 after reaching the maximum.</p>"},{"location":"chemstation-api/file-protocol/#benefits","title":"Benefits","text":"<ul> <li>Prevents confusion when multiple commands are sent quickly</li> <li>Enables debugging by tracking specific command execution</li> <li>Supports error isolation for failed commands</li> </ul>"},{"location":"chemstation-api/file-protocol/#monitoring-communication","title":"Monitoring Communication","text":""},{"location":"chemstation-api/file-protocol/#enable-verbose-logging","title":"Enable Verbose Logging","text":"<pre><code>from ChemstationAPI.core.communication_config import CommunicationConfig\nfrom ChemstationAPI import ChemstationAPI\n\n# Create configuration with verbose output\nconfig = CommunicationConfig(verbose=True)\napi = ChemstationAPI(config)\n\n# All commands and responses will be logged to console\nmethod_path = api.send(\"response$ = _METHPATH$\")\n\n# Console output:\n# Sending command 1: response$ = _METHPATH$\n# Received response 1: C:\\Chem32\\1\\Methods\\CE\\Migration\\\n</code></pre>"},{"location":"chemstation-api/file-protocol/#quick-troubleshooting","title":"Quick Troubleshooting","text":""},{"location":"chemstation-api/file-protocol/#no-response-received-timeouterror","title":"No Response Received (TimeoutError)","text":"<p>Most common causes:</p> <ol> <li> <p>ChemStation macro not running - The communication macro must be active in ChemStation</p> <p>Solution: In ChemStation command line, execute:    <pre><code>macro \"path\\to\\ChemPyConnect.mac\"; Python_Run\n</code></pre>    Look for \"Start Python communication\" message.</p> </li> <li> <p>Error dialog appeared in ChemStation - Communication is blocked while dialog is open</p> </li> </ol> <p>Solution: Check ChemStation for any open error dialogs or message boxes. Close all dialogs and try again. This commonly occurs when:    - Starting a method while another is running    - Attempting operations on non-existent files    - Hardware communication errors</p> <ol> <li>Incorrect paths in macro - Macro is running but using wrong communication directory</li> </ol> <p>Solution: Check that the path in <code>ChemPyConnect.mac</code> matches your actual communication files directory. The macro contains a hardcoded path that may need updating for your installation.</p>"},{"location":"chemstation-api/file-protocol/#test-communication","title":"Test Communication","text":"<pre><code>try:\n    api.send(\"Print 'Test'\", timeout=1.0)\n    print(\"\u2713 Communication working\")\nexcept TimeoutError:\n    print(\"\u2717 No response - check macro and dialogs\")\n</code></pre>"},{"location":"chemstation-api/file-protocol/#error-detection","title":"Error Detection","text":"<p>The API automatically detects and handles ChemStation errors:</p> <pre><code>try:\n    # Attempt invalid operation\n    api.send(\"LoadMethod _METHPATH$, NonExistentMethod.M\")\nexcept ChemstationError as e:\n    print(f\"ChemStation Error: {e}\")\n    # Output: ERROR: Method file 'NonExistentMethod.M' not found\n</code></pre>"},{"location":"chemstation-api/introduction/","title":"ChemStation API Introduction","text":""},{"location":"chemstation-api/introduction/#what-is-chemstation-api","title":"What is ChemStation API?","text":"<p>The ChemStation API provides a comprehensive Python interface for controlling Agilent ChemStation software and CE instruments. It enables complete automation of capillary electrophoresis systems, eliminating manual intervention in routine analytical workflows through direct communication with ChemStation's Command Processor (CP). The API uses a sophisticated file-based communication protocol to bridge Python applications with ChemStation's native command structure, providing reliable, bidirectional control of all instrument functions.</p> <p>Development &amp; Compatibility: Originally developed and optimized for OpenLab ChemStation version C.01.07 SR2 [255] with Agilent Technologies 7100 Capillary Electrophoresis system, the API has been successfully tested across multiple ChemStation versions (C.01.05-C.01.10), various CE instrument models (7100, G7100A), and Windows operating systems (Windows 7, 10, 11). With minor code modifications, compatibility extends to legacy systems including Windows XP with Python 3.4+.</p>"},{"location":"chemstation-api/introduction/#key-features","title":"Key Features","text":""},{"location":"chemstation-api/introduction/#ce-instrument-control","title":"CE Instrument Control","text":"<ul> <li>Automated vial handling - Load/unload vials between carousel and analysis positions</li> <li>Capillary operations - Conditioning, flushing, and pressure control</li> <li>Position monitoring - Real-time tracking of vial locations and system state</li> <li>Safety validation - Prevent operations during incompatible instrument states</li> </ul>"},{"location":"chemstation-api/introduction/#method-management","title":"Method Management","text":"<ul> <li>Method execution - Load and run CE methods with custom parameters</li> <li>Parameter control - Modify sample information without editing method files</li> <li>File operations - Save, load, and validate method existence</li> <li>Batch execution - Run same method on different samples automatically</li> </ul>"},{"location":"chemstation-api/introduction/#sequence-operations","title":"Sequence Operations","text":"<ul> <li>Sequence automation - Create and execute multi-sample analysis workflows  </li> <li>Excel integration - Import sample lists directly from spreadsheets</li> <li>Progress monitoring - Real-time tracking of batch analysis progress</li> <li>Error recovery - Pause, resume, and handle sequence interruptions</li> </ul>"},{"location":"chemstation-api/introduction/#system-monitoring","title":"System Monitoring","text":"<ul> <li>Real-time status - Continuous monitoring of instrument and analysis state</li> <li>Progress tracking - Elapsed time, remaining time, and completion estimates</li> <li>Diagnostic access - Direct access to RC.NET status registers</li> <li>Error detection - Comprehensive system health monitoring</li> </ul>"},{"location":"chemstation-api/introduction/#module-overview","title":"Module Overview","text":"<p>The ChemStation API organizes functionality into specialized modules for different aspects of CE automation:</p>"},{"location":"chemstation-api/introduction/#core-communication-core","title":"Core Communication (<code>core/</code>)","text":"<ul> <li>File-based protocol for reliable ChemStation communication</li> <li>Command processor integration for direct instrument control  </li> <li>Error handling and timeout management with automatic retry logic</li> <li>Configuration management for communication parameters</li> </ul>"},{"location":"chemstation-api/introduction/#device-controllers-controllers","title":"Device Controllers (<code>controllers/</code>)","text":"<ul> <li>CEModule: Complete vial handling and capillary operations</li> <li>MethodsModule: CE method loading, execution, and parameter management</li> <li>SequenceModule: Batch analysis control and sequence table management</li> <li>SystemModule: Real-time status monitoring and diagnostic functions</li> <li>ValidationModule: Pre-operation checks and error prevention</li> </ul>"},{"location":"chemstation-api/introduction/#automation-workflows","title":"Automation Workflows","text":"<ul> <li>High-level operations - Complete analytical procedures in single calls</li> <li>Validation systems - Comprehensive pre-flight checks prevent common errors</li> <li>Integration patterns - Seamless connectivity with SIA sample preparation systems</li> </ul>"},{"location":"chemstation-api/introduction/#quick-start","title":"Quick Start","text":"<pre><code>from ChemstationAPI import ChemstationAPI\n\n# Initialize connection to ChemStation\napi = ChemstationAPI()\n\n# Basic workflow example\napi.ce.load_vial_to_position(15, \"inlet\")     # Load sample vial\napi.method.load(\"CE_Protein_Analysis\")        # Load method\napi.method.run(\"Sample_001\")                  # Execute analysis\n\n# Monitor progress\nwhile api.system.method_on():\n    remaining = api.system.get_remaining_analysis_time()\n    print(f\"Analysis remaining: {remaining:.1f} minutes\")\n    time.sleep(30)\n</code></pre>"},{"location":"chemstation-api/introduction/#documentation-resources","title":"Documentation Resources","text":"<p>For comprehensive information, theoretical background, and technical specifications:</p>"},{"location":"chemstation-api/introduction/#research-literature","title":"Research &amp; Literature","text":"<ul> <li>Literature Collection - Research papers, analytical methods, and CE theory</li> <li>Technical Documentation - Detailed API documentation and tutorials</li> </ul>"},{"location":"chemstation-api/macro_tutorial/","title":"ChemStation Macros - Complete Guide","text":"<p>Comprehensive guide to ChemStation's built-in scripting capabilities for automation of analytical workflows.</p>"},{"location":"chemstation-api/macro_tutorial/#overview","title":"Overview","text":"<p>ChemStation includes a command processor (CP) that interprets and executes commands interactively or through scripts. This guide provides hands-on examples and best practices for creating automation solutions.</p>"},{"location":"chemstation-api/macro_tutorial/#1-chemstation-commands","title":"1. ChemStation Commands","text":""},{"location":"chemstation-api/macro_tutorial/#basic-command-syntax","title":"Basic Command Syntax","text":"<p>Display Messages: <pre><code>Print \"This is a message\"\n</code></pre></p> <p>Multiple Commands per Line: Separate commands with semicolons (<code>;</code>): <pre><code>Print \"Starting\"; Sleep 2; Print \"Complete\"\n</code></pre></p> <p>Comments: Text after <code>!</code> is ignored: <pre><code>! This is a comment\nPrint \"Active command\"  ! End-of-line comment\n</code></pre></p> <p>Command History: Use <code>\u2191</code> and <code>\u2193</code> arrow keys to navigate through previous commands in the command processor.</p>"},{"location":"chemstation-api/macro_tutorial/#2-macro-structure-and-parameters","title":"2. Macro Structure and Parameters","text":"<p>Macros are named collections of commands that automate repetitive tasks and complex workflows.</p>"},{"location":"chemstation-api/macro_tutorial/#basic-macro-structure","title":"Basic Macro Structure","text":"<pre><code>Name MyMessage\n    Print \"Hello World!\"\nEndMacro\n</code></pre>"},{"location":"chemstation-api/macro_tutorial/#macro-parameters","title":"Macro Parameters","text":"<p>Macros can accept parameters for flexible operation:</p> <pre><code>Name InjectSample\n    Parameter SampleName$, VialPos, InjVol\n    Print \"Sample=\", SampleName$, \", Vial=\", VialPos, \", InjVol=\", InjVol\nEndMacro\n</code></pre> <p>Calling the macro: <pre><code>InjectSample \"Std_1\", 5, 10\n</code></pre></p>"},{"location":"chemstation-api/macro_tutorial/#local-variables","title":"Local Variables","text":"<p>Define local variables within macros:</p> <pre><code>Name CalculateVolume\n    Local Area, Volume, Concentration\n    Area = 2.5\n    Concentration = 0.1\n    Volume = Area * Concentration * 10\n    Print \"Calculated Volume =\", Volume\nEndMacro\n</code></pre> <p>Variable Scope:</p> <ul> <li>Local variables exist only within the macro</li> <li>Global variables persist throughout the ChemStation session</li> <li>Use local variables to prevent naming conflicts</li> </ul>"},{"location":"chemstation-api/macro_tutorial/#3-loading-and-managing-macros","title":"3. Loading and Managing Macros","text":""},{"location":"chemstation-api/macro_tutorial/#loading-macros","title":"Loading Macros","text":"<p>Load from relative path: <pre><code>Macro \"mymacro.mac\"\n</code></pre></p> <p>Load from absolute path: <pre><code>Macro \"D:\\projects\\chem\\automation\\mymacro.mac\"\n</code></pre></p>"},{"location":"chemstation-api/macro_tutorial/#executing-macros","title":"Executing Macros","text":"<p>Run without parameters: <pre><code>MyMessage\n</code></pre></p> <p>Run with parameters: <pre><code>InjectSample \"Sample_A\", 3, 5.0\n</code></pre></p>"},{"location":"chemstation-api/macro_tutorial/#macro-management","title":"Macro Management","text":"<p>Remove macro from memory: <pre><code>Remove MyMessage\n</code></pre></p> <p>List loaded macros: <pre><code>Show Macros\n</code></pre></p>"},{"location":"chemstation-api/macro_tutorial/#4-variables-and-data-types","title":"4. Variables and Data Types","text":""},{"location":"chemstation-api/macro_tutorial/#variable-types","title":"Variable Types","text":"<p>String Variables: <pre><code>Sample$ = \"Test_Sample_001\"\nDataPath$ = \"C:\\ChemStation\\Data\\\"\n</code></pre></p> <p>Numeric Variables: <pre><code>Flow = 1.5\nTemperature = 25.0\nInjectionVolume = 10\n</code></pre></p>"},{"location":"chemstation-api/macro_tutorial/#system-variables","title":"System Variables","text":"<p>ChemStation provides built-in system variables for accessing current state information:</p> <p>Common System Variables:</p> <ul> <li><code>_DataFile$</code> - Current data file name</li> <li><code>_MethodOn</code> - Method status (0=off, 1=on)</li> <li><code>_SequenceOn</code> - Sequence status (0=off, 1=on)</li> <li><code>_AutoPath$</code> - Automatic data path</li> <li><code>_Instrument$</code> - Current instrument configuration</li> </ul> <p>Display all system variables: <pre><code>Show Variables\n</code></pre></p>"},{"location":"chemstation-api/macro_tutorial/#5-registry-operations","title":"5. Registry Operations","text":"<p>Registries are ChemStation's primary data containers, storing complex information about analyses, methods, chromatograms, and spectra.</p>"},{"location":"chemstation-api/macro_tutorial/#understanding-registry-structure","title":"Understanding Registry Structure","text":"<p>Registry Hierarchy:</p> <ul> <li>Registry - Top-level container (e.g., ChromReg for chromatograms)</li> <li>Objects - Individual data items within registry (e.g., ChromReg[1])</li> <li>Headers - Metadata about objects</li> <li>Data Blocks - Raw analytical data</li> <li>Tables - Processed results (peaks, quantification)</li> </ul>"},{"location":"chemstation-api/macro_tutorial/#basic-registry-operations","title":"Basic Registry Operations","text":"<p>Check registry size: <pre><code>Print RegSize(ChromReg)\n</code></pre></p> <p>List registry contents: <pre><code>Print RegCont$(ChromReg)\n</code></pre></p> <p>Access specific registry object: <pre><code>ChromReg[1]  ! Access first chromatogram\n</code></pre></p>"},{"location":"chemstation-api/macro_tutorial/#reading-data-from-registries","title":"Reading Data from Registries","text":"<p>Extract raw data points: <pre><code>Data(ChromReg[1], 0, 10)  ! X-axis value at point 10\nData(ChromReg[1], 1, 10)  ! Y-axis value at point 10\n</code></pre></p> <p>Read header information: <pre><code>Print ObjHdrVal$(ChromReg[1], \"SampleName\")\nPrint ObjHdrVal(ChromReg[1], \"InjectionVolume\")\n</code></pre></p>"},{"location":"chemstation-api/macro_tutorial/#working-with-tables","title":"Working with Tables","text":"<p>Read text from tables: <pre><code>TabText$(ChromRes[1], \"Peak\", 2, \"Name\")    ! Peak name for peak #2\n</code></pre></p> <p>Read numeric values from tables: <pre><code>TabVal(ChromRes[1], \"Peak\", 2, \"Area\")      ! Peak area for peak #2\nTabVal(ChromRes[1], \"Peak\", 2, \"RT\")        ! Retention time for peak #2\n</code></pre></p>"},{"location":"chemstation-api/macro_tutorial/#modifying-registry-data","title":"Modifying Registry Data","text":"<p>Update header values: <pre><code>SetObjHdrVal ChromReg[1], \"Title\", \"My Custom Chromatogram\"\nSetObjHdrVal ChromReg[1], \"SampleInfo\", \"Batch_2024_001\"\n</code></pre></p> <p>Modify data points: <pre><code>SetData ChromReg[1], 1, 10, 1500.5  ! Set Y-value at point 10\n</code></pre></p>"},{"location":"chemstation-api/macro_tutorial/#6-rcnet-module-control","title":"6. RC.NET Module Control","text":"<p>RC.NET provides standardized communication with ChemStation modules like pumps, detectors, and autosamplers.</p>"},{"location":"chemstation-api/macro_tutorial/#rcnet-registry-structure","title":"RC.NET Registry Structure","text":"<p>Each module maintains three primary registries:</p> <p>Registry Types:</p> <ul> <li><code>RC&lt;ModID&gt;&lt;#&gt;Method</code> - Method parameters and settings</li> <li><code>RC&lt;ModID&gt;&lt;#&gt;Status</code> - Real-time status information (pressures, temperatures)</li> <li><code>RC&lt;ModID&gt;&lt;#&gt;Config</code> - Module configuration (type, firmware version, serial number)</li> </ul> <p>Example Module Identifiers:</p> <ul> <li><code>PMP1</code> - Quaternary Pump</li> <li><code>WLS1</code> - UV-Vis Detector  </li> <li><code>ALS1</code> - Autosampler</li> <li><code>CE1</code> - Capillary Electrophoresis</li> </ul>"},{"location":"chemstation-api/macro_tutorial/#method-parameter-modification","title":"Method Parameter Modification","text":"<p>Standard method parameter workflow: <pre><code>! Upload current method to memory\nUploadRCMethod PMP1\n\n! Modify parameters\nSetObjHdrVal RCPMP1Method[1], \"StopTime_Time\", 10\nSetObjHdrVal RCPMP1Method[1], \"Flow\", 1.0\n\n! Download modified method to instrument\nDownloadRCMethod PMP1\n</code></pre></p> <p>Common Method Parameters:</p> <ul> <li>Flow rates: <code>\"Flow\"</code>, <code>\"Flow_A\"</code>, <code>\"Flow_B\"</code></li> <li>Temperatures: <code>\"Temperature\"</code>, <code>\"ColTemp\"</code></li> <li>Times: <code>\"StopTime_Time\"</code>, <code>\"PostTime\"</code></li> <li>Volumes: <code>\"InjVol\"</code>, <code>\"MaxInjVol\"</code></li> </ul>"},{"location":"chemstation-api/macro_tutorial/#reading-module-status","title":"Reading Module Status","text":"<p>Current operational parameters: <pre><code>Print ObjHdrVal(RCPMP1Status[1], \"Pressure\")     ! Current pressure\nPrint ObjHdrVal(RCPMP1Status[1], \"Flow_actual\")  ! Actual flow rate\nPrint ObjHdrVal(RCWLS1Status[1], \"Lamp\")         ! Lamp status\n</code></pre></p> <p>Module configuration information: <pre><code>Print ObjHdrVal(RCPMP1Config[1], \"SerialNumber\")   ! Serial number\nPrint ObjHdrVal(RCPMP1Config[1], \"FirmwareRev\")    ! Firmware version\n</code></pre></p>"},{"location":"chemstation-api/macro_tutorial/#direct-module-communication","title":"Direct Module Communication","text":"<p>Send command without response: <pre><code>WriteModule \"CE1\", \"LRPL 10\"  ! Load replenishment position 10\n</code></pre></p> <p>Send command and get response: <pre><code>Response$ = SendModule$(\"CE1\", \"LIFTER:OCCUPIED? 3\")  ! Check vial position\nPrint \"Vial occupied:\", Response$\n</code></pre></p> <p>Advanced module interrogation: <pre><code>Print SendModule$(\"PMP1\", \"PRES?\")     ! Query current pressure\nPrint SendModule$(\"ALS1\", \"INJ:STAT?\")  ! Query injection status\n</code></pre></p>"},{"location":"chemstation-api/macro_tutorial/#7-discovering-module-commands-through-trace-logs","title":"7. Discovering Module Commands Through Trace Logs","text":"<p>Module-specific commands can be discovered by monitoring ChemStation's communication logs.</p>"},{"location":"chemstation-api/macro_tutorial/#practical-example-vial-loading","title":"Practical Example - Vial Loading","text":"<p>Sample log entry for loading vial 50 to replenishment position: <pre><code>EventId: 228808;Timestamp: 22/07/2025 8:21:16.851;Thread Id: 25;\nMessage: LDT SendInstruction: Module:[G7150A:DEDAD01310]; \nInstruction:[RRPL]; Reply:[[G7150A:DEDAD01310:IN]: RA 00000 RRPL];\nCategory: Agilent.LCDrivers.Common.ModuleAccess, Debug;Priority: 3;\nProcess Name: C:\\Chem32\\CORE\\ChemMain.exe;\nExtended Properties: ModuleShortname - Agilent.LCDrivers.Common.ModuleAccess;\n</code></pre></p> <p>Key Information:</p> <ul> <li>Module ID: <code>G7150A:DEDAD01310</code> (CE1)</li> <li>Command: <code>LRPL 50</code> (Load Replenishment Position 50)</li> <li>Response: <code>RA 00000</code> (Response Acknowledge - Success)</li> </ul>"},{"location":"chemstation-api/macro_tutorial/#trace-analysis-workflow","title":"Trace Analysis Workflow","text":"<p>1. Monitor during operations:</p> <ul> <li>Perform action in ChemStation interface (load vial, change parameter)</li> <li>Check <code>C:\\Chem32\\1\\TEMP\\rcdriver.trc</code></li> </ul> <p>2. Extract commands:</p> <ul> <li>Look for <code>Instruction:</code> entries</li> <li>Note the exact module ID and command syntax</li> </ul> <p>3. Test in Command Processor: <pre><code>WriteModule \"CE1\", \"LRPL 50\"  ! Load vial 50 to replenishment\n</code></pre></p> <p>Common Commands Discovered:</p> <ul> <li><code>LRPL n</code> - Load replenishment position</li> <li><code>LIFTER:OCCUPIED? n</code> - Check if vial n is present</li> </ul>"},{"location":"chemstation-api/macro_tutorial/#8-practical-examples","title":"8. Practical Examples","text":""},{"location":"chemstation-api/macro_tutorial/#complete-sample-analysis-macro","title":"Complete Sample Analysis Macro","text":"<pre><code>Name AnalyzeSample\n    Parameter VialNumber, SampleName$, MethodName$\n    Local Response$\n\n    ! Load sample vial\n    WriteModule \"CE1\", \"INLT \" + Val$(VialNumber)\n    Sleep 3\n\n    ! Check vial loaded\n    Response$ = SendModule$(\"CE1\", \"LIFTER:OCCUPIED? 1\")\n    If Response$ = \"0\" Then\n        Print \"Error: Sample vial not loaded\"\n        Return\n    EndIf\n\n    ! Load method\n    LoadMethod _METHPATH$, MethodName$ + \".M\"\n\n    ! Set sample name\n    _SAMPLE$ = SampleName$\n\n    ! Run analysis\n    RunMethod _DATAPATH$,, SampleName$\n\n    ! Wait for completion\n    While _MethodOn = 1\n        Sleep 10\n    EndWhile\n\n    ! Unload vial\n    WriteModule \"CE1\", \"RINL\"\n\n    Print \"Analysis of \", SampleName$, \" complete\"\n\nEndMacro\n</code></pre>"},{"location":"chemstation-api/macro_tutorial/#registry-data-extraction","title":"Registry Data Extraction","text":"<pre><code>Name ExtractPeakData\n    Parameter ChromNumber\n    Local PeakCount, i, RT, Area, Name$\n\n    ! Get number of peaks\n    PeakCount = TabSize(ChromRes[ChromNumber], \"Peak\")\n\n    Print \"Peak Report for Chromatogram \", ChromNumber\n    Print \"RT(min)\", Chr$(9), \"Area\", Chr$(9), \"Name\"\n\n    ! Extract each peak\n    For i = 1 To PeakCount\n        RT = TabVal(ChromRes[ChromNumber], \"Peak\", i, \"RT\")\n        Area = TabVal(ChromRes[ChromNumber], \"Peak\", i, \"Area\")\n        Name$ = TabText$(ChromRes[ChromNumber], \"Peak\", i, \"Name\")\n\n        Print RT, Chr$(9), Area, Chr$(9), Name$\n    Next i\n\nEndMacro\n</code></pre>"},{"location":"chemstation-api/macro_tutorial/#system-status-monitor","title":"System Status Monitor","text":"<pre><code>Name MonitorSystem\n    Local Status$, Pressure, Temperature\n\n    While _MethodOn = 1\n        ! Get system status\n        Status$ = ObjHdrText$(RCCE1Status[1], \"RunState\")\n        Pressure = ObjHdrVal(RCCE1Status[1], \"Pressure\")\n        Temperature = ObjHdrVal(RCCE1Status[1], \"Temperature\")\n\n        Print \"Status: \", Status$, \" | Pressure: \", Pressure, \" | Temp: \", Temperature\n\n        Sleep 30  ! Check every 30 seconds\n    EndWhile\n\n    Print \"Analysis complete\"\n\nEndMacro\n</code></pre>"},{"location":"chemstation-api/macro_tutorial/#9-quick-troubleshooting","title":"9. Quick Troubleshooting","text":""},{"location":"chemstation-api/macro_tutorial/#common-issues","title":"Common Issues","text":"<p>Module communication fails:</p> <ul> <li>Verify module is online: <code>Print RCModuleReady(\"PMP1\")</code></li> <li>Restart ChemStation if persistent errors</li> </ul> <p>Registry errors:</p> <ul> <li>Check registry exists: <code>Print RegSize(ChromReg)</code> </li> <li>Verify object number: <code>Print RegCont$(ChromReg)</code></li> </ul> <p>Command not working:</p> <ul> <li>Test in Command Processor first</li> <li>Check trace logs for exact syntax</li> <li>Verify module ID matches your system</li> </ul>"},{"location":"chemstation-api/macro_tutorial/#quick-reference-commands","title":"Quick Reference Commands","text":"<pre><code>Show                          ! List all variables\nRCListDevices$()             ! List RC.NET modules  \nPrint RegCont$(ChromReg)     ! Show registry contents\nRemove MacroName             ! Unload macro\n</code></pre>"},{"location":"chemstation-api/macro_tutorial/#10-advanced-registry-exploration","title":"10. Advanced Registry Exploration","text":"<p>For comprehensive registry exploration, use the provided <code>register_reader.mac</code> utility to examine all available registry structures and data. This tool provides:</p> <ul> <li>Interactive registry browsing</li> <li>Object structure examination  </li> <li>Header and table data inspection</li> <li>Registry modification capabilities</li> </ul> <p>Loading the registry reader: <pre><code># From Python API\napi.system.add_register_reader()\n\n# Then in ChemStation:\n# Menu \u2192 Debug \u2192 Show Registers\n</code></pre></p> <p>This tool is invaluable for understanding ChemStation's internal data structures and developing advanced automation scripts.</p>"},{"location":"chemstation-api/method/","title":"Methods Module - CE Method Management","text":"<p>Management and execution of ChemStation CE methods for analytical control.</p>"},{"location":"chemstation-api/method/#overview","title":"Overview","text":"<p>The Methods module provides:</p> <ul> <li>Method file operations: Load and save CE methods (.M files)</li> <li>Method execution: Run methods with standard or custom parameters</li> <li>Parameter control: Modify sample information without editing method files</li> </ul> <p>File Format: ChemStation .M method files Default Directory: ChemStation method directory (_METHPATH$)</p>"},{"location":"chemstation-api/method/#method-file-operations","title":"Method File Operations","text":""},{"location":"chemstation-api/method/#load","title":"load()","text":"<p>Load CE method from file into ChemStation active memory.</p> <pre><code>api.method.load(method_name, method_path=\"_METHODPATHS$\")\n</code></pre> <p>Parameters:</p> <ul> <li><code>method_name</code> (str): Method filename without .M extension</li> <li><code>method_path</code> (str): Directory containing methods (defaults to ChemStation method directory)</li> </ul> <p>Examples: <pre><code># Load standard analysis method\napi.method.load(\"CE_Protein_Analysis\")\n\n# Load method from custom directory\napi.method.load(\"TestMethod\", \"C:\\\\Custom\\\\Methods\\\\\")\n\n# Load development method\napi.method.load(\"MEKC_SmallMolecules\")\n</code></pre></p> <p>Notes:</p> <ul> <li>Method loading overwrites current instrument settings</li> <li>All instrument parameters updated (voltage, temperature, vial assignments)</li> <li>Previous unsaved changes are lost</li> </ul>"},{"location":"chemstation-api/method/#save","title":"save()","text":"<p>Save current method with specified name and optional comment.</p> <pre><code>api.method.save(method_name=\"_METHFILE$\", method_path=\"_METHODPATHS$\", comment=\"\\\" \\\"\")\n</code></pre> <p>Parameters:</p> <ul> <li><code>method_name</code> (str): Filename for saved method (defaults to current method name)</li> <li><code>method_path</code> (str): Directory for saving method (defaults to ChemStation method directory)  </li> <li><code>comment</code> (str): Optional comment describing method changes</li> </ul> <p>Examples: <pre><code># Save current method with new name\napi.method.save(\"Optimized_CE_Method\", comment=\"Improved resolution\")\n\n# Overwrite current method\napi.method.save()\n\n# Save with detailed comment\napi.method.save(\"Modified_Protein_v3\", comment=\"Voltage increased to 30kV, temp reduced to 23C\")\n</code></pre></p> <p>Notes:</p> <ul> <li>Existing files with same name are overwritten without warning</li> <li>Comment stored in method file metadata</li> <li>.M extension added automatically</li> </ul>"},{"location":"chemstation-api/method/#method-execution","title":"Method Execution","text":""},{"location":"chemstation-api/method/#run","title":"run()","text":"<p>Execute current method and save data with specified name.</p> <pre><code>api.method.run(data_name, data_dir=\"_DATAPATH$\")\n</code></pre> <p>Parameters:</p> <ul> <li><code>data_name</code> (str): Name for the data file (without extension)</li> <li><code>data_dir</code> (str): Directory for data storage (defaults to ChemStation data directory)</li> </ul> <p>Examples: <pre><code># Run analysis with descriptive name\napi.method.run(\"Protein_Sample_001\")\n\n# Run QC standard with custom directory\napi.method.run(\"QC_Standard_Daily\", \"C:\\\\QC_Data\\\\\")\n\n# Run blank analysis\napi.method.run(\"Blank_Run_20241201\")\n</code></pre></p> <p>Requirements:</p> <ul> <li>Method must be loaded before execution</li> <li>Required vials must be present and positioned</li> <li>Instrument must be in ready state</li> </ul> <p>Notes:</p> <ul> <li>Uses existing method parameters (vials, sample info, conditions)</li> <li>Only data filename changes</li> <li>Progress monitored via <code>system.method_on()</code></li> </ul>"},{"location":"chemstation-api/method/#execution_method_with_parameters","title":"execution_method_with_parameters()","text":"<p>Execute CE method with custom vial and sample parameters.</p> <pre><code>api.method.execution_method_with_parameters(vial, method_name, sample_name=\"\", comment=\"\", subdirectory_name=\"\")\n</code></pre> <p>Parameters:</p> <ul> <li><code>vial</code> (int): Carousel position for sample (1-48)</li> <li><code>method_name</code> (str): Method to execute (without .M extension)</li> <li><code>sample_name</code> (str): Descriptive sample name for data file and records</li> <li><code>comment</code> (str): Path to text file containing method comment/description</li> <li><code>subdirectory_name</code> (str): Optional subdirectory for data organization</li> </ul> <p>Examples: <pre><code># Analyze protein sample\napi.method.execution_method_with_parameters(\n    vial=15,\n    method_name=\"CE_Protein_Analysis\", \n    sample_name=\"BSA_Standard_1mg_ml\"\n)\n\n# Run with comment file and subdirectory\napi.method.execution_method_with_parameters(\n    vial=22,\n    method_name=\"Development_CZE\",\n    sample_name=\"Test_Sample_v3\",\n    comment=\"C:\\\\Comments\\\\protein_method.txt\",\n    subdirectory_name=\"Method_Development\"\n)\n\n# Simple unknown sample analysis\napi.method.execution_method_with_parameters(\n    vial=30,\n    method_name=\"CE_Screening\",\n    sample_name=\"Unknown_001\"\n)\n</code></pre></p> <p>Process:</p> <ol> <li>Creates temporary method register (TemporaryRegisterMethod)</li> <li>Loads specified method and copies parameters</li> <li>Modifies vial number and sample information</li> <li>Executes analysis with custom parameters</li> <li>Data saved with automatic filename generation</li> </ol> <p>Notes:</p> <ul> <li>Data filename generated automatically with timestamp</li> <li>Sample information stored in data file metadata</li> <li>Temporary register cleaned up after execution</li> <li>Vial must be physically present in carousel</li> </ul>"},{"location":"chemstation-api/sequence/","title":"Sequence Module - Batch Analysis Management","text":"<p>Management and execution of ChemStation sequences for automated batch analysis.</p>"},{"location":"chemstation-api/sequence/#overview","title":"Overview","text":"<p>The Sequence module provides:</p> <ul> <li>Sequence file operations: Load and save sequence files (.S files)</li> <li>Table editing: Modify sequence parameters row by row</li> <li>Excel integration: Import sequence data from spreadsheets</li> <li>Batch control: Start, pause, and resume sequence execution</li> </ul> <p>File Format: ChemStation .S sequence files Default Directory: ChemStation sequence directory (_SEQPATH$)</p>"},{"location":"chemstation-api/sequence/#sequence-file-operations","title":"Sequence File Operations","text":""},{"location":"chemstation-api/sequence/#load_sequence","title":"load_sequence()","text":"<p>Load an existing sequence from file.</p> <pre><code>api.sequence.load_sequence(seq_name, seq_dir=\"_SEQPATH$\")\n</code></pre> <p>Parameters:</p> <ul> <li><code>seq_name</code> (str): Sequence filename (without .S extension)</li> <li><code>seq_dir</code> (str): Directory containing sequence files (defaults to ChemStation sequence directory)</li> </ul> <p>Examples: <pre><code># Load standard sequence\napi.sequence.load_sequence(\"Protein_Analysis_Batch\")\n\n# Load from custom directory\napi.sequence.load_sequence(\"TestSeq\", \"C:\\\\Custom\\\\Sequences\\\\\")\n\n# Load daily QC sequence\napi.sequence.load_sequence(\"Daily_QC_2024\")\n</code></pre></p> <p>Notes:</p> <ul> <li>Sequence loading overwrites current sequence in memory</li> <li>All unsaved changes to current sequence are lost</li> <li>Sequence parameters become active immediately</li> </ul>"},{"location":"chemstation-api/sequence/#save_sequence","title":"save_sequence()","text":"<p>Save current sequence to file.</p> <pre><code>api.sequence.save_sequence(seq_name=\"_SEQFILE$\", seq_dir=\"_SEQPATH$\")\n</code></pre> <p>Parameters:</p> <ul> <li><code>seq_name</code> (str): Filename for saved sequence (defaults to current sequence name)</li> <li><code>seq_dir</code> (str): Directory for saving sequence (defaults to ChemStation sequence directory)</li> </ul> <p>Examples: <pre><code># Save with new name\napi.sequence.save_sequence(\"Modified_Protein_Sequence\")\n\n# Overwrite current sequence\napi.sequence.save_sequence()\n\n# Save to custom location\napi.sequence.save_sequence(\"Backup_Sequence\", \"D:\\\\Backups\\\\\")\n</code></pre></p> <p>Notes:</p> <ul> <li>Saved sequence includes all table data and parameters</li> <li>Existing files with same name are overwritten</li> <li>.S extension added automatically</li> </ul>"},{"location":"chemstation-api/sequence/#sequence-table-editing","title":"Sequence Table Editing","text":""},{"location":"chemstation-api/sequence/#modify_sequence_row","title":"modify_sequence_row()","text":"<p>Modify parameters in specific sequence table row.</p> <pre><code>api.sequence.modify_sequence_row(row, vial_sample=\"\", method=\"\", sample_name=\"\", sample_info=\"\", data_file_name=\"\")\n</code></pre> <p>Parameters:</p> <ul> <li><code>row</code> (int): Row number in sequence table (1-based indexing)</li> <li><code>vial_sample</code> (str): Carousel position for sample vial (1-48)</li> <li><code>method</code> (str): CE method name (without .M extension)</li> <li><code>sample_name</code> (str): Descriptive sample name for identification</li> <li><code>sample_info</code> (str): Additional sample metadata and notes</li> <li><code>data_file_name</code> (str): Custom data filename (optional)</li> </ul> <p>Examples: <pre><code># Modify sample vial and method\napi.sequence.modify_sequence_row(\n    row=1,\n    vial_sample=\"15\",\n    method=\"CE_Protein_Analysis\"\n)\n\n# Update sample information only\napi.sequence.modify_sequence_row(\n    row=3,\n    sample_name=\"Unknown_Sample_001\",\n    sample_info=\"Customer sample, urgent analysis\"\n)\n\n# Complete row modification\napi.sequence.modify_sequence_row(\n    row=5,\n    vial_sample=\"22\",\n    method=\"MEKC_SmallMolecules\",\n    sample_name=\"Caffeine_Standard\",\n    sample_info=\"1mg/mL in water\"\n)\n</code></pre></p> <p>Notes:</p> <ul> <li>Only specified parameters are modified (empty parameters remain unchanged)</li> <li>Sequence must be loaded before modification</li> <li>Changes made to memory - use <code>save_sequence()</code> to persist</li> <li>Row numbering starts from 1</li> </ul>"},{"location":"chemstation-api/sequence/#excel-integration","title":"Excel Integration","text":""},{"location":"chemstation-api/sequence/#prepare_sequence_table","title":"prepare_sequence_table()","text":"<p>Import and create sequence table from Excel spreadsheet.</p> <pre><code>api.sequence.prepare_sequence_table(excel_file_path, sequence_name=None, sheet_name=0, vial_column=None, method_column=None, filename_column=None, sample_name_column=None, sample_info_column=None, replicate_column=None)\n</code></pre> <p>Parameters:</p> <ul> <li><code>excel_file_path</code> (str): Full path to Excel file containing sequence data</li> <li><code>sequence_name</code> (str): Existing sequence to load before modification (optional)</li> <li><code>sheet_name</code> (int): Excel worksheet index to read (0-based, default: first sheet)</li> <li><code>vial_column</code> (str): Excel column name containing vial positions</li> <li><code>method_column</code> (str): Excel column name containing method names</li> <li><code>sample_name_column</code> (str): Excel column name containing sample names</li> <li><code>sample_info_column</code> (str): Excel column name containing sample metadata</li> <li><code>filename_column</code> (str): Excel column name containing custom filenames</li> <li><code>replicate_column</code> (str): Excel column name containing replicate information</li> </ul> <p>Examples: <pre><code># Basic import\napi.sequence.prepare_sequence_table(\n    excel_file_path=\"sample_list.xlsx\",\n    vial_column=\"Vial\",\n    method_column=\"Method\",\n    sample_name_column=\"Sample\"\n)\n\n# Full import with all columns\napi.sequence.prepare_sequence_table(\n    excel_file_path=\"complex_sequence.xlsx\",\n    sequence_name=\"Research_Project_2024\",\n    sheet_name=0,\n    vial_column=\"Vial_Position\",\n    method_column=\"CE_Method\",\n    sample_name_column=\"Sample_ID\",\n    sample_info_column=\"Description\",\n    filename_column=\"Data_Name\",\n    replicate_column=\"Rep_Number\"\n)\n\n# Import from second worksheet\napi.sequence.prepare_sequence_table(\n    excel_file_path=\"batch_data.xlsx\",\n    sheet_name=1,\n    vial_column=\"Position\",\n    method_column=\"Analysis_Method\",\n    sample_name_column=\"Sample_Name\"\n)\n</code></pre></p> <p>Requirements:</p> <ul> <li>Excel must be installed on the system</li> <li>File should not be open during import</li> <li>Column names must match exactly (case-sensitive)</li> <li>Referenced methods must exist in method directory</li> </ul> <p>Notes:</p> <ul> <li>Excel application briefly visible during processing</li> <li>Temporary Excel file created during processing</li> <li>Sequence automatically saved after import</li> <li>Method names validated against method directory</li> </ul>"},{"location":"chemstation-api/sequence/#sequence-execution-control","title":"Sequence Execution Control","text":""},{"location":"chemstation-api/sequence/#start","title":"start()","text":"<p>Start execution of the current sequence.</p> <pre><code>api.sequence.start()\n</code></pre> <p>Examples: <pre><code># Start loaded sequence\napi.sequence.load_sequence(\"Daily_Analysis\")\napi.sequence.start()\n</code></pre></p> <p>Notes:</p> <ul> <li>Sequence must be loaded and validated before starting</li> <li>Instrument enters sequence mode with limited manual control</li> <li>Progress monitored via system status methods</li> </ul>"},{"location":"chemstation-api/sequence/#pause","title":"pause()","text":"<p>Pause the currently running sequence.</p> <pre><code>api.sequence.pause()\n</code></pre> <p>Examples: <pre><code># Pause during execution\napi.sequence.pause()\n</code></pre></p> <p>Notes:</p> <ul> <li>Current analysis completes before pausing</li> <li>Sequence stops before starting next sample</li> <li>Manual operations possible while paused</li> </ul>"},{"location":"chemstation-api/sequence/#resume","title":"resume()","text":"<p>Resume a paused sequence from where it stopped.</p> <pre><code>api.sequence.resume()\n</code></pre> <p>Examples: <pre><code># Resume after pause\napi.sequence.resume()\n</code></pre></p> <p>Notes:</p> <ul> <li>Resumes from next unprocessed sample</li> <li>All sequence parameters remain unchanged</li> <li>Instrument returns to automated sequence mode</li> </ul>"},{"location":"chemstation-api/sequence/#practical-examples","title":"Practical Examples","text":""},{"location":"chemstation-api/sequence/#manual-sequence-creation","title":"Manual Sequence Creation","text":"<pre><code># Load existing sequence or create new\napi.sequence.load_sequence(\"Daily_QC\")\n\n# Add samples\napi.sequence.modify_sequence_row(\n    row=1,\n    vial_sample=\"1\",\n    method=\"CE_QC\",\n    sample_name=\"QC_Standard\",\n    sample_info=\"Daily system suitability\"\n)\n\napi.sequence.modify_sequence_row(\n    row=2,\n    vial_sample=\"10\",\n    method=\"CE_Analysis\",\n    sample_name=\"Sample_001\",\n    sample_info=\"Customer sample\"\n)\n\n# Save and run\napi.sequence.save_sequence(\"Daily_QC_Modified\")\napi.sequence.start()\n</code></pre>"},{"location":"chemstation-api/sequence/#excel-based-sequence","title":"Excel-Based Sequence","text":"<pre><code># Import from Excel\napi.sequence.prepare_sequence_table(\n    excel_file_path=\"protein_samples.xlsx\",\n    vial_column=\"Vial\",\n    method_column=\"Method\",\n    sample_name_column=\"Sample_ID\",\n    sample_info_column=\"Notes\"\n)\n\n# Start batch analysis\napi.sequence.start()\n\n# Monitor and control\nwhile api.system.method_on():\n    print(\"Sequence running...\")\n    time.sleep(60)\n</code></pre>"},{"location":"chemstation-api/system/","title":"System Module - ChemStation System Monitoring","text":"<p>System monitoring and diagnostic control for ChemStation CE operations.</p>"},{"location":"chemstation-api/system/#overview","title":"Overview","text":"<p>The System module provides:</p> <ul> <li>Status Monitoring: Real-time acquisition and instrument status tracking</li> <li>Method Execution Tracking: Active analysis monitoring and timing information</li> <li>Instrument Readiness: System state validation with timeout handling</li> <li>Diagnostic Tools: Register browser and system analysis capabilities</li> <li>Emergency Control: Analysis abort and system recovery functions</li> </ul> <p>Key Capabilities: Real-time status, method timing, readiness validation, diagnostic access</p>"},{"location":"chemstation-api/system/#status-monitoring","title":"Status Monitoring","text":""},{"location":"chemstation-api/system/#method_on","title":"method_on()","text":"<p>Check if an analytical method is currently executing.</p> <pre><code>is_running = api.system.method_on()\n</code></pre> <p>Returns:</p> <ul> <li><code>True</code> if a method is currently executing (any phase)</li> <li><code>False</code> if system is idle</li> </ul> <p>Examples: <pre><code># Wait for method completion\nwhile api.system.method_on():\n    print(\"Analysis in progress...\")\n    time.sleep(30)\n\n# Check before starting new analysis\nif not api.system.method_on():\n    api.method.run(\"NewSample\")\n\n# Simple status check\nif api.system.method_on():\n    print(\"Method running\")\nelse:\n    print(\"System idle\")\n</code></pre></p> <p>Notes:</p> <ul> <li>Covers all method phases (preconditioning, injection, separation, postconditioning)</li> <li>Essential for automation workflows to prevent overlapping analyses</li> <li>Use with <code>status()</code> for detailed phase information</li> </ul>"},{"location":"chemstation-api/system/#status","title":"status()","text":"<p>Get current ChemStation acquisition status.</p> <pre><code>current_status = api.system.status()\n</code></pre> <p>Returns:</p> <ul> <li><code>\"STANDBY\"</code>: System idle, ready for new analysis</li> <li><code>\"PRERUN\"</code>: Pre-analysis conditioning and preparation</li> <li><code>\"RUN\"</code>: Active separation and detection phase</li> <li><code>\"POSTRUN\"</code>: Post-analysis conditioning and cleanup</li> <li><code>\"ERROR\"</code>: Error condition requiring attention</li> <li><code>\"ABORT\"</code>: Analysis aborted or interrupted</li> </ul> <p>Examples: <pre><code># Monitor analysis phases\nstatus = api.system.status()\nif status == \"RUN\":\n    print(\"Separation in progress\")\nelif status == \"STANDBY\":\n    print(\"Ready for new sample\")\n\n# Wait for specific phase\nwhile api.system.status() != \"RUN\":\n    time.sleep(5)\n\n# Status-based decisions\nstatus = api.system.status()\nif status == \"ERROR\":\n    print(\"System error detected\")\n    api.system.abort_run()\n</code></pre></p> <p>Notes:</p> <ul> <li>Status updates in real-time</li> <li>STANDBY indicates readiness for new analysis</li> <li>Includes automatic retry logic for communication reliability</li> </ul>"},{"location":"chemstation-api/system/#rc_status","title":"RC_status()","text":"<p>Get current RC.NET module status for detailed instrument monitoring.</p> <pre><code>module_status = api.system.RC_status(module=\"CE1\")\n</code></pre> <p>Parameters:</p> <ul> <li><code>module</code> (str): RC.NET module identifier (default: \"CE1\")</li> </ul> <p>Returns:</p> <ul> <li><code>\"Idle\"</code>: Module ready and available for operations</li> <li><code>\"Run\"</code>: Module actively executing operations</li> <li><code>\"NotReady\"</code>: Module initializing or in error state</li> <li><code>\"Error\"</code>: Module error condition requiring attention</li> <li><code>\"Maintenance\"</code>: Module in maintenance mode</li> </ul> <p>Examples: <pre><code># Monitor CE instrument status\nif api.system.RC_status(\"CE1\") == \"Idle\":\n    print(\"CE instrument ready\")\n\n# Check multiple modules\nfor module in [\"CE1\", \"DAD1\"]:\n    status = api.system.RC_status(module)\n    print(f\"{module}: {status}\")\n\n# Wait for module ready\nwhile api.system.RC_status(\"CE1\") != \"Idle\":\n    print(\"Waiting for CE module...\")\n    time.sleep(5)\n</code></pre></p> <p>Notes:</p> <ul> <li>More detailed than acquisition status</li> <li>Useful for troubleshooting and system diagnostics</li> <li>Includes automatic retry logic</li> </ul>"},{"location":"chemstation-api/system/#method-timing","title":"Method Timing","text":""},{"location":"chemstation-api/system/#get_elapsed_analysis_time","title":"get_elapsed_analysis_time()","text":"<p>Get elapsed separation time since current analysis started.</p> <pre><code>elapsed_time = api.system.get_elapsed_analysis_time()\n</code></pre> <p>Returns:</p> <ul> <li><code>float</code>: Elapsed separation time in minutes</li> <li><code>0.0</code> if no analysis running or separation hasn't started</li> </ul> <p>Examples: <pre><code># Monitor analysis progress\nelapsed = api.system.get_elapsed_analysis_time()\ntotal = api.system.get_analysis_time()\nprogress = (elapsed / total) * 100\nprint(f\"Analysis {progress:.1f}% complete\")\n\n# Real-time monitoring with updates\nwhile api.system.method_on():\n    elapsed = api.system.get_elapsed_analysis_time()\n    print(f\"Running for {elapsed:.2f} minutes\")\n    time.sleep(30)\n</code></pre></p> <p>Notes:</p> <ul> <li>Measures only separation phase, not total method time</li> <li>Updates in real-time with precision to 0.01 minutes</li> <li>Excludes pre-run conditioning and injection phases</li> </ul>"},{"location":"chemstation-api/system/#get_analysis_time","title":"get_analysis_time()","text":"<p>Get total expected separation duration for current method.</p> <pre><code>total_time = api.system.get_analysis_time()\n</code></pre> <p>Returns:</p> <ul> <li><code>float</code>: Total separation duration in minutes</li> </ul> <p>Examples: <pre><code># Calculate remaining time\ntotal_time = api.system.get_analysis_time()\nelapsed_time = api.system.get_elapsed_analysis_time()\nremaining = total_time - elapsed_time\nprint(f\"Analysis completes in {remaining:.2f} minutes\")\n\n# Check method duration before starting\nduration = api.system.get_analysis_time()\nif duration &gt; 60:  # More than 1 hour\n    confirm = input(f\"Long analysis ({duration:.1f}min). Continue? \")\n</code></pre></p> <p>Notes:</p> <ul> <li>Based on method's programmed stoptime parameter</li> <li>Does not include conditioning or injection time</li> <li>Remains constant during execution</li> </ul>"},{"location":"chemstation-api/system/#get_remaining_analysis_time","title":"get_remaining_analysis_time()","text":"<p>Get remaining separation time until current analysis completes.</p> <pre><code>remaining_time = api.system.get_remaining_analysis_time()\n</code></pre> <p>Returns:</p> <ul> <li><code>float</code>: Remaining separation time in minutes</li> <li><code>0.0</code> if no analysis running</li> <li>May be negative if analysis exceeds expected duration</li> </ul> <p>Examples: <pre><code># Display countdown\nremaining = api.system.get_remaining_analysis_time()\nprint(f\"Analysis completes in {remaining:.1f} minutes\")\n\n# Progress monitoring with updates\nwhile api.system.method_on():\n    remaining = api.system.get_remaining_analysis_time()\n    if remaining &gt; 0:\n        print(f\"Time remaining: {remaining:.2f} minutes\")\n    time.sleep(60)\n\n# Automated scheduling\nif api.system.get_remaining_analysis_time() &lt; 5:  # Less than 5 minutes\n    prepare_next_sample()\n</code></pre></p> <p>Notes:</p> <ul> <li>Updates continuously during analysis</li> <li>Useful for progress bars and time estimation</li> <li>Calculated as total_time - elapsed_time</li> </ul>"},{"location":"chemstation-api/system/#system-readiness","title":"System Readiness","text":""},{"location":"chemstation-api/system/#ready_to_start_analysis","title":"ready_to_start_analysis()","text":"<p>Wait for all specified modules to reach ready state for analysis.</p> <pre><code>api.system.ready_to_start_analysis(modules=[\"CE1\", \"DAD1\"], timeout=None, verbose=True)\n</code></pre> <p>Parameters:</p> <ul> <li><code>modules</code> (list): List of module identifiers to check (default: [\"CE1\", \"DAD1\"])</li> <li><code>timeout</code> (int): Maximum waiting time in seconds (None = wait indefinitely)</li> <li><code>verbose</code> (bool): Display real-time status updates (default: True)</li> </ul> <p>Examples: <pre><code># Quick readiness check before analysis\napi.system.ready_to_start_analysis(timeout=10, verbose=False)\n\n# Wait for CE and detector with status updates\napi.system.ready_to_start_analysis([\"CE1\", \"DAD1\"], timeout=60)\n\n# Wait indefinitely with progress display\napi.system.ready_to_start_analysis(verbose=True)\n\n# Custom module list\napi.system.ready_to_start_analysis([\"CE1\"], timeout=30)\n</code></pre></p> <p>Notes:</p> <ul> <li>Displays progress when verbose=True</li> <li>Modules must be both \"Idle\" and have no NotReady conditions</li> <li>Typical timeouts: 10s (quick check), 60s (standard), 300s (long methods)</li> </ul>"},{"location":"chemstation-api/system/#wait_for_ready","title":"wait_for_ready()","text":"<p>Wait for ChemStation to reach ready state for new analysis.</p> <pre><code>is_ready = api.system.wait_for_ready(timeout=60)\n</code></pre> <p>Parameters:</p> <ul> <li><code>timeout</code> (int): Maximum waiting time in seconds (default: 60)</li> </ul> <p>Returns:</p> <ul> <li><code>True</code> if system reaches ready state within timeout</li> <li><code>False</code> if timeout expires before ready state achieved</li> </ul> <p>Examples: <pre><code># Standard workflow with timeout\nif api.system.wait_for_ready():\n    api.method.run(\"NextSample\")\nelse:\n    print(\"Timeout - check instrument status\")\n\n# Extended wait for long conditioning methods\nif api.system.wait_for_ready(timeout=300):  # 5 minutes\n    start_next_analysis()\n\n# Sequence automation\nfor sample in sample_list:\n    if api.system.wait_for_ready(timeout=120):\n        process_sample(sample)\n</code></pre></p> <p>Notes:</p> <ul> <li>Polls status every second to minimize system load</li> <li>Both STANDBY and PRERUN are considered ready states</li> <li>Returns immediately if already ready</li> </ul>"},{"location":"chemstation-api/system/#emergency-control","title":"Emergency Control","text":""},{"location":"chemstation-api/system/#abort_run","title":"abort_run()","text":"<p>Immediately abort current analysis or sequence execution.</p> <pre><code>api.system.abort_run()\n</code></pre> <p>Examples: <pre><code># Emergency stop\napi.system.abort_run()\n\n# Conditional abort on error detection\nif error_detected:\n    api.system.abort_run()\n    print(\"Analysis aborted due to error\")\n\n# Abort with cleanup\napi.system.abort_run()\ntime.sleep(5)  # Wait for system stabilization\n</code></pre></p> <p>Notes:</p> <ul> <li>Results in immediate termination without post-run conditioning</li> <li>Data up to abort point may be saved</li> <li>Instrument requires manual return to ready state after abort</li> <li>Brief wait for abort completion and system stabilization</li> </ul>"},{"location":"chemstation-api/system/#diagnostic-tools","title":"Diagnostic Tools","text":""},{"location":"chemstation-api/system/#add_register_reader","title":"add_register_reader()","text":"<p>Add comprehensive register inspection tool to ChemStation Debug menu.</p> <pre><code>api.system.add_register_reader(register_reader_macro=r\"ChemstationAPI\\controllers\\macros\\register_reader.mac\")\n</code></pre> <p>Parameters:</p> <ul> <li><code>register_reader_macro</code> (str): Path to register reader macro file (default: included tool)</li> </ul> <p>Examples: <pre><code># Add register browser with default tool\napi.system.add_register_reader()\n\n# Use custom register reader\napi.system.add_register_reader(\"C:\\\\Custom\\\\debug_tools.mac\")\n</code></pre></p> <p>Usage:</p> <p>After execution, look for \"Show Registers\" item in ChemStation's Debug menu. Tool provides: - Browse all ChemStation registers (RC.NET, sequence, method, system) - Inspect object structures and data tables interactively - View and modify header values and text fields - Navigate complex register hierarchies with tree view</p> <p>Notes:</p> <ul> <li>Tool remains available until ChemStation restart</li> <li>Exercise caution when modifying system registers</li> <li>Invaluable for debugging and advanced parameter editing</li> </ul>"},{"location":"chemstation-api/system/#practical-examples","title":"Practical Examples","text":""},{"location":"chemstation-api/system/#analysis-progress-monitoring","title":"Analysis Progress Monitoring","text":"<pre><code># Complete progress monitoring\ndef monitor_analysis():\n    start_time = time.time()\n\n    while api.system.method_on():\n        # Get timing information\n        elapsed = api.system.get_elapsed_analysis_time()\n        remaining = api.system.get_remaining_analysis_time()\n        total = api.system.get_analysis_time()\n\n        # Calculate progress\n        if total &gt; 0:\n            progress = (elapsed / total) * 100\n        else:\n            progress = 0\n\n        # Get status\n        status = api.system.status()\n\n        # Display progress\n        print(f\"\\rStatus: {status} | Progress: {progress:.1f}% | \"\n              f\"Remaining: {remaining:.1f} min\", end='')\n\n        time.sleep(10)\n\n    total_time = (time.time() - start_time) / 60\n    print(f\"\\nAnalysis complete! Total time: {total_time:.1f} minutes\")\n\n# Start monitoring\nmonitor_analysis()\n</code></pre>"},{"location":"chemstation-api/system/#system-readiness-check","title":"System Readiness Check","text":"<pre><code># Complete system validation\ndef check_system_ready():\n    print(\"Checking system status...\")\n\n    # Check basic status\n    status = api.system.status()\n    print(f\"Acquisition status: {status}\")\n\n    # Check RC modules\n    ce_status = api.system.RC_status(\"CE1\")\n    print(f\"CE module: {ce_status}\")\n\n    # Wait for ready if needed\n    if status != \"STANDBY\" or ce_status != \"Idle\":\n        print(\"Waiting for system ready...\")\n        api.system.ready_to_start_analysis(timeout=60)\n\n    print(\"\u2713 System ready for analysis\")\n\ncheck_system_ready()\n</code></pre>"},{"location":"chemstation-api/system/#automated-error-recovery","title":"Automated Error Recovery","text":"<pre><code># Error detection and recovery\ndef safe_analysis_with_recovery(sample_name):\n    max_attempts = 3\n\n    for attempt in range(max_attempts):\n        try:\n            # Check system ready\n            api.system.ready_to_start_analysis(timeout=30)\n\n            # Start analysis\n            api.method.run(sample_name)\n\n            # Monitor for errors\n            while api.system.method_on():\n                status = api.system.status()\n                if status == \"ERROR\":\n                    raise RuntimeError(\"Analysis error detected\")\n                time.sleep(10)\n\n            print(f\"\u2713 Analysis {sample_name} completed successfully\")\n            return True\n\n        except Exception as e:\n            print(f\"Attempt {attempt + 1} failed: {e}\")\n\n            if attempt &lt; max_attempts - 1:\n                print(\"Attempting recovery...\")\n                api.system.abort_run()\n                time.sleep(30)\n            else:\n                print(\"All attempts failed\")\n                return False\n\n    return False\n\n# Use with error recovery\nsafe_analysis_with_recovery(\"Sample_001\")\n</code></pre>"},{"location":"chemstation-api/validation/","title":"Validation Module - Input Validation and System State Checking","text":"<p>Comprehensive validation capabilities for ChemStation operations including file existence, system state, and prerequisite checking.</p>"},{"location":"chemstation-api/validation/#overview","title":"Overview","text":"<p>The Validation module provides:</p> <ul> <li>File System Validation: Method and sequence file existence checking</li> <li>Vial Management Validation: Carousel vial presence and position verification</li> <li>System State Validation: Instrument readiness and operational state checking</li> <li>Method Execution Validation: Analysis startup and execution verification</li> </ul> <p>Validation Philosophy: Fail fast - detect problems before they cause system errors</p>"},{"location":"chemstation-api/validation/#file-system-validation","title":"File System Validation","text":""},{"location":"chemstation-api/validation/#validate_sequence_name","title":"validate_sequence_name()","text":"<p>Validate that sequence file exists in specified directory.</p> <pre><code>api.validation.validate_sequence_name(sequence, dir_path=\"_SEQPATH$\")\n</code></pre> <p>Parameters:</p> <ul> <li><code>sequence</code> (str): Sequence name (without .S extension)</li> <li><code>dir_path</code> (str): Path to sequence directory (defaults to ChemStation sequence directory)</li> </ul> <p>Examples: <pre><code># Validate before loading\napi.validation.validate_sequence_name(\"Protein_Analysis\")\n\n# Validate custom directory\napi.validation.validate_sequence_name(\"TestSeq\", \"C:\\\\Custom\\\\Sequences\\\\\")\n</code></pre></p> <p>Notes:</p> <ul> <li>Case-insensitive matching</li> <li>Automatically appends .S extension for checking</li> <li>Essential for preventing sequence loading failures</li> </ul>"},{"location":"chemstation-api/validation/#validate_method","title":"validate_method()","text":"<p>Validate that CE method file exists in specified directory.</p> <pre><code>api.validation.validate_method(method, dir_path=\"_METHODPATHS$\", check_vials=False)\n</code></pre> <p>Parameters:</p> <ul> <li><code>method</code> (str): Method name (without .M extension)</li> <li><code>dir_path</code> (str): Path to method directory (defaults to ChemStation method directory)</li> <li><code>check_vials</code> (bool): If True, also validates that method's vials are in carousel</li> </ul> <p>Examples: <pre><code># Basic method validation\napi.validation.validate_method(\"CE_Protein_Analysis\")\n\n# Validate with vial checking\napi.validation.validate_method(\"CE_Analysis\", check_vials=True)\n\n# Validate custom directory\napi.validation.validate_method(\"TestMethod\", \"C:\\\\Methods\\\\Special\\\\\")\n</code></pre></p> <p>Notes:</p> <ul> <li>Case-insensitive filename matching</li> <li>.M extension added automatically</li> <li>Vial validation extracts requirements from method XML</li> </ul>"},{"location":"chemstation-api/validation/#validate_vials_in_method","title":"validate_vials_in_method()","text":"<p>Validate that all vials required by the method are present in carousel.</p> <pre><code>api.validation.validate_vials_in_method(method=\"_METHFILE$\", dir_path=\"_METHODPATHS$\")\n</code></pre> <p>Parameters:</p> <ul> <li><code>method</code> (str): Method name or \"_METHFILE$\" for currently loaded method</li> <li><code>dir_path</code> (str): Path to method directory</li> </ul> <p>Examples: <pre><code># Validate current loaded method\napi.validation.validate_vials_in_method()\n\n# Validate specific method\napi.validation.validate_vials_in_method(\"CE_Protein_Analysis\")\n</code></pre></p> <p>Notes:</p> <ul> <li>Extracts vial numbers from method XML file</li> <li>Validates all required vials are present in system</li> <li>Essential before method execution</li> </ul>"},{"location":"chemstation-api/validation/#vial-management-validation","title":"Vial Management Validation","text":""},{"location":"chemstation-api/validation/#validate_vial_in_system","title":"validate_vial_in_system()","text":"<p>Validate that specified vial is present somewhere in the CE system.</p> <pre><code>api.validation.validate_vial_in_system(vial)\n</code></pre> <p>Parameters:</p> <ul> <li><code>vial</code> (int): Vial position number to check (1-50)</li> </ul> <p>Examples: <pre><code># Validate before loading\napi.validation.validate_vial_in_system(15)\n\n# Validate sample list\nsample_vials = [10, 11, 12, 15, 20]\nfor vial in sample_vials:\n    api.validation.validate_vial_in_system(vial)\n</code></pre></p> <p>Notes:</p> <ul> <li>Checks all possible vial locations (carousel + lift positions)</li> <li>State \"4\" (out_system) indicates vial not detected</li> <li>Essential before any vial manipulation operations</li> </ul>"},{"location":"chemstation-api/validation/#vial_in_position","title":"vial_in_position()","text":"<p>Validate that a vial is loaded at the specified lift position.</p> <pre><code>api.validation.vial_in_position(position)\n</code></pre> <p>Parameters:</p> <ul> <li><code>position</code> (str): Lift position to check (\"inlet\", \"outlet\", \"replenishment\")</li> </ul> <p>Examples: <pre><code># Check before injection\napi.validation.vial_in_position(\"inlet\")\n\n# Verify setup before analysis\napi.validation.vial_in_position(\"inlet\")   # Sample vial\napi.validation.vial_in_position(\"outlet\")  # Waste vial\n</code></pre></p> <p>Notes:</p> <ul> <li>Essential before operations requiring vial contact</li> <li>Different from vial_in_system which checks any location</li> <li>Prevents electrode contact failures and injection errors</li> </ul>"},{"location":"chemstation-api/validation/#get_vialtable","title":"get_vialtable()","text":"<p>Get comprehensive status of all carousel positions.</p> <pre><code>vial_table = api.validation.get_vialtable()\n</code></pre> <p>Returns:</p> <ul> <li><code>dict</code>: Dictionary mapping position numbers (1-48) to boolean presence status</li> </ul> <p>Examples: <pre><code># Get complete vial overview\nvial_table = api.validation.get_vialtable()\noccupied_positions = [pos for pos, present in vial_table.items() if present]\nprint(f\"Vials present at positions: {occupied_positions}\")\n\n# Check specific positions\nvial_table = api.validation.get_vialtable()\nfor pos in [10, 11, 12]:\n    if vial_table[pos]:\n        print(f\"Vial at position {pos} ready\")\n\n# Find empty positions\nempty_positions = [pos for pos, present in vial_table.items() if not present]\n</code></pre></p> <p>Notes:</p> <ul> <li>Includes positions 1-48 (position 49 handled separately)</li> <li>True means vial detected (any location in system)</li> <li>Useful for sequence planning and vial management</li> </ul>"},{"location":"chemstation-api/validation/#list_vial_validation","title":"list_vial_validation()","text":"<p>Validate that all vials in list are present in carousel system.</p> <pre><code>api.validation.list_vial_validation(vials)\n</code></pre> <p>Parameters:</p> <ul> <li><code>vials</code> (list): List of vial position numbers to validate</li> </ul> <p>Examples: <pre><code># Validate sequence vials\nsequence_vials = [10, 11, 12, 15, 20]\napi.validation.list_vial_validation(sequence_vials)\n\n# Validate range of positions\napi.validation.list_vial_validation(list(range(1, 25)))  # Check 1-24\n\n# Handle validation errors\ntry:\n    api.validation.list_vial_validation([1, 2, 3, 4, 5])\nexcept VialError as e:\n    print(f\"Missing vials: {e}\")\n</code></pre></p> <p>Notes:</p> <ul> <li>Efficient batch checking using single carousel query</li> <li>Reports all missing vials simultaneously</li> <li>Essential before sequence execution</li> </ul>"},{"location":"chemstation-api/validation/#system-state-validation","title":"System State Validation","text":""},{"location":"chemstation-api/validation/#validate_use_carousel","title":"validate_use_carousel()","text":"<p>Validate that carousel is available for vial operations.</p> <pre><code>api.validation.validate_use_carousel(num_attempt=3)\n</code></pre> <p>Parameters:</p> <ul> <li><code>num_attempt</code> (int): Number of validation attempts before raising error</li> </ul> <p>Examples: <pre><code># Check before vial operations\napi.validation.validate_use_carousel()\n\n# Check with custom attempts\napi.validation.validate_use_carousel(num_attempt=5)\n\n# Validate before batch operations\napi.validation.validate_use_carousel()\nfor vial in vial_list:\n    api.ce.load_vial_to_position(vial, \"inlet\")\n</code></pre></p> <p>Notes:</p> <ul> <li>\"Idle\" and \"Run\" states allow carousel operations</li> <li>Other states (Error, Maintenance) block carousel use</li> <li>Function waits 2 seconds between validation attempts</li> </ul>"},{"location":"chemstation-api/validation/#validate_method_run","title":"validate_method_run()","text":"<p>Validate that method execution started successfully.</p> <pre><code>api.validation.validate_method_run()\n</code></pre> <p>Examples: <pre><code># Validate after method start\napi.method.run(\"Sample001\")\napi.validation.validate_method_run()  # Confirm it started\n\n# Use in automated workflows\ntry:\n    api.method.execution_method_with_parameters(15, \"CE_Method\", \"Sample\")\n    api.validation.validate_method_run()\n    print(\"Method started successfully\")\nexcept MethodError:\n    print(\"Method failed to start - check instrument status\")\n</code></pre></p> <p>Notes:</p> <ul> <li>Should be called shortly after method start commands</li> <li>_MethodOn=1 indicates successful method execution</li> <li>Essential for detecting silent method startup failures</li> </ul>"},{"location":"chemstation-api/validation/#utility-functions","title":"Utility Functions","text":""},{"location":"chemstation-api/validation/#extract_vials_from_xml","title":"extract_vials_from_xml()","text":"<p>Extract vial numbers from CE method XML configuration file.</p> <pre><code>vials = api.validation.extract_vials_from_xml(method_path)\n</code></pre> <p>Parameters:</p> <ul> <li><code>method_path</code> (str): Path to the CE method directory (.M folder)</li> </ul> <p>Returns:</p> <ul> <li><code>list</code>: Sorted list of unique vial position numbers (integers)</li> </ul> <p>Examples: <pre><code># Extract vials from method\nvials = api.validation.extract_vials_from_xml(\"C:/Methods/CE_Protein.M\")\nprint(f\"Method requires vials: {vials}\")\n\n# Use with method validation\nmethod_dir = os.path.join(methods_path, \"CE_Protein.M\")\nrequired_vials = api.validation.extract_vials_from_xml(method_dir)\napi.validation.list_vial_validation(required_vials)\n</code></pre></p> <p>Notes:</p> <ul> <li>Automatically constructs path to method XML file</li> <li>Searches for all <code>&lt;Vialnumber&gt;&lt;/Vialnumber&gt;</code> tags</li> <li>Filters negative vial numbers (-1, etc.)</li> <li>Returns empty list on file read errors</li> </ul>"},{"location":"chemstation-api/validation/#practical-examples","title":"Practical Examples","text":""},{"location":"chemstation-api/validation/#pre-analysis-validation","title":"Pre-Analysis Validation","text":"<pre><code># Complete validation before starting analysis\ndef validate_analysis_ready(method_name, sample_vial):\n    try:\n        # Check method exists\n        api.validation.validate_method(method_name, check_vials=True)\n\n        # Check sample vial present\n        api.validation.validate_vial_in_system(sample_vial)\n\n        # Check carousel available\n        api.validation.validate_use_carousel()\n\n        print(\"\u2713 All validations passed - ready to start\")\n        return True\n\n    except Exception as e:\n        print(f\"\u2717 Validation failed: {e}\")\n        return False\n\n# Use before analysis\nif validate_analysis_ready(\"CE_Protein\", 15):\n    api.method.execution_method_with_parameters(15, \"CE_Protein\", \"Sample_001\")\n</code></pre>"},{"location":"chemstation-api/validation/#batch-validation","title":"Batch Validation","text":"<pre><code># Validate entire batch before starting\nsample_vials = [10, 11, 12, 15, 20]\nmethods = [\"CE_Analysis\", \"CE_QC\"]\n\n# Check all vials\napi.validation.list_vial_validation(sample_vials)\n\n# Check all methods\nfor method in methods:\n    api.validation.validate_method(method)\n\nprint(\"Batch validation complete\")\n</code></pre>"},{"location":"sia-api/ce_workflows/","title":"CE Workflows - SI Integration","text":""},{"location":"sia-api/ce_workflows/#overview","title":"Overview","text":"<p>The <code>PreparedSIMethods</code> class provides high-level automation workflows that combine SI sample preparation with Capillary Electrophoresis system. These workflows handle complex sequences of operations for complete analytical automation.</p> <p>Napsat \u017ee to obsahuje skript a konfigur\u00e1k</p>"},{"location":"sia-api/ce_workflows/#system-integration","title":"System Integration","text":"<pre><code>from ChemstationAPI import ChemstationAPI\nfrom SI_API.devices import SyringeController, ValveSelector  \nfrom SI_API.methods import PreparedSIMethods\n\n# Initialize all components\nce_api = ChemstationAPI()\nsyringe = SyringeController(\"COM3\", syringe_size=1000)\nvalve = ValveSelector(\"COM4\", num_positions=8)\n\n# Create integrated workflow system\nworkflow = PreparedSIMethods(\n    chemstation_controller=ce_api,\n    syringe_device=syringe,\n    valve_device=valve\n)\n</code></pre>"},{"location":"sia-api/ce_workflows/#core-workflow-components","title":"Core Workflow Components","text":""},{"location":"sia-api/ce_workflows/#system-initialization","title":"System Initialization","text":"<p>Every analytical session starts with complete system preparation:</p> <pre><code># Complete system initialization and cleaning\nworkflow.system_initialization_and_cleaning(\n    waste_vial=50,  # Waste collection vial\n    bubble=20       # Air bubble size (\u00b5L)\n)\n</code></pre> <p>What happens during initialization:</p> <ol> <li>Syringe homing and speed setting</li> <li>Holding coil flushing with methanol</li> <li>DI water rinse cycles</li> <li>Transfer line conditioning</li> <li>Air bubble creation for separation kapaliny v holding coil a ventilem</li> </ol>"},{"location":"sia-api/ce_workflows/#sample-handling-integration","title":"Sample Handling Integration","text":"<p>The workflows automatically coordinate between SI preparation and CE autosampler:</p> <pre><code># Load vial to CE replenishment position\n\n# Perform SI operations on loaded vial\nworkflow.continuous_fill(vial=15, volume=500, solvent_port=3)\n\n# Unload vial back to carousel  \n</code></pre>"},{"location":"sia-api/ce_workflows/#flow-modes","title":"Flow Modes","text":""},{"location":"sia-api/ce_workflows/#continuous-flow-mode","title":"Continuous Flow Mode","text":"<p>Ideal for multiple samples with the same solvent:</p> <pre><code># Prepare system for continuous flow\nworkflow.prepare_continuous_flow(\n    solvent_port=3,              # DI water port\n    transfer_coil_flush=600,     # Transfer line volume\n    speed=2000                   # Flow rate (\u00b5L/min)\n)\n\n# Fill multiple vials efficiently\nsample_vials = [10, 11, 12, 13, 14]\nfor vial in sample_vials:\n    workflow.continuous_fill(\n        vial=vial,\n        volume=1000,             # 1 mL per vial  \n        solvent_port=3,          # DI water\n        flush_needle=50          # Needle cleaning\n    )\n</code></pre> <p>Continuous flow characteristics:</p> <ul> <li>Transfer line pre-filled with solvent</li> <li>Faster operation (no air gaps)</li> <li>Consistent flow properties</li> <li>Best for same solvent, multiple vials</li> </ul>"},{"location":"sia-api/ce_workflows/#batch-flow-mode","title":"Batch Flow Mode","text":"<p>Better for different solvents or single operations:</p> <pre><code># Prepare for batch operations\nworkflow.prepare_batch_flow(\n    solvent_port=5,              # Methanol port\n    transfer_coil_volume=600,    # Line volume\n    speed=1500                   # Flow rate\n)\n\n# Fill with air-driven dispensing\nworkflow.batch_fill(\n    vial=20,\n    volume=750,                  # Volume to dispense\n    solvent_port=5,              # Methanol\n    bubble_volume=15,            # Air separation\n    wait=2                       # Wait after dispensing\n)\n</code></pre> <p>Batch flow characteristics:</p> <ul> <li>Air-driven dispensing</li> <li>Complete separation between solutions</li> <li>Suitable for solvent changes</li> <li>Independent operations</li> </ul>"},{"location":"sia-api/ce_workflows/#sample-preparation-workflows","title":"Sample Preparation Workflows","text":""},{"location":"sia-api/ce_workflows/#automated-dilution","title":"Automated Dilution","text":"<pre><code>def add_solvent():\n    \"\"\"Add solvent k serii vialek\"\"\"\n\n    # Initialize system\n    workflow.system_initialization_and_cleaning()\n\n    # Prepare for water addition\n    workflow.prepare_continuous_flow(solvent_port=3)  # DI water\n\n    sample_vials = [15, 16, 17, 18, 19]\n    volme_solvent = 1000\n    solvent_port = 3\n\n    for vial in sample_vials:\n        # Add 900 \u00b5L diluent (for 1:10 dilution)\n        workflow.continuous_fill(\n            vial=vial,\n            volume=900,\n            solvent_port=3,\n        )\n\n        print(f\"Vial {vial}: Add {volume_solvent} \u00b5L\")\n\n    print(\"All dilutions prepared - add samples as indicated\")\n\nprepare_dilution_series()\n</code></pre>"},{"location":"sia-api/ce_workflows/#multi-solvent-sample-preparation","title":"Multi-Solvent Sample Preparation","text":"<pre><code>def prepare_mixed_samples():\n    \"\"\"Prepare samples with multiple reagents\"\"\"\n\n    sample_preparations = [\n        {'vial': 20, 'water': 500, 'buffer': 200, 'reagent': 50},\n        {'vial': 21, 'water': 600, 'buffer': 150, 'reagent': 25},\n        {'vial': 22, 'water': 400, 'buffer': 300, 'reagent': 75}\n    ]\n\n    for prep in sample_preparations:\n        print(f\"Preparing vial {prep['vial']}\")\n\n        # Use batch mode for different solvents\n        workflow.batch_fill_multiple_solvents(\n            vial=prep['vial'],\n            solvent_ports=[3, 6, 7],  # Water, buffer, reagent\n            volumes=[prep['water'], prep['buffer'], prep['reagent']],\n            air_push_volume=20\n        )\n\nprepare_mixed_samples()\n</code></pre>"},{"location":"sia-api/ce_workflows/#sample-homogenization","title":"Sample Homogenization","text":""},{"location":"sia-api/ce_workflows/#liquid-mixing","title":"Liquid Mixing","text":"<p>Gentle mixing for sensitive samples:</p> <pre><code># Prepare system for liquid homogenization\nworkflow.prepare_for_liquid_homogenization()\n\n# Mix by liquid aspiration/dispensing\nworkflow.homogenize_by_liquid_mixing(\n    vial=15,\n    volume_aspirate=400,         # Volume per cycle\n    num_cycles=3,                # Number of cycles\n    aspirate_speed=1500,         # Gentle aspiration\n    dispense_speed=2000,         # Controlled dispensing\n    clean_after=True             # Clean transfer line\n)\n</code></pre>"},{"location":"sia-api/ce_workflows/#air-bubble-mixing","title":"Air Bubble Mixing","text":"<p>Vigorous mixing for thorough homogenization:</p> <pre><code># Air bubble mixing for viscous samples\nworkflow.homogenize_by_air_mixing(\n    vial=22,\n    volume_aspirate=300,         # Liquid per cycle\n    air_bubble_volume=100,       # Air bubble size\n    num_cycles=5,                # More cycles for thorough mixing\n    wait_between_cycles=8.0,     # Time for bubble action\n    aspirate_speed=800           # Slower for viscous samples\n)\n</code></pre>"},{"location":"sia-api/ce_workflows/#best-practices","title":"Best Practices","text":""},{"location":"sia-api/ce_workflows/#1-always-initialize-first","title":"1. Always Initialize First","text":"<pre><code># Start every session with system initialization\nworkflow.system_initialization_and_cleaning()\n</code></pre>"},{"location":"sia-api/ce_workflows/#2-match-flow-mode-to-application","title":"2. Match Flow Mode to Application","text":"<ul> <li>Continuous flow: Same solvent, multiple samples, speed priority</li> <li>Batch flow: Different solvents, contamination concerns</li> </ul>"},{"location":"sia-api/ce_workflows/#3-plan-needle-cleaning","title":"3. Plan Needle Cleaning","text":"<pre><code># Clean between different sample types\nworkflow.continuous_fill(vial=10, volume=1000, solvent_port=3, flush_needle=50)\n# Skip cleaning within replicate groups  \nworkflow.continuous_fill(vial=11, volume=1000, solvent_port=3, flush_needle=None)\n</code></pre>"},{"location":"sia-api/ce_workflows/#4-monitor-critical-operations","title":"4. Monitor Critical Operations","text":"<pre><code># Enable verbose mode for important workflows\nworkflow.update_config(verbose=True)\n\n# Check system status\nstatus = workflow.get_system_status()\nprint(f\"Syringe size: {status['syringe_size']} \u00b5L\")\nprint(f\"Port assignments: {status['port_assignments']}\")\n</code></pre>"},{"location":"sia-api/ce_workflows/#custom-configuration","title":"Custom Configuration","text":"<p>n\u011bjak tady popi\u0161 konfigur\u00e1k</p>"},{"location":"sia-api/core_communication/","title":"Core Communication System","text":""},{"location":"sia-api/core_communication/#overview","title":"Overview","text":"<p>The <code>CommandSender</code> class provides the foundation for all SIA device communication. It handles serial port management, command formatting, and response processing for any RS-232/USB device.</p>"},{"location":"sia-api/core_communication/#how-it-works","title":"How It Works","text":""},{"location":"sia-api/core_communication/#command-formatting","title":"Command Formatting","text":"<p>Commands are automatically formatted as: <code>{prefix}{address}{command}\\r</code></p> <pre><code># Your command: \"MOVE 5\"\n# Sent to device: \"/1MOVE 5\\r\"\n</code></pre>"},{"location":"sia-api/core_communication/#port-management","title":"Port Management","text":"<ul> <li>Opens port only when needed</li> <li>Handles connection errors gracefully</li> <li>Closes port after each operation</li> </ul>"},{"location":"sia-api/core_communication/#response-handling","title":"Response Handling","text":"<ul> <li>Optional response capture with timeout</li> <li>Automatic encoding/decoding</li> <li>Error detection and reporting</li> </ul>"},{"location":"sia-api/core_communication/#basic-usage","title":"Basic Usage","text":"<pre><code>from SIA_API.core import CommandSender\n\n# Initialize device communication\ndevice = CommandSender(\n    port=\"COM3\",\n    prefix=\"/\",      # Command prefix (device-specific)\n    address=\"1\",     # Device address (for multi-device setups)\n    baudrate=9600    # Communication speed\n)\n\n# Send command without response\ndevice.send_command(\"INITIALIZE\")\n\n# Send command and get response\nresponse = device.send_command(\"STATUS?\", get_response=True)\nprint(f\"Device status: {response}\")\n</code></pre>"},{"location":"sia-api/core_communication/#advanced-features","title":"Advanced Features","text":""},{"location":"sia-api/core_communication/#completion-waiting","title":"Completion Waiting","text":"<pre><code>def wait_for_ready():\n    \"\"\"Custom function to wait for operation completion\"\"\"\n    time.sleep(2)\n\n# Send command and wait for completion\ndevice.send_command(\n    \"MOVE_TO_POSITION 5\",\n    wait_for_completion=wait_for_ready,\n    response_timeout=10\n)\n</code></pre> <p>Important: The wait_for_completion function is called while the serial port remains open. This allows for continuous monitoring or additional operations during the waiting period.</p>"},{"location":"sia-api/core_communication/#custom-device-integration","title":"Custom Device Integration","text":""},{"location":"sia-api/core_communication/#arduino-integration","title":"Arduino Integration","text":"<p>If you have a pre-programmed Arduino (or similar microcontroller) that responds to specific serial commands, you can easily create a Python controller to integrate it with your SIA system.</p>"},{"location":"sia-api/core_communication/#step-1-identify-device-commands","title":"Step 1: Identify Device Commands","text":"<p>First, determine what commands your Arduino understands by checking your Arduino code or documentation:</p> <p>Example Arduino commands: <pre><code>START 150     -&gt; Starts operation at speed 150, returns \"OK\"\nSTOP          -&gt; Stops operation, returns \"OK\"  \nSTATUS?       -&gt; Returns current status: \"SPEED:150,RUNNING:YES\"\nTEMP?         -&gt; Returns temperature: \"TEMP:25.4\"\n</code></pre></p>"},{"location":"sia-api/core_communication/#step-2-create-python-controller","title":"Step 2: Create Python Controller","text":"<p>Create a Python class that wraps your Arduino commands:</p> <pre><code>from SIA_API.core import CommandSender\n\nclass ArduinoController(CommandSender):\n    \"\"\"Controller for pre-programmed Arduino device.\"\"\"\n\n    def __init__(self, port, baudrate=9600):\n        # Most Arduino devices don't need prefix/address\n        super().__init__(port=port, prefix=\"\", address=\"\", baudrate=baudrate)\n\n    def start_operation(self, speed):\n        \"\"\"Start Arduino operation at specified speed.\"\"\"\n        response = self.send_command(f\"START {speed}\", get_response=True)\n\n        if \"OK\" in response:\n            print(f\"\u2713 Started at speed {speed}\")\n            return True\n        else:\n            raise RuntimeError(f\"Start failed: {response}\")\n\n    def stop_operation(self):\n        \"\"\"Stop Arduino operation.\"\"\"\n        response = self.send_command(\"STOP\", get_response=True)\n\n        if \"OK\" in response:\n            print(\"\u2713 Operation stopped\")\n            return True\n        else:\n            raise RuntimeError(f\"Stop failed: {response}\")\n\n    def get_status(self):\n        \"\"\"Get current Arduino status.\"\"\"\n        response = self.send_command(\"STATUS?\", get_response=True)\n\n        # Parse response: \"SPEED:150,RUNNING:YES\"\n        status = {}\n\n        if \"SPEED:\" in response:\n            speed_part = response.split(\"SPEED:\")[1].split(\",\")[0]\n            status['speed'] = int(speed_part)\n\n        if \"RUNNING:\" in response:\n            running_part = response.split(\"RUNNING:\")[1]\n            status['running'] = \"YES\" in running_part\n\n        return status\n\n    def get_temperature(self):\n        \"\"\"Read temperature from Arduino sensor.\"\"\"\n        response = self.send_command(\"TEMP?\", get_response=True)\n\n        # Parse response: \"TEMP:25.4\"\n        if \"TEMP:\" in response:\n            temp_str = response.split(\"TEMP:\")[1]\n            return float(temp_str)\n        else:\n            raise RuntimeError(f\"Failed to parse temperature: {response}\")\n\n# Usage example\narduino = ArduinoController(\"COM5\")\narduino.start_operation(150)\nstatus = arduino.get_status()\ntemperature = arduino.get_temperature()\narduino.stop_operation()\n</code></pre> <p>The CommandSender design allows easy integration with any device that uses serial communication by understanding the device's command protocol and implementing the appropriate Python wrapper class.</p>"},{"location":"sia-api/sia_introduction/","title":"SI API - Sequential Injection Module","text":""},{"location":"sia-api/sia_introduction/#what-is-sequential-injection","title":"What is Sequential Injection?","text":"<p>Sequential Injection (SI) is an automated liquid handling technique that enables precise control of fluid movement for analytical chemistry applications. Unlike manual pipetting, SI provides reproducible, computer-controlled operations with microliter precision.</p>"},{"location":"sia-api/sia_introduction/#si_api-module-overview","title":"SI_API Module Overview","text":"<p>The SI_API provides Python control for Sequential Injection systems with three main components:</p>"},{"location":"sia-api/sia_introduction/#core-communication-core","title":"Core Communication (<code>core/</code>)","text":"<ul> <li>Universal serial interface for analytical instruments</li> <li>Extensible design for custom devices (Arduino, ESP32, etc.)</li> <li>Error handling and connection management</li> <li>Protocol abstraction for different command formats</li> </ul>"},{"location":"sia-api/sia_introduction/#device-controllers-devices","title":"Device Controllers (<code>devices/</code>)","text":"<ul> <li>SyringeController: Complete syringe pump automation</li> <li>ValveSelector: Multi-position valve control</li> </ul>"},{"location":"sia-api/sia_introduction/#workflow-methods-methods","title":"Workflow Methods (<code>methods/</code>)","text":"<ul> <li>High-level automation: Complete analytical procedures</li> <li>CE integration: Seamless connection with ChemStation</li> <li>Sample preparation: Automated dilution, mixing, homogenization</li> </ul>"},{"location":"sia-api/sia_introduction/#documentation-resources","title":"Documentation Resources","text":"<p>For detailed hardware specifications and setup procedures:</p> <ul> <li>Device Manuals - n\u011bco tam napi\u0161 o tom, \u017ee ve slo\u017ece jsou v\u0161echny dokumetace k pou\u017e\u00edvan\u00fdm komponent\u00e1m</li> </ul>"},{"location":"sia-api/syringe_control/","title":"Syringe Control","text":""},{"location":"sia-api/syringe_control/#overview","title":"Overview","text":"<p>The <code>SyringeController</code> class provides complete automation of syringe pumps for precise fluid handling in SI systems. It supports Cavro XCalibur series.</p>"},{"location":"sia-api/syringe_control/#quick-start","title":"Quick Start","text":"<pre><code>from SI_API.devices import SyringeController\n\n# Initialize syringe pump\nsyringe = SyringeController(\n    port=\"COM3\",        # Serial port\n    syringe_size=1000,  # 1000 \u00b5L syringe\n    microstep_mode=False  # Standard resolution\n)\n\n# Basic operations\nsyringe.initialize()                    # Home to zero position\nsyringe.set_speed_uL_min(1500)         # Set flow rate\nsyringe.aspirate(500)                   # Draw 500 \u00b5L\nsyringe.dispense(250)                   # Dispense 250 \u00b5L\n</code></pre>"},{"location":"sia-api/syringe_control/#supported-syringe-sizes","title":"Supported Syringe Sizes","text":"<p>The controller supports standard syringe volumes:</p> <ul> <li>50, 100, 250, 500, 1000, 2500, 5000 \u00b5L</li> </ul> <p>Each size has optimized parameters for:</p> <ul> <li>Resolution: Volume per increment (0.02-1.67 \u00b5L depending on size)</li> <li>Speed limits: Minimum and maximum flow rates</li> </ul>"},{"location":"sia-api/syringe_control/#basic-operations","title":"Basic Operations","text":""},{"location":"sia-api/syringe_control/#initialization","title":"Initialization","text":"<p>Always start with syringe initialization:</p> <pre><code># Initialize to home position (volume = 0)\nsyringe.initialize()\nprint(f\"Syringe ready: {syringe.volume_counter} \u00b5L\")\n</code></pre>"},{"location":"sia-api/syringe_control/#volume-control","title":"Volume Control","text":"<pre><code># Aspirate specific volume\nsyringe.aspirate(300)           # Draw 300 \u00b5L\nprint(f\"Current volume: {syringe.volume_counter} \u00b5L\")  # Shows 300\n\n# Aspirate to full capacity\nsyringe.aspirate()              # Fill completely (700 \u00b5L remaining)\n\n# Dispense specific volume  \nsyringe.dispense(200)           # Dispense 200 \u00b5L\n\n# Dispense all contents\nsyringe.dispense()              # Empty completely\n</code></pre>"},{"location":"sia-api/syringe_control/#flow-rate-control","title":"Flow Rate Control","text":"<pre><code># Set different speeds for different operations\nsyringe.set_speed_uL_min(3000)  # Fast transfer\nsyringe.set_speed_uL_min(1000)  # Precise dispensing  \nsyringe.set_speed_uL_min(500)   # Gentle mixing\n\n# Speed limits depend on syringe size:\n# Minimum: 0.05 \u00d7 syringe_size \u00b5L/min\n# Maximum: 60 \u00d7 syringe_size \u00b5L/min\n</code></pre>"},{"location":"sia-api/syringe_control/#emergency-operations","title":"Emergency Operations","text":""},{"location":"sia-api/syringe_control/#emergency-stop","title":"Emergency Stop","text":"<pre><code># Immediately halt all syringe operations\nsyringe.emergency_stop()\n</code></pre>"},{"location":"sia-api/syringe_control/#volume-tracking","title":"Volume Tracking","text":"<p>The controller automatically tracks syringe contents:</p> <pre><code># Check current volume\nsyringe.print_volume_in_syringe()\n# Output: \"The current volume in the syringe is: 250.0 \u00b5l\"\n\n# Volume validation prevents errors\ntry:\n    syringe.aspirate(2000)  # Exceeds 1000 \u00b5L capacity\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n</code></pre>"},{"location":"sia-api/syringe_control/#valve-control","title":"Valve Control","text":"<p>For syringes with attached valves:</p> <pre><code># Configure valve type first\nsyringe.configuration_valve_type('3-Port')\n\n# Control valve positions\nsyringe.valve_in()    # Input position (aspiration)\nsyringe.valve_out()   # Output position (dispensing)  \nsyringe.valve_up()    # Bypass/waste position\n</code></pre>"},{"location":"sia-api/syringe_control/#supported-valve-types","title":"Supported Valve Types","text":"<ul> <li>'No' - No valve attached</li> <li>'3-Port' - Standard 3-way valve</li> <li>'4-Port' - 4-way selection valve</li> <li>'6-Port distribution' - 6-port selection</li> <li>'12-Port distribution' - 12-port selection</li> <li>And more (see documentation)</li> </ul>"},{"location":"sia-api/syringe_control/#advanced-features","title":"Advanced Features","text":""},{"location":"sia-api/syringe_control/#progress-monitoring","title":"Progress Monitoring","text":"<pre><code># Show progress bar during long operations\nsyringe.aspirate(1000, show_progress=True)\n# Output: Processing: 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 4.2s/6.3s [00:04&lt;00:02]\n</code></pre>"},{"location":"sia-api/syringe_control/#high-resolution-mode","title":"High-Resolution Mode","text":"<pre><code># Enable microstep mode for higher precision\nsyringe.set_microstep_mode(True)\nprint(f\"Resolution: {syringe.resolution:.3f} \u00b5L/step\")\n# Standard: ~0.33 \u00b5L/step \u2192 Microstep: ~0.04 \u00b5L/step\n</code></pre>"},{"location":"sia-api/syringe_control/#documentation-references","title":"Documentation References","text":"<p>For detailed hardware information, command specifications, and troubleshooting:</p> <ul> <li>Cavro XCalibur Operating Manual - Comprehensive pump specifications and setup</li> </ul>"},{"location":"sia-api/valve_control/","title":"Valve Control","text":""},{"location":"sia-api/valve_control/#overview","title":"Overview","text":"<p>The <code>ValveSelector</code> class controls multi-position valve selectors for automated fluid routing in SI systems.</p>"},{"location":"sia-api/valve_control/#quick-start","title":"Quick Start","text":"<pre><code>from SI_API.devices import ValveSelector\n\n# Initialize valve selector\nvalve = ValveSelector(\n    port=\"COM4\",         # Serial port\n    num_positions=8,     # 8-position valve\n    prefix=\"/Z\",         # VICI standard prefix\n    baudrate=9600        # Communication speed\n)\n</code></pre>"},{"location":"sia-api/valve_control/#basic-operations","title":"Basic Operations","text":""},{"location":"sia-api/valve_control/#position-control","title":"Position Control","text":"<pre><code># Move to specific positions\nvalve.position(1)    # Position 1\nvalve.position(3)    # Position 3\nvalve.position(8)    # Position 8\n\nvalve.position(15)  # Error: exceeds 8 positions\n</code></pre>"},{"location":"sia-api/valve_control/#reliable-positioning","title":"Reliable Positioning","text":"<pre><code>valve.position(5, num_attempts=5)  # Po\u0161le p\u0159\u00edkaz 5x\n\n# Some valves may not move on first attempt\n# Multiple attempts ensure reliable positioning\n</code></pre>"},{"location":"sia-api/valve_control/#documentation-references","title":"Documentation References","text":"<p>For comprehensive valve specifications and setup procedures:</p> <ul> <li>VICI Universal Actuator Manual - Complete hardware specifications and setup procedures</li> </ul>"},{"location":"tutorials/calibration/","title":"Calibration Creation - Automated Standards Preparation","text":"<p>Framework for automated preparation and analysis of calibration standards.</p>"},{"location":"tutorials/calibration/#overview","title":"Overview","text":"<p>The calibration creation module provides automated preparation of calibration curves through systematic dilution and analysis of standard solutions. Currently implemented as a framework for future development.</p>"},{"location":"tutorials/calibration/#current-implementation","title":"Current Implementation","text":""},{"location":"tutorials/calibration/#available-modules","title":"Available Modules","text":"<pre><code>from ChemstationAPI import ChemstationAPI\nfrom SIA_API.methods import PreparedSIMethods\nfrom SIA_API.devices import SyringeController, ValveSelector\n</code></pre> <p>Status: Framework prepared, implementation in progress.</p>"},{"location":"tutorials/calibration/#planned-functionality","title":"Planned Functionality","text":""},{"location":"tutorials/calibration/#calibration-types","title":"Calibration Types","text":"<p>Linear Calibration Series - Automated dilution from stock solution - Configurable concentration range - Multiple calibration points</p> <p>Matrix-Matched Standards - Sample matrix dilution series - Interference compensation - Method validation standards</p> <p>Multi-Component Calibration - Multiple analytes in single run - Cross-validation standards - Quality control samples</p>"},{"location":"tutorials/calibration/#dilution-strategies","title":"Dilution Strategies","text":"<p>Serial Dilution: - Sequential 1:2, 1:5, 1:10 dilutions - Automatic volume calculations - Precision tracking</p> <p>Parallel Dilution: - Independent dilutions from stock - Higher precision for each point - Resource optimization</p> <p>Custom Ratios: - User-defined dilution factors - Non-linear concentration series - Specialized applications</p>"},{"location":"tutorials/calibration/#framework-structure","title":"Framework Structure","text":""},{"location":"tutorials/calibration/#core-components","title":"Core Components","text":"<p>Concentration Calculator: - Volume calculations for target concentrations - Stock solution management - Dilution factor optimization</p> <p>Preparation Workflow: - SIA-based automated dilution - Mixing and homogenization - Sample tracking</p> <p>Analysis Integration: - CE method execution - Data collection - Quality validation</p>"},{"location":"tutorials/calibration/#configuration-template","title":"Configuration Template","text":"<pre><code>@dataclass\nclass CalibrationConfig:\n    # Stock solution\n    stock_concentration: float\n    stock_vial: int\n\n    # Calibration points\n    target_concentrations: List[float]\n    target_vials: List[int]\n\n    # Volumes\n    final_volume: int = 1000  # \u00b5L\n\n    # Analysis\n    method_name: str = \"Calibration_Method\"\n    replicate_count: int = 3\n</code></pre>"},{"location":"tutorials/calibration/#workflow-template","title":"Workflow Template","text":"<pre><code>class CalibrationCreator:\n    def __init__(self, config, chemstation, sia):\n        self.config = config\n        self.chemstation = chemstation\n        self.sia = sia\n\n    def calculate_dilutions(self):\n        \"\"\"Calculate volumes for each calibration point\"\"\"\n        # Implementation pending\n\n    def prepare_standards(self):\n        \"\"\"Automated dilution preparation\"\"\"\n        # Implementation pending\n\n    def run_calibration_sequence(self):\n        \"\"\"Execute complete calibration analysis\"\"\"\n        # Implementation pending\n\n    def validate_linearity(self):\n        \"\"\"Post-analysis validation\"\"\"\n        # Implementation pending\n</code></pre>"},{"location":"tutorials/calibration/#future-implementation","title":"Future Implementation","text":""},{"location":"tutorials/calibration/#planned-features","title":"Planned Features","text":"<p>Automated Calculations: - Dilution volume optimization - Concentration verification - Error propagation analysis</p> <p>Quality Control: - Blank measurements - Duplicate analysis - Linearity validation</p> <p>Data Processing: - Peak area integration - Calibration curve fitting - R\u00b2 calculation and validation</p> <p>Report Generation: - Calibration curve plots - Statistical analysis - Method validation reports</p>"},{"location":"tutorials/calibration/#integration-points","title":"Integration Points","text":"<p>ChemStation Integration: - Method parameter optimization - Sequence creation from calibration points - Automated data processing</p> <p>SIA Integration: - Precision dilution protocols - Cross-contamination prevention - Automated cleaning procedures</p>"},{"location":"tutorials/calibration/#development-status","title":"Development Status","text":"<p>Current: Basic import structure Next Phase: Dilution calculation engine Future: Complete automation with validation</p>"},{"location":"tutorials/calibration/#usage-when-complete","title":"Usage (When Complete)","text":"<pre><code># Configuration\nconfig = CalibrationConfig(\n    stock_concentration=1000.0,  # mg/L\n    stock_vial=1,\n    target_concentrations=[1.0, 5.0, 10.0, 50.0, 100.0],\n    target_vials=[10, 11, 12, 13, 14]\n)\n\n# Create calibration\ncalibrator = CalibrationCreator(config, chemstation, sia)\ncalibrator.calculate_dilutions()\ncalibrator.prepare_standards()\ncalibrator.run_calibration_sequence()\n</code></pre>"},{"location":"tutorials/calibration/#technical-requirements","title":"Technical Requirements","text":"<p>Hardware: - SIA system for precise dilutions - CE system for analysis - Sufficient vial positions</p> <p>Software: - ChemStation API integration - SIA API for liquid handling - Data processing capabilities</p> <p>Standards: - Validated stock solutions - Appropriate solvents - Quality control materials</p>"},{"location":"tutorials/homogenization/","title":"Your First Automated Analysis","text":"<p>This tutorial will guide you through your first automated CE analysis using the SIA-CE system. We'll analyze a single sample with automated sample preparation.</p>"},{"location":"tutorials/homogenization/#what-well-do","title":"What We'll Do","text":"<ol> <li>Initialize the SIA system</li> <li>Prepare a sample with automated dilution</li> <li>Load the sample for CE analysis</li> <li>Run the separation</li> <li>Monitor the analysis progress</li> </ol>"},{"location":"tutorials/homogenization/#prerequisites","title":"Prerequisites","text":"<ul> <li>ChemStation is running with the macro loaded</li> <li>SIA devices are connected and powered on</li> <li>You have identified your COM ports</li> <li>Sample and reagents are prepared</li> </ul>"},{"location":"tutorials/homogenization/#step-1-system-setup","title":"Step 1: System Setup","text":"<pre><code># Import required modules\nfrom ChemstationAPI import ChemstationAPI\nfrom SIA_API.devices import syringeController, ValveSelector\nfrom SIA_API.methods import PreparedSIAMethods\nimport time\n\n# Initialize ChemStation connection\nprint(\"Connecting to ChemStation...\")\nce_api = ChemstationAPI()\nprint(\"\u2713 ChemStation connected\")\n\n# Initialize SIA devices\nprint(\"Initializing SIA devices...\")\nsyringe = syringeController(port=\"COM3\", syringe_size=1000)\nvalve = ValveSelector(port=\"COM4\", num_positions=8)\nprint(\"\u2713 SIA devices connected\")\n\n# Create workflow controller\nworkflow = PreparedSIAMethods(ce_api, syringe, valve)\nprint(\"\u2713 Workflow controller ready\")\n</code></pre>"},{"location":"tutorials/homogenization/#step-2-system-initialization","title":"Step 2: System Initialization","text":"<pre><code># Perform complete system initialization\nprint(\"\\nInitializing and cleaning system...\")\nprint(\"This will take about 2 minutes\")\n\nworkflow.system_initialization_and_cleaning(\n    waste_vial=50,  # Vial 50 for waste collection\n    bubble=20       # 20 \u00b5L separating bubble\n)\n\nprint(\"\u2713 System initialized and ready\")\n</code></pre>"},{"location":"tutorials/homogenization/#step-3-sample-information","title":"Step 3: Sample Information","text":"<pre><code># Define our sample parameters\nsample_info = {\n    'vial': 15,\n    'name': 'Protein_Sample_001',\n    'method': 'CE_Protein_Analysis',\n    'dilution': 10,  # 1:10 dilution\n    'volume': 1500   # \u00b5L final volume\n}\n\nprint(f\"\\nSample: {sample_info['name']}\")\nprint(f\"Location: Vial {sample_info['vial']}\")\nprint(f\"Dilution: 1:{sample_info['dilution']}\")\n</code></pre>"},{"location":"tutorials/homogenization/#step-4-validate-prerequisites","title":"Step 4: Validate Prerequisites","text":"<pre><code># Check everything is ready\nprint(\"\\nValidating system...\")\n\ntry:\n    # Check sample vial exists\n    ce_api.validation.validate_vial_in_system(sample_info['vial'])\n    print(\"\u2713 Sample vial present\")\n\n    # Check waste vials\n    ce_api.validation.validate_vial_in_system(48)  # Wash vial\n    ce_api.validation.validate_vial_in_system(50)  # Waste vial\n    print(\"\u2713 Wash and waste vials present\")\n\n    # Check method exists\n    ce_api.validation.validate_method_name(sample_info['method'])\n    print(\"\u2713 CE method found\")\n\n    # Check system is ready\n    if ce_api.system.status() == \"STANDBY\":\n        print(\"\u2713 CE system ready\")\n    else:\n        print(\"\u26a0 Waiting for system...\")\n        ce_api.system.wait_for_ready(timeout=60)\n\nexcept Exception as e:\n    print(f\"\u2717 Validation failed: {e}\")\n    print(\"Please fix the issue and restart\")\n    exit(1)\n\nprint(\"\\nAll checks passed!\")\n</code></pre>"},{"location":"tutorials/homogenization/#step-5-automated-sample-preparation","title":"Step 5: Automated Sample Preparation","text":"<pre><code># Prepare for sample dilution\nprint(f\"\\nPreparing 1:{sample_info['dilution']} dilution...\")\n\n# Calculate volumes\nsample_volume = sample_info['volume'] / sample_info['dilution']\ndiluent_volume = sample_info['volume'] - sample_volume\n\nprint(f\"Sample volume: {sample_volume:.0f} \u00b5L\")\nprint(f\"Diluent volume: {diluent_volume:.0f} \u00b5L\")\n\n# Prepare for continuous flow with DI water\nworkflow.prepare_continuous_flow(\n    solvent_port=3,  # DI water port\n    speed=2000       # 2 mL/min\n)\n\n# Note: In a real workflow, you would add the sample first,\n# then diluent. For this demo, we'll add diluent to an empty vial\nprint(\"\\nAdding diluent to vial...\")\nworkflow.continuous_fill(\n    vial=sample_info['vial'],\n    volume=diluent_volume,\n    solvent_port=3,\n    flush_needle=50\n)\n\nprint(\"\u2713 Diluent added\")\n\n# In practice, you would now add your sample\nprint(\"\\n\u26a0 Add sample to vial manually or use liquid handling robot\")\ninput(\"Press Enter when sample is added...\")\n\n# Homogenize the diluted sample\nprint(\"\\nMixing sample...\")\nworkflow.homogenize_sample(\n    vial=sample_info['vial'],\n    speed=1000,              # 1 mL/min bubbling\n    homogenization_time=30,  # 30 seconds\n    flush_needle=50\n)\n\nprint(\"\u2713 Sample prepared and mixed\")\n</code></pre>"},{"location":"tutorials/homogenization/#step-6-ce-analysis-setup","title":"Step 6: CE Analysis Setup","text":"<pre><code># Load vials for CE analysis\nprint(\"\\nSetting up CE analysis...\")\n\n# Load sample vial to inlet\nce_api.ce.load_vial_to_position(sample_info['vial'], \"inlet\")\nprint(\"\u2713 Sample loaded to inlet\")\n\n# Load waste vial to outlet\nce_api.ce.load_vial_to_position(48, \"outlet\")\nprint(\"\u2713 Waste vial loaded to outlet\")\n\n# Condition capillary\nprint(\"\\nConditioning capillary...\")\nce_api.ce.flush_capillary(time_flush=60.0)\nprint(\"\u2713 Capillary conditioned\")\n</code></pre>"},{"location":"tutorials/homogenization/#step-7-run-analysis","title":"Step 7: Run Analysis","text":"<pre><code># Start the CE analysis\nprint(f\"\\nStarting analysis: {sample_info['name']}\")\nprint(f\"Method: {sample_info['method']}\")\n\nce_api.method.execution_method_with_parameters(\n    vial=sample_info['vial'],\n    method_name=sample_info['method'],\n    sample_name=sample_info['name'],\n    comment=\"Tutorial first analysis\",\n    subdirectory_name=\"Tutorial_Runs\"\n)\n\nprint(\"\u2713 Analysis started\")\n</code></pre>"},{"location":"tutorials/homogenization/#step-8-monitor-progress","title":"Step 8: Monitor Progress","text":"<pre><code># Monitor the running analysis\nprint(\"\\nMonitoring analysis...\")\nprint(\"Press Ctrl+C to stop monitoring (analysis will continue)\")\n\ntry:\n    start_time = time.time()\n\n    while ce_api.system.method_on():\n        # Get progress information\n        elapsed = ce_api.system.get_elapsed_analysis_time()\n        total = ce_api.system.get_analysis_time()\n        remaining = ce_api.system.get_remaining_analysis_time()\n        status = ce_api.system.status()\n\n        # Calculate percentage\n        if total &gt; 0:\n            progress = (elapsed / total) * 100\n        else:\n            progress = 0\n\n        # Display progress\n        print(f\"\\rStatus: {status} | Progress: {progress:.1f}% | \"\n              f\"Remaining: {remaining:.1f} min\", end='')\n\n        time.sleep(10)  # Update every 10 seconds\n\nexcept KeyboardInterrupt:\n    print(\"\\n\\nStopped monitoring (analysis continues)\")\n\n# Analysis complete\ntotal_time = (time.time() - start_time) / 60\nprint(f\"\\n\\n\u2713 Analysis complete! Total time: {total_time:.1f} minutes\")\n</code></pre>"},{"location":"tutorials/homogenization/#step-9-cleanup","title":"Step 9: Cleanup","text":"<pre><code># Return vials to carousel\nprint(\"\\nCleaning up...\")\n\nce_api.ce.unload_vial_from_position(\"inlet\")\nce_api.ce.unload_vial_from_position(\"outlet\")\n\nprint(\"\u2713 Vials returned to carousel\")\nprint(\"\\nFirst analysis tutorial complete!\")\n</code></pre>"},{"location":"tutorials/homogenization/#complete-script","title":"Complete Script","text":"<p>Here's the complete script in one block:</p> <pre><code># First Analysis Tutorial - Complete Script\nfrom ChemstationAPI import ChemstationAPI\nfrom SIA_API.devices import syringeController, ValveSelector\nfrom SIA_API.methods import PreparedSIAMethods\nimport time\n\ndef first_analysis():\n    \"\"\"Run your first automated CE analysis with SIA sample prep.\"\"\"\n\n    # Initialize all systems\n    print(\"=== SIA-CE First Analysis Tutorial ===\\n\")\n\n    ce_api = ChemstationAPI()\n    syringe = syringeController(port=\"COM3\", syringe_size=1000)\n    valve = ValveSelector(port=\"COM4\", num_positions=8)\n    workflow = PreparedSIAMethods(ce_api, syringe, valve)\n\n    # Sample parameters\n    sample_vial = 15\n    sample_name = \"Tutorial_Sample_001\"\n    ce_method = \"CE_Protein_Analysis\"\n\n    # Initialize system\n    print(\"Initializing system...\")\n    workflow.system_initialization_and_cleaning()\n\n    # Validate prerequisites\n    print(\"\\nValidating...\")\n    ce_api.validation.validate_vial_in_system(sample_vial)\n    ce_api.validation.validate_method_name(ce_method)\n\n    # Prepare sample (dilution)\n    print(\"\\nPreparing sample...\")\n    workflow.prepare_continuous_flow(solvent_port=3)\n    workflow.continuous_fill(vial=sample_vial, volume=900, solvent_port=3)\n\n    input(\"\\nAdd 100 \u00b5L sample to vial and press Enter...\")\n\n    workflow.homogenize_sample(vial=sample_vial, speed=1000, \n                               homogenization_time=30)\n\n    # Setup CE\n    print(\"\\nSetting up CE...\")\n    ce_api.ce.load_vial_to_position(sample_vial, \"inlet\")\n    ce_api.ce.load_vial_to_position(48, \"outlet\")\n    ce_api.ce.flush_capillary(60.0)\n\n    # Run analysis\n    print(\"\\nStarting analysis...\")\n    ce_api.method.execution_method_with_parameters(\n        vial=sample_vial,\n        method_name=ce_method,\n        sample_name=sample_name\n    )\n\n    # Monitor\n    while ce_api.system.method_on():\n        remaining = ce_api.system.get_remaining_analysis_time()\n        print(f\"\\r{remaining:.1f} minutes remaining...\", end='')\n        time.sleep(30)\n\n    # Cleanup\n    print(\"\\n\\nCleaning up...\")\n    ce_api.ce.unload_vial_from_position(\"inlet\")\n    ce_api.ce.unload_vial_from_position(\"outlet\")\n\n    print(\"\\n\u2713 Analysis complete!\")\n\nif __name__ == \"__main__\":\n    first_analysis()\n</code></pre>"},{"location":"tutorials/homogenization/#what-you-learned","title":"What You Learned","text":"<p>In this tutorial, you:</p> <ol> <li>\u2713 Connected to ChemStation and SIA devices</li> <li>\u2713 Initialized the complete system</li> <li>\u2713 Validated all prerequisites</li> <li>\u2713 Performed automated sample dilution</li> <li>\u2713 Mixed samples using pneumatic homogenization</li> <li>\u2713 Set up and ran a CE analysis</li> <li>\u2713 Monitored analysis progress</li> <li>\u2713 Cleaned up after analysis</li> </ol>"},{"location":"tutorials/homogenization/#next-steps","title":"Next Steps","text":"<ul> <li>Try modifying the dilution ratio</li> <li>Run multiple samples in sequence</li> <li>Explore different CE methods</li> <li>Add more complex sample preparation</li> </ul>"},{"location":"tutorials/homogenization/#troubleshooting","title":"Troubleshooting","text":"<p>ChemStation Connection Failed - Is ChemStation running? - Is the macro loaded? (<code>macro \"path\\ChemPyConnect.mac\"; Python_Run</code>)</p> <p>SIA Device Not Responding - Check COM port numbers in Device Manager - Verify power and cable connections - Try <code>syringe.send_command(\"?\", get_response=True)</code></p> <p>Vial Not Found - Check vial is properly seated in carousel - Verify vial number is correct (1-50)</p> <p>Method Not Found - Check method name spelling (case-sensitive) - Verify method exists in ChemStation method directory</p> <p>Congratulations!</p> <p>You've completed your first automated analysis! Continue to Batch Processing to learn about analyzing multiple samples.</p>"},{"location":"tutorials/sample_processor/","title":"Advanced Sample Processing - Excel Integration","text":"<p>Batch processing system that reads sample parameters from Excel and performs automated preparation with parallel processing.</p>"},{"location":"tutorials/sample_processor/#overview","title":"Overview","text":"<p>Processes multiple samples automatically using Excel input file. Optimizes timing by preparing next sample during current CE analysis. Each sample gets individual incubation timing.</p>"},{"location":"tutorials/sample_processor/#key-features","title":"Key Features","text":"<ul> <li>Excel Integration: Direct reading of sample parameters</li> <li>Parallel Processing: Next sample preparation during analysis</li> <li>Individual Timing: Per-sample incubation periods</li> <li>Separate Flow Rates: Different speeds for MeOH and DI water</li> </ul>"},{"location":"tutorials/sample_processor/#configuration","title":"Configuration","text":"<pre><code>@dataclass\nclass ProcessorConfig:\n    # Excel file\n    excel_file_path: str = \"samples.xlsx\"\n\n    # Column mapping\n    column_vial: str = \"Vial\"\n    column_meoh: str = \"MeOH\" \n    column_di: str = \"DI\"\n    column_method: str = \"Method\"\n    column_name: str = \"Name\"\n\n    # Timing\n    waiting_time_after_meoh: int = 450  # seconds\n\n    # Flow rates\n    batch_fill_speed_meoh: int = 1000  # \u00b5L/min\n    batch_fill_speed_di: int = 1200    # \u00b5L/min\n\n    # Homogenization\n    homogenization_volume: int = 320\n    homogenization_cycles: int = 3\n</code></pre>"},{"location":"tutorials/sample_processor/#excel-format","title":"Excel Format","text":"Vial MeOH DI Method Name 10 400 100 CE_Method Sample_1 11 350 150 CE_Method Sample_2"},{"location":"tutorials/sample_processor/#workflow","title":"Workflow","text":"<ol> <li>Initial Batch: MeOH to first 3 samples \u2192 individual incubation \u2192 DI water addition</li> <li>Analysis Loop: Homogenize \u2192 start CE analysis \u2192 prepare next sample during analysis</li> <li>Parallel Processing: Next sample preparation optimally timed during current analysis</li> </ol>"},{"location":"tutorials/sample_processor/#usage","title":"Usage","text":"<pre><code>from config import ProcessorConfig\nfrom sample_processor import SampleProcessor\n\nconfig = ProcessorConfig()\nconfig.excel_file_path = \"my_samples.xlsx\"\n\nprocessor = SampleProcessor(config, chemstation, sia_methods)\nprocessor.process_all_samples()\n</code></pre>"},{"location":"tutorials/sample_processor/#technical-details","title":"Technical Details","text":"<p>Individual Incubation: - Each sample tracks its own MeOH addition time - DI water added after precise incubation period - Eliminates over-incubation</p> <p>Timing Optimization: - Next sample prepared when 2 minutes remain in current analysis - Minimizes idle time between samples - Automatic progress coordination</p> <p>Validation: - Excel file and column validation - Method and vial existence checking - Comprehensive error handling and logging</p>"}]}